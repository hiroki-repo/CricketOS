//Gocaine z80 cpu emulator
//this software code can be used to any purposes!
//and this software is unlicenced!
//Codename KisKan

#ifndef z80moduledefined
#define global z80moduledefined
#module z80moduleaccess
#deffunc gocaine_z80init 
dim opcodecc_op,256
dim opcodecc_cb,256
dim opcodecc_dd,256
dim opcodecc_ddcb,256
dim opcodecc_ed,256
dim opcodecc_fd,256
dim opcodecc_fdcb,256
dim opcodecc_ex,256
opcodecc_op = 4,10, 7, 6, 4, 4, 7, 4, 4,11, 7, 6, 4, 4, 7, 4, 8,10, 7, 6, 4, 4, 7, 4,12,11, 7, 6, 4, 4, 7, 4, 7,10,16, 6, 4, 4, 7, 4, 7,11,16, 6, 4, 4, 7, 4, 7,10,13, 6,11,11,10, 4, 7,11,13, 6, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 7, 7, 7, 7, 7, 7, 4, 7, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 5,10,10,10,10,11, 7,11, 5,10,10, 0,10,17, 7,11, 5,10,10,11,10,11, 7,11, 5, 4,10,11,10, 0, 7,11, 5,10,10,19,10,11, 7,11, 5, 4,10, 4,10, 0, 7,11, 5,10,10, 4,10,11, 7,11, 5, 6,10, 4,10, 0, 7,11
opcodecc_cb = 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,12, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8, 8, 8, 8, 8, 8, 8,15, 8
opcodecc_dd = 4, 4, 4, 4, 4, 4, 4, 4, 4,15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,15, 4, 4, 4, 4, 4, 4, 4,14,20,10, 9, 9, 9, 4, 4,15,20,10, 9, 9, 9, 4, 4, 4, 4, 4,23,23,19, 4, 4,15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 9, 9, 9, 9, 9, 9,19, 9, 9, 9, 9, 9, 9, 9,19, 9,19,19,19,19,19,19, 4,19, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,14, 4,23, 4,15, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,10, 4, 4, 4, 4, 4, 4
opcodecc_ddcb
opcodecc_ed = 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,12,12,15,20, 8, 8, 8, 9,12,12,15,20, 8, 8, 8, 9,12,12,15,20, 8, 8, 8, 9,12,12,15,20, 8, 8, 8, 9,12,12,15,20, 8, 8, 8,18,12,12,15,20, 8, 8, 8,18,12,12,15,20, 8, 8, 8, 8,12,12,15,20, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,16,16,16,16, 8, 8, 8, 8,16,16,16,16, 8, 8, 8, 8,16,16,16,16, 8, 8, 8, 8,16,16,16,16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
opcodecc_fd = 4, 4, 4, 4, 4, 4, 4, 4, 4,15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,15, 4, 4, 4, 4, 4, 4, 4,14,20,10, 9, 9, 9, 4, 4,15,20,10, 9, 9, 9, 4, 4, 4, 4, 4,23,23,19, 4, 4,15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 9, 9, 9, 9, 9, 9,19, 9, 9, 9, 9, 9, 9, 9,19, 9,19,19,19,19,19,19, 4,19, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 9, 9,19, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,14, 4,23, 4,15, 4, 4, 4, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,10, 4, 4, 4, 4, 4, 4
opcodecc_fdcb
opcodecc_ex = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 2, 6, 0, 0, 0, 7, 0, 0, 2, 6, 0, 0, 0, 7, 0, 0, 2, 6, 0, 0, 0, 7, 0, 0, 2, 6, 0, 0, 0, 7, 0, 0, 2, 6, 0, 0, 0, 7, 0, 0, 2, 6, 0, 0, 0, 7, 0, 0, 2, 6, 0, 0, 0, 7, 0, 0, 2
dim opcodex,256
dim opcodex_dd,256
dim opcodex_dd_cb,256
dim opcodex_fd,256
dim opcodex_fd_cb,256
dim opcodex_cb,256
dim opcodex_ed,256
opcodex(0) = 1,3,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,3,1,1,1,1,2,1,2,1,1,1,1,1,2,1,2,3,3,1,1,1,2,1,2,1,3,1,1,1,2,1,2,3,3,1,1,1,2,1,2,1,3,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,2,1,1,1,3,0,3,3,2,1,1,1,3,2,3,1,2,1,1,1,3,2,3,0,2,1,1,1,3,1,3,1,2,1,1,1,3,1,3,0,2,1,1,1,3,1,3,1,2,1,1,1,3,1,3,0,2,1
opcodex_dd(0) = 0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,4,2,2,2,3,0,0,2,4,2,2,2,3,0,0,0,0,0,3,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,3,3,3,3,3,3,0,3,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0
opcodex_dd_cb(0) = 4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
opcodex_fd(0) = 0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,4,2,2,2,3,0,0,2,4,2,2,2,3,0,0,0,0,0,3,3,4,0,0,2,0,0,0,0,0,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,3,3,3,3,3,3,0,3,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0
opcodex_fd_cb(0) = 4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
opcodex_cb(0) = 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
opcodex_ed(0) = 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,4,2,2,2,2,2,2,2,4,0,2,0,2,2,2,2,4,0,0,2,2,2,2,2,4,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,4,0,0,0,0,2,2,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
resforrlc=0
dim SZ,257
dim SZ_BIT,257
dim SZP,257
dim SZHV_inc,257
dim SZHV_dec,257
dim DAATable,0x800
dim breg_tmp,256
dim irep_tmp,4,4
dim drep_tmp,4,4

/*sdim SZHVC_add,65536*2
for oldval,0,256,1
	for newval,0,256,1
		val=newval-oldval
		if newval{if (newval & 0x80){poke SZHVC_add,padds,0x80}else{poke SZHVC_add,padds,0}}else{poke SZHVC_add,padds,0x40}//ifforval(newval,ifforval((newval & 0x80),0x80,0),0x40)
		poke SZHVC_add,padds,peek(SZHVC_add,padds)|(newval & (0x20 | 0x08))
		if((newval & 0x0f) < (oldval & 0x0f)){poke SZHVC_add,padds,peek(SZHVC_add,padds)|0x10}
		if(newval < oldval){poke SZHVC_add,padds,peek(SZHVC_add,padds)|0x01}
		if((val ^ oldval ^ 0x80) & (val ^ newval) & 0x80){poke SZHVC_add,padds,peek(SZHVC_add,padds)|0x04}
		padds+=1
		val=newval-oldval-1
		if newval{if (newval & 0x80){poke SZHVC_add,padcs+256*256,0x80}else{poke SZHVC_add,padcs+256*256,0}}else{poke SZHVC_add,padcs+256*256,0x40}//poke SZHVC_add,padcs+256*256,ifforval(newval,ifforval((newval & 0x80),0x80,0),0x40)
		poke SZHVC_add,padcs+256*256,peek(SZHVC_add,padcs+256*256)|(newval & (0x20 | 0x08))
		if((newval & 0x0f) <= (oldval & 0x0f)){poke SZHVC_add,padcs+256*256,peek(SZHVC_add,padcs+256*256)|0x10}
		if(newval <= oldval){poke SZHVC_add,padcs+256*256,peek(SZHVC_add,padcs+256*256)|0x01}
		if((val ^ oldval ^ 0x80) & (val ^ newval) & 0x80){poke SZHVC_add,padcs+256*256,peek(SZHVC_add,padcs+256*256)|0x04}
		padcs+=1
	next
next*/

/*	repeat 256
	i=cnt
		p = 0
		p2 = 0
		if(i & 0x01) {p2=p:p=p2+1}
		if(i & 0x02) {p2=p:p=p2+1}
		if(i & 0x04) {p2=p:p=p2+1}
		if(i & 0x08) {p2=p:p=p2+1}
		if(i & 0x10) {p2=p:p=p2+1}
		if(i & 0x20) {p2=p:p=p2+1}
		if(i & 0x40) {p2=p:p=p2+1}
		if(i & 0x80) {p2=p:p=p2+1}
		//SZ(i) = i
		if (i=(i & 0x80)) {SZ(i) = 0x40}
		SZ(i) |= (i & (0x20 | 0x08))
		//SZ_BIT(i) = i
		if (i = (i & 0x80)){SZ_BIT(i) = 0x40 | 0x04}
		SZ_BIT(i) |= (i & (0x20 | 0x08))
		p2=p
		p2xclac=0
		p2xclac=(p2 & 1)
		if p2xclac = 0{p2xclac=0x04}else{p2xclac=0}
		SZP(i)=SZ(i) | p2xclac
		p2=p
		if ((p2 & 1) = 0) {SZP(i) = SZP(i) | (0x04)}
		SZHV_inc(i) = SZ(i)
		if(i == 0x80) {SZHV_inc(i) |= 0x04}
		if((i & 0x0f) == 0x00) {SZHV_inc(i) |= 0x10}
		SZHV_dec(i) = SZ(i) | 0x02
		if(i == 0x7f) {SZHV_dec(i) |= 0x04}
		if((i & 0x0f) == 0x0f) {SZHV_dec(i) |= 0x10}
	loop*/

irep_tmp(0,0)= 0
irep_tmp(0,1)= 0
irep_tmp(0,2)= 1
irep_tmp(0,3)= 0
irep_tmp(1,0)= 0
irep_tmp(1,1)= 1
irep_tmp(1,2)= 0
irep_tmp(1,3)= 1
irep_tmp(2,0)= 1
irep_tmp(2,1)= 0
irep_tmp(2,2)= 1
irep_tmp(2,3)= 1
irep_tmp(3,0)= 0
irep_tmp(3,1)= 1
irep_tmp(3,2)= 1
irep_tmp(3,3)= 0

drep_tmp(0,0)= 0
drep_tmp(0,1)= 1
drep_tmp(0,2)= 0
drep_tmp(0,3)= 0
drep_tmp(1,0)= 1
drep_tmp(1,1)= 0
drep_tmp(1,2)= 0
drep_tmp(1,3)= 1
drep_tmp(2,0)= 0
drep_tmp(2,1)= 0
drep_tmp(2,2)= 1
drep_tmp(2,3)= 0
drep_tmp(3,0)= 0
drep_tmp(3,1)= 1
drep_tmp(3,2)= 0
drep_tmp(3,3)= 1

breg_tmp(0)= 0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1
SZ(0)      =0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8
SZ_BIT(0)  =0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8
SZP(0)     =0x44,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x08,0x0c,0x0c,0x08,0x0c,0x08,0x08,0x0c,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x0c,0x08,0x08,0x0c,0x08,0x0c,0x0c,0x08,0x20,0x24,0x24,0x20,0x24,0x20,0x20,0x24,0x2c,0x28,0x28,0x2c,0x28,0x2c,0x2c,0x28,0x24,0x20,0x20,0x24,0x20,0x24,0x24,0x20,0x28,0x2c,0x2c,0x28,0x2c,0x28,0x28,0x2c,0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x0c,0x08,0x08,0x0c,0x08,0x0c,0x0c,0x08,0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x08,0x0c,0x0c,0x08,0x0c,0x08,0x08,0x0c,0x24,0x20,0x20,0x24,0x20,0x24,0x24,0x20,0x28,0x2c,0x2c,0x28,0x2c,0x28,0x28,0x2c,0x20,0x24,0x24,0x20,0x24,0x20,0x20,0x24,0x2c,0x28,0x28,0x2c,0x28,0x2c,0x2c,0x28,0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,0x8c,0x88,0x88,0x8c,0x88,0x8c,0x8c,0x88,0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,0x88,0x8c,0x8c,0x88,0x8c,0x88,0x88,0x8c,0xa4,0xa0,0xa0,0xa4,0xa0,0xa4,0xa4,0xa0,0xa8,0xac,0xac,0xa8,0xac,0xa8,0xa8,0xac,0xa0,0xa4,0xa4,0xa0,0xa4,0xa0,0xa0,0xa4,0xac,0xa8,0xa8,0xac,0xa8,0xac,0xac,0xa8,0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,0x88,0x8c,0x8c,0x88,0x8c,0x88,0x88,0x8c,0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,0x8c,0x88,0x88,0x8c,0x88,0x8c,0x8c,0x88,0xa0,0xa4,0xa4,0xa0,0xa4,0xa0,0xa0,0xa4,0xac,0xa8,0xa8,0xac,0xa8,0xac,0xac,0xa8,0xa4,0xa0,0xa0,0xa4,0xa0,0xa4,0xa4,0xa0,0xa8,0xac,0xac,0xa8,0xac,0xa8,0xa8,0xac
SZHV_inc(0)=0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x30,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x94,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x90,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xb0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xb0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0x90,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x90,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xb0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xb0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8
SZHV_dec(0)=0x42,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x1a,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x1a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x3a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x3a,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x1a,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x1a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x3a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x3e,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x9a,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x9a,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xba,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xba,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x9a,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x9a,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xba,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xba
DAATable(0)= 0x0044,0x0100,0x0200,0x0304,0x0400,0x0504,0x0604,0x0700,0x0808,0x090c,0x1010,0x1114,0x1214,0x1310,0x1414,0x1510,0x1000,0x1104,0x1204,0x1300,0x1404,0x1500,0x1600,0x1704,0x180c,0x1908,0x2030,0x2134,0x2234,0x2330,0x2434,0x2530,0x2020,0x2124,0x2224,0x2320,0x2424,0x2520,0x2620,0x2724,0x282c,0x2928,0x3034,0x3130,0x3230,0x3334,0x3430,0x3534,0x3024,0x3120,0x3220,0x3324,0x3420,0x3524,0x3624,0x3720,0x3828,0x392c,0x4010,0x4114,0x4214,0x4310,0x4414,0x4510,0x4000,0x4104,0x4204,0x4300,0x4404,0x4500,0x4600,0x4704,0x480c,0x4908,0x5014,0x5110,0x5210,0x5314,0x5410,0x5514,0x5004,0x5100,0x5200,0x5304,0x5400,0x5504,0x5604,0x5700,0x5808,0x590c,0x6034,0x6130,0x6230,0x6334,0x6430,0x6534,0x6024,0x6120,0x6220,0x6324,0x6420,0x6524,0x6624,0x6720,0x6828,0x692c,0x7030,0x7134,0x7234,0x7330,0x7434,0x7530,0x7020,0x7124,0x7224,0x7320,0x7424,0x7520,0x7620,0x7724,0x782c,0x7928,0x8090,0x8194,0x8294,0x8390,0x8494,0x8590,0x8080,0x8184,0x8284,0x8380,0x8484,0x8580,0x8680,0x8784,0x888c,0x8988,0x9094,0x9190,0x9290,0x9394,0x9490,0x9594,0x9084,0x9180,0x9280,0x9384,0x9480,0x9584,0x9684,0x9780,0x9888,0x998c,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,0x0045,0x0101,0x0201,0x0305,0x0401,0x0505,0x0605,0x0701,0x0809,0x090d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,0x1001,0x1105,0x1205,0x1301,0x1405,0x1501,0x1601,0x1705,0x180d,0x1909,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,0x2021,0x2125,0x2225,0x2321,0x2425,0x2521,0x2621,0x2725,0x282d,0x2929,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,0x3025,0x3121,0x3221,0x3325,0x3421,0x3525,0x3625,0x3721,0x3829,0x392d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,0x4001,0x4105,0x4205,0x4301,0x4405,0x4501,0x4601,0x4705,0x480d,0x4909,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,0x5005,0x5101,0x5201,0x5305,0x5401,0x5505,0x5605,0x5701,0x5809,0x590d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,0x6025,0x6121,0x6221,0x6325,0x6421,0x6525,0x6625,0x6721,0x6829,0x692d,0x7031,0x7135,0x7235,0x7331,0x7435,0x7531,0x7021,0x7125,0x7225,0x7321,0x7425,0x7521,0x7621,0x7725,0x782d,0x7929,0x8091,0x8195,0x8295,0x8391,0x8495,0x8591,0x8081,0x8185,0x8285,0x8381,0x8485,0x8581,0x8681,0x8785,0x888d,0x8989,0x9095,0x9191,0x9291,0x9395,0x9491,0x9595,0x9085,0x9181,0x9281,0x9385,0x9481,0x9585,0x9685,0x9781,0x9889,0x998d,0xa0b5,0xa1b1,0xa2b1,0xa3b5,0xa4b1,0xa5b5,0xa0a5,0xa1a1,0xa2a1,0xa3a5,0xa4a1,0xa5a5,0xa6a5,0xa7a1,0xa8a9,0xa9ad,0xb0b1,0xb1b5,0xb2b5,0xb3b1,0xb4b5,0xb5b1,0xb0a1,0xb1a5,0xb2a5,0xb3a1,0xb4a5,0xb5a1,0xb6a1,0xb7a5,0xb8ad,0xb9a9,0xc095,0xc191,0xc291,0xc395,0xc491,0xc595,0xc085,0xc181,0xc281,0xc385,0xc481,0xc585,0xc685,0xc781,0xc889,0xc98d,0xd091,0xd195,0xd295,0xd391,0xd495,0xd591,0xd081,0xd185,0xd285,0xd381,0xd485,0xd581,0xd681,0xd785,0xd88d,0xd989,0xe0b1,0xe1b5,0xe2b5,0xe3b1,0xe4b5,0xe5b1,0xe0a1,0xe1a5,0xe2a5,0xe3a1,0xe4a5,0xe5a1,0xe6a1,0xe7a5,0xe8ad,0xe9a9,0xf0b5,0xf1b1,0xf2b1,0xf3b5,0xf4b1,0xf5b5,0xf0a5,0xf1a1,0xf2a1,0xf3a5,0xf4a1,0xf5a5,0xf6a5,0xf7a1,0xf8a9,0xf9ad,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,0x0045,0x0101,0x0201,0x0305,0x0401,0x0505,0x0605,0x0701,0x0809,0x090d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,0x1001,0x1105,0x1205,0x1301,0x1405,0x1501,0x1601,0x1705,0x180d,0x1909,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,0x2021,0x2125,0x2225,0x2321,0x2425,0x2521,0x2621,0x2725,0x282d,0x2929,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,0x3025,0x3121,0x3221,0x3325,0x3421,0x3525,0x3625,0x3721,0x3829,0x392d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,0x4001,0x4105,0x4205,0x4301,0x4405,0x4501,0x4601,0x4705,0x480d,0x4909,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,0x5005,0x5101,0x5201,0x5305,0x5401,0x5505,0x5605,0x5701,0x5809,0x590d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,0x0604,0x0700,0x0808,0x090c,0x0a0c,0x0b08,0x0c0c,0x0d08,0x0e08,0x0f0c,0x1010,0x1114,0x1214,0x1310,0x1414,0x1510,0x1600,0x1704,0x180c,0x1908,0x1a08,0x1b0c,0x1c08,0x1d0c,0x1e0c,0x1f08,0x2030,0x2134,0x2234,0x2330,0x2434,0x2530,0x2620,0x2724,0x282c,0x2928,0x2a28,0x2b2c,0x2c28,0x2d2c,0x2e2c,0x2f28,0x3034,0x3130,0x3230,0x3334,0x3430,0x3534,0x3624,0x3720,0x3828,0x392c,0x3a2c,0x3b28,0x3c2c,0x3d28,0x3e28,0x3f2c,0x4010,0x4114,0x4214,0x4310,0x4414,0x4510,0x4600,0x4704,0x480c,0x4908,0x4a08,0x4b0c,0x4c08,0x4d0c,0x4e0c,0x4f08,0x5014,0x5110,0x5210,0x5314,0x5410,0x5514,0x5604,0x5700,0x5808,0x590c,0x5a0c,0x5b08,0x5c0c,0x5d08,0x5e08,0x5f0c,0x6034,0x6130,0x6230,0x6334,0x6430,0x6534,0x6624,0x6720,0x6828,0x692c,0x6a2c,0x6b28,0x6c2c,0x6d28,0x6e28,0x6f2c,0x7030,0x7134,0x7234,0x7330,0x7434,0x7530,0x7620,0x7724,0x782c,0x7928,0x7a28,0x7b2c,0x7c28,0x7d2c,0x7e2c,0x7f28,0x8090,0x8194,0x8294,0x8390,0x8494,0x8590,0x8680,0x8784,0x888c,0x8988,0x8a88,0x8b8c,0x8c88,0x8d8c,0x8e8c,0x8f88,0x9094,0x9190,0x9290,0x9394,0x9490,0x9594,0x9684,0x9780,0x9888,0x998c,0x9a8c,0x9b88,0x9c8c,0x9d88,0x9e88,0x9f8c,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,0x0605,0x0701,0x0809,0x090d,0x0a0d,0x0b09,0x0c0d,0x0d09,0x0e09,0x0f0d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,0x1601,0x1705,0x180d,0x1909,0x1a09,0x1b0d,0x1c09,0x1d0d,0x1e0d,0x1f09,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,0x2621,0x2725,0x282d,0x2929,0x2a29,0x2b2d,0x2c29,0x2d2d,0x2e2d,0x2f29,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,0x3625,0x3721,0x3829,0x392d,0x3a2d,0x3b29,0x3c2d,0x3d29,0x3e29,0x3f2d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,0x4601,0x4705,0x480d,0x4909,0x4a09,0x4b0d,0x4c09,0x4d0d,0x4e0d,0x4f09,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,0x5605,0x5701,0x5809,0x590d,0x5a0d,0x5b09,0x5c0d,0x5d09,0x5e09,0x5f0d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,0x6625,0x6721,0x6829,0x692d,0x6a2d,0x6b29,0x6c2d,0x6d29,0x6e29,0x6f2d,0x7031,0x7135,0x7235,0x7331,0x7435,0x7531,0x7621,0x7725,0x782d,0x7929,0x7a29,0x7b2d,0x7c29,0x7d2d,0x7e2d,0x7f29,0x8091,0x8195,0x8295,0x8391,0x8495,0x8591,0x8681,0x8785,0x888d,0x8989,0x8a89,0x8b8d,0x8c89,0x8d8d,0x8e8d,0x8f89,0x9095,0x9191,0x9291,0x9395,0x9491,0x9595,0x9685,0x9781,0x9889,0x998d,0x9a8d,0x9b89,0x9c8d,0x9d89,0x9e89,0x9f8d,0xa0b5,0xa1b1,0xa2b1,0xa3b5,0xa4b1,0xa5b5,0xa6a5,0xa7a1,0xa8a9,0xa9ad,0xaaad,0xaba9,0xacad,0xada9,0xaea9,0xafad,0xb0b1,0xb1b5,0xb2b5,0xb3b1,0xb4b5,0xb5b1,0xb6a1,0xb7a5,0xb8ad,0xb9a9,0xbaa9,0xbbad,0xbca9,0xbdad,0xbead,0xbfa9,0xc095,0xc191,0xc291,0xc395,0xc491,0xc595,0xc685,0xc781,0xc889,0xc98d,0xca8d,0xcb89,0xcc8d,0xcd89,0xce89,0xcf8d,0xd091,0xd195,0xd295,0xd391,0xd495,0xd591,0xd681,0xd785,0xd88d,0xd989,0xda89,0xdb8d,0xdc89,0xdd8d,0xde8d,0xdf89,0xe0b1,0xe1b5,0xe2b5,0xe3b1,0xe4b5,0xe5b1,0xe6a1,0xe7a5,0xe8ad,0xe9a9,0xeaa9,0xebad,0xeca9,0xedad,0xeead,0xefa9,0xf0b5,0xf1b1,0xf2b1,0xf3b5,0xf4b1,0xf5b5,0xf6a5,0xf7a1,0xf8a9,0xf9ad,0xfaad,0xfba9,0xfcad,0xfda9,0xfea9,0xffad,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,0x0605,0x0701,0x0809,0x090d,0x0a0d,0x0b09,0x0c0d,0x0d09,0x0e09,0x0f0d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,0x1601,0x1705,0x180d,0x1909,0x1a09,0x1b0d,0x1c09,0x1d0d,0x1e0d,0x1f09,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,0x2621,0x2725,0x282d,0x2929,0x2a29,0x2b2d,0x2c29,0x2d2d,0x2e2d,0x2f29,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,0x3625,0x3721,0x3829,0x392d,0x3a2d,0x3b29,0x3c2d,0x3d29,0x3e29,0x3f2d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,0x4601,0x4705,0x480d,0x4909,0x4a09,0x4b0d,0x4c09,0x4d0d,0x4e0d,0x4f09,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,0x5605,0x5701,0x5809,0x590d,0x5a0d,0x5b09,0x5c0d,0x5d09,0x5e09,0x5f0d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,0x0046,0x0102,0x0202,0x0306,0x0402,0x0506,0x0606,0x0702,0x080a,0x090e,0x0402,0x0506,0x0606,0x0702,0x080a,0x090e,0x1002,0x1106,0x1206,0x1302,0x1406,0x1502,0x1602,0x1706,0x180e,0x190a,0x1406,0x1502,0x1602,0x1706,0x180e,0x190a,0x2022,0x2126,0x2226,0x2322,0x2426,0x2522,0x2622,0x2726,0x282e,0x292a,0x2426,0x2522,0x2622,0x2726,0x282e,0x292a,0x3026,0x3122,0x3222,0x3326,0x3422,0x3526,0x3626,0x3722,0x382a,0x392e,0x3422,0x3526,0x3626,0x3722,0x382a,0x392e,0x4002,0x4106,0x4206,0x4302,0x4406,0x4502,0x4602,0x4706,0x480e,0x490a,0x4406,0x4502,0x4602,0x4706,0x480e,0x490a,0x5006,0x5102,0x5202,0x5306,0x5402,0x5506,0x5606,0x5702,0x580a,0x590e,0x5402,0x5506,0x5606,0x5702,0x580a,0x590e,0x6026,0x6122,0x6222,0x6326,0x6422,0x6526,0x6626,0x6722,0x682a,0x692e,0x6422,0x6526,0x6626,0x6722,0x682a,0x692e,0x7022,0x7126,0x7226,0x7322,0x7426,0x7522,0x7622,0x7726,0x782e,0x792a,0x7426,0x7522,0x7622,0x7726,0x782e,0x792a,0x8082,0x8186,0x8286,0x8382,0x8486,0x8582,0x8682,0x8786,0x888e,0x898a,0x8486,0x8582,0x8682,0x8786,0x888e,0x898a,0x9086,0x9182,0x9282,0x9386,0x9482,0x9586,0x9686,0x9782,0x988a,0x998e,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,0xa0a7,0xa1a3,0xa2a3,0xa3a7,0xa4a3,0xa5a7,0xa6a7,0xa7a3,0xa8ab,0xa9af,0xa4a3,0xa5a7,0xa6a7,0xa7a3,0xa8ab,0xa9af,0xb0a3,0xb1a7,0xb2a7,0xb3a3,0xb4a7,0xb5a3,0xb6a3,0xb7a7,0xb8af,0xb9ab,0xb4a7,0xb5a3,0xb6a3,0xb7a7,0xb8af,0xb9ab,0xc087,0xc183,0xc283,0xc387,0xc483,0xc587,0xc687,0xc783,0xc88b,0xc98f,0xc483,0xc587,0xc687,0xc783,0xc88b,0xc98f,0xd083,0xd187,0xd287,0xd383,0xd487,0xd583,0xd683,0xd787,0xd88f,0xd98b,0xd487,0xd583,0xd683,0xd787,0xd88f,0xd98b,0xe0a3,0xe1a7,0xe2a7,0xe3a3,0xe4a7,0xe5a3,0xe6a3,0xe7a7,0xe8af,0xe9ab,0xe4a7,0xe5a3,0xe6a3,0xe7a7,0xe8af,0xe9ab,0xf0a7,0xf1a3,0xf2a3,0xf3a7,0xf4a3,0xf5a7,0xf6a7,0xf7a3,0xf8ab,0xf9af,0xf4a3,0xf5a7,0xf6a7,0xf7a3,0xf8ab,0xf9af,0x0047,0x0103,0x0203,0x0307,0x0403,0x0507,0x0607,0x0703,0x080b,0x090f,0x0403,0x0507,0x0607,0x0703,0x080b,0x090f,0x1003,0x1107,0x1207,0x1303,0x1407,0x1503,0x1603,0x1707,0x180f,0x190b,0x1407,0x1503,0x1603,0x1707,0x180f,0x190b,0x2023,0x2127,0x2227,0x2323,0x2427,0x2523,0x2623,0x2727,0x282f,0x292b,0x2427,0x2523,0x2623,0x2727,0x282f,0x292b,0x3027,0x3123,0x3223,0x3327,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,0xfabe,0xfbba,0xfcbe,0xfdba,0xfeba,0xffbe,0x0046,0x0102,0x0202,0x0306,0x0402,0x0506,0x0606,0x0702,0x080a,0x090e,0x0a1e,0x0b1a,0x0c1e,0x0d1a,0x0e1a,0x0f1e,0x1002,0x1106,0x1206,0x1302,0x1406,0x1502,0x1602,0x1706,0x180e,0x190a,0x1a1a,0x1b1e,0x1c1a,0x1d1e,0x1e1e,0x1f1a,0x2022,0x2126,0x2226,0x2322,0x2426,0x2522,0x2622,0x2726,0x282e,0x292a,0x2a3a,0x2b3e,0x2c3a,0x2d3e,0x2e3e,0x2f3a,0x3026,0x3122,0x3222,0x3326,0x3422,0x3526,0x3626,0x3722,0x382a,0x392e,0x3a3e,0x3b3a,0x3c3e,0x3d3a,0x3e3a,0x3f3e,0x4002,0x4106,0x4206,0x4302,0x4406,0x4502,0x4602,0x4706,0x480e,0x490a,0x4a1a,0x4b1e,0x4c1a,0x4d1e,0x4e1e,0x4f1a,0x5006,0x5102,0x5202,0x5306,0x5402,0x5506,0x5606,0x5702,0x580a,0x590e,0x5a1e,0x5b1a,0x5c1e,0x5d1a,0x5e1a,0x5f1e,0x6026,0x6122,0x6222,0x6326,0x6422,0x6526,0x6626,0x6722,0x682a,0x692e,0x6a3e,0x6b3a,0x6c3e,0x6d3a,0x6e3a,0x6f3e,0x7022,0x7126,0x7226,0x7322,0x7426,0x7522,0x7622,0x7726,0x782e,0x792a,0x7a3a,0x7b3e,0x7c3a,0x7d3e,0x7e3e,0x7f3a,0x8082,0x8186,0x8286,0x8382,0x8486,0x8582,0x8682,0x8786,0x888e,0x898a,0x8a9a,0x8b9e,0x8c9a,0x8d9e,0x8e9e,0x8f9a,0x9086,0x9182,0x9282,0x9386,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,0x3a3f,0x3b3b,0x3c3f,0x3d3b,0x3e3b,0x3f3f,0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x4a1b,0x4b1f,0x4c1b,0x4d1f,0x4e1f,0x4f1b,0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x5a1f,0x5b1b,0x5c1f,0x5d1b,0x5e1b,0x5f1f,0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x6a3f,0x6b3b,0x6c3f,0x6d3b,0x6e3b,0x6f3f,0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x7a3b,0x7b3f,0x7c3b,0x7d3f,0x7e3f,0x7f3b,0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x8a9b,0x8b9f,0x8c9b,0x8d9f,0x8e9f,0x8f9b,0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,0x9a9f,0x9b9b,0x9c9f,0x9d9b,0x9e9b,0x9f9f,0xa0a7,0xa1a3,0xa2a3,0xa3a7,0xa4a3,0xa5a7,0xa6a7,0xa7a3,0xa8ab,0xa9af,0xaabf,0xabbb,0xacbf,0xadbb,0xaebb,0xafbf,0xb0a3,0xb1a7,0xb2a7,0xb3a3,0xb4a7,0xb5a3,0xb6a3,0xb7a7,0xb8af,0xb9ab,0xbabb,0xbbbf,0xbcbb,0xbdbf,0xbebf,0xbfbb,0xc087,0xc183,0xc283,0xc387,0xc483,0xc587,0xc687,0xc783,0xc88b,0xc98f,0xca9f,0xcb9b,0xcc9f,0xcd9b,0xce9b,0xcf9f,0xd083,0xd187,0xd287,0xd383,0xd487,0xd583,0xd683,0xd787,0xd88f,0xd98b,0xda9b,0xdb9f,0xdc9b,0xdd9f,0xde9f,0xdf9b,0xe0a3,0xe1a7,0xe2a7,0xe3a3,0xe4a7,0xe5a3,0xe6a3,0xe7a7,0xe8af,0xe9ab,0xeabb,0xebbf,0xecbb,0xedbf,0xeebf,0xefbb,0xf0a7,0xf1a3,0xf2a3,0xf3a7,0xf4a3,0xf5a7,0xf6a7,0xf7a3,0xf8ab,0xf9af,0xfabf,0xfbbb,0xfcbf,0xfdbb,0xfebb,0xffbf,0x0047,0x0103,0x0203,0x0307,0x0403,0x0507,0x0607,0x0703,0x080b,0x090f,0x0a1f,0x0b1b,0x0c1f,0x0d1b,0x0e1b,0x0f1f,0x1003,0x1107,0x1207,0x1303,0x1407,0x1503,0x1603,0x1707,0x180f,0x190b,0x1a1b,0x1b1f,0x1c1b,0x1d1f,0x1e1f,0x1f1b,0x2023,0x2127,0x2227,0x2323,0x2427,0x2523,0x2623,0x2727,0x282f,0x292b,0x2a3b,0x2b3f,0x2c3b,0x2d3f,0x2e3f,0x2f3b,0x3027,0x3123,0x3223,0x3327,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,0x3a3f,0x3b3b,0x3c3f,0x3d3b,0x3e3b,0x3f3f,0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x4a1b,0x4b1f,0x4c1b,0x4d1f,0x4e1f,0x4f1b,0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x5a1f,0x5b1b,0x5c1f,0x5d1b,0x5e1b,0x5f1f,0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x6a3f,0x6b3b,0x6c3f,0x6d3b,0x6e3b,0x6f3f,0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x7a3b,0x7b3f,0x7c3b,0x7d3f,0x7e3f,0x7f3b,0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x8a9b,0x8b9f,0x8c9b,0x8d9f,0x8e9f,0x8f9b,0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f

	SZ(256)=SZ(0)
	SZ_BIT(256)=SZ_BIT(0)
	SZHV_inc(256)=SZHV_inc(0)
	SZHV_dec(256)=SZHV_dec(0)
	i=0
sdim stack,64,2
//sdim memory,65540
ldim opcodeaddr,256
ldim opcodeaddr_cb,256
ldim opcodeaddr_dd,256
ldim opcodeaddr_dd_cb,256
ldim opcodeaddr_ed,256
ldim opcodeaddr_fd,256
ldim opcodeaddr_fd_cb,256
jumplabel=*null
//repeat 256
cntx=0
/**z80jumplabelsetrpt
lpoke opcodeaddr(cntx),0,lpeek(jumplabel,0)
cntx+=1:if cntx<256{goto *z80jumplabelsetrpt}*/
iomemorycalledid=0
iomemorycalledid16=0
iomemorycalled=0
cnt2=0
opcodeaddr(cnt2)=*opcode_00:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_01:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_02:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_03:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_04:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_05:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_06:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_07:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_08:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_09:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_0a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_0b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_0c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_0d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_0e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_0f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_10_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_11:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_12:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_13:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_14:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_15:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_16:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_17:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_18:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_19:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_1a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_1b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_1c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_1d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_1e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_1f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_20_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_21:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_22:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_23:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_24:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_25:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_26:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_27:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_28_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_29:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_2a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_2b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_2c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_2d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_2e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_2f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_30_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_31:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_32:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_33:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_34:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_35:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_36:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_37:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_38_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_39:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_3a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_3b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_3c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_3d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_3e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_3f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_40:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_41:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_42:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_43:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_44:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_45:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_46:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_47:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_48:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_49:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_4a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_4b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_4c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_4d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_4e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_4f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_50:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_51:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_52:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_53:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_54:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_55:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_56:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_57:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_58:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_59:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_5a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_5b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_5c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_5d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_5e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_5f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_60:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_61:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_62:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_63:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_64:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_65:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_66:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_67:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_68:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_69:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_6a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_6b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_6c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_6d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_6e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_6f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_70:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_71:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_72:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_73:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_74:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_75:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_76:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_77:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_78:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_79:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_7a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_7b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_7c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_7d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_7e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_7f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_80:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_81:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_82:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_83:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_84:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_85:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_86:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_87:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_88:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_89:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_8a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_8b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_8c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_8d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_8e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_8f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_90:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_91:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_92:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_93:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_94:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_95:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_96:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_97:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_98:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_99:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_9a:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_9b:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_9c:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_9d:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_9e:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_9f:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a0:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a1:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a2:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a3:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a4:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a5:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a6:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a7:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a8:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_a9:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_aa:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ab:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ac:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ad:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ae:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_af:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b0:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b1:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b2:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b3:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b4:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b5:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b6:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b7:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b8:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_b9:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ba:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_bb:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_bc:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_bd:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_be:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_bf:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c0_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c1:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c2_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c3:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c4_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c5:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c6:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c7:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c8_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_c9:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ca_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_cb:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_cc_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_cd:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ce:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_cf:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d0_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d1:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d2_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d3:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d4_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d5:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d6:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d7:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d8_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_d9:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_da_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_db:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_dc_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_dd:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_de:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_df:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e0_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e1:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e2_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e3:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e4_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e5:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e6:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e7:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e8_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_e9:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ea_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_eb:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ec_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ed:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ee:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ef:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f0_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f1:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f2_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f3:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f4_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f5:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f6:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f7:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f8_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_f9:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_fa_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_fb:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_fc_lbl:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_fd:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_fe:cnt2=cnt2+1
opcodeaddr(cnt2)=*opcode_ff:cnt2=cnt2+1

opcodeaddr_cb(0)=*opcode_cb_00
opcodeaddr_cb(1)=*opcode_cb_01
opcodeaddr_cb(2)=*opcode_cb_02
opcodeaddr_cb(3)=*opcode_cb_03
opcodeaddr_cb(4)=*opcode_cb_04
opcodeaddr_cb(5)=*opcode_cb_05
opcodeaddr_cb(6)=*opcode_cb_06
opcodeaddr_cb(7)=*opcode_cb_07
opcodeaddr_cb(8)=*opcode_cb_08
opcodeaddr_cb(9)=*opcode_cb_09
opcodeaddr_cb(10)=*opcode_cb_0A
opcodeaddr_cb(11)=*opcode_cb_0B
opcodeaddr_cb(12)=*opcode_cb_0C
opcodeaddr_cb(13)=*opcode_cb_0D
opcodeaddr_cb(14)=*opcode_cb_0E
opcodeaddr_cb(15)=*opcode_cb_0F
opcodeaddr_cb(16)=*opcode_cb_10
opcodeaddr_cb(17)=*opcode_cb_11
opcodeaddr_cb(18)=*opcode_cb_12
opcodeaddr_cb(19)=*opcode_cb_13
opcodeaddr_cb(20)=*opcode_cb_14
opcodeaddr_cb(21)=*opcode_cb_15
opcodeaddr_cb(22)=*opcode_cb_16
opcodeaddr_cb(23)=*opcode_cb_17
opcodeaddr_cb(24)=*opcode_cb_18
opcodeaddr_cb(25)=*opcode_cb_19
opcodeaddr_cb(26)=*opcode_cb_1A
opcodeaddr_cb(27)=*opcode_cb_1B
opcodeaddr_cb(28)=*opcode_cb_1C
opcodeaddr_cb(29)=*opcode_cb_1D
opcodeaddr_cb(30)=*opcode_cb_1E
opcodeaddr_cb(31)=*opcode_cb_1F
opcodeaddr_cb(32)=*opcode_cb_20
opcodeaddr_cb(33)=*opcode_cb_21
opcodeaddr_cb(34)=*opcode_cb_22
opcodeaddr_cb(35)=*opcode_cb_23
opcodeaddr_cb(36)=*opcode_cb_24
opcodeaddr_cb(37)=*opcode_cb_25
opcodeaddr_cb(38)=*opcode_cb_26
opcodeaddr_cb(39)=*opcode_cb_27
opcodeaddr_cb(40)=*opcode_cb_28
opcodeaddr_cb(41)=*opcode_cb_29
opcodeaddr_cb(42)=*opcode_cb_2A
opcodeaddr_cb(43)=*opcode_cb_2B
opcodeaddr_cb(44)=*opcode_cb_2C
opcodeaddr_cb(45)=*opcode_cb_2D
opcodeaddr_cb(46)=*opcode_cb_2E
opcodeaddr_cb(47)=*opcode_cb_2F
opcodeaddr_cb(48)=*opcode_cb_30
opcodeaddr_cb(49)=*opcode_cb_31
opcodeaddr_cb(50)=*opcode_cb_32
opcodeaddr_cb(51)=*opcode_cb_33
opcodeaddr_cb(52)=*opcode_cb_34
opcodeaddr_cb(53)=*opcode_cb_35
opcodeaddr_cb(54)=*opcode_cb_36
opcodeaddr_cb(55)=*opcode_cb_37
opcodeaddr_cb(56)=*opcode_cb_38
opcodeaddr_cb(57)=*opcode_cb_39
opcodeaddr_cb(58)=*opcode_cb_3A
opcodeaddr_cb(59)=*opcode_cb_3B
opcodeaddr_cb(60)=*opcode_cb_3C
opcodeaddr_cb(61)=*opcode_cb_3D
opcodeaddr_cb(62)=*opcode_cb_3E
opcodeaddr_cb(63)=*opcode_cb_3F
opcodeaddr_cb(64)=*opcode_cb_40
opcodeaddr_cb(65)=*opcode_cb_41
opcodeaddr_cb(66)=*opcode_cb_42
opcodeaddr_cb(67)=*opcode_cb_43
opcodeaddr_cb(68)=*opcode_cb_44
opcodeaddr_cb(69)=*opcode_cb_45
opcodeaddr_cb(70)=*opcode_cb_46
opcodeaddr_cb(71)=*opcode_cb_47
opcodeaddr_cb(72)=*opcode_cb_48
opcodeaddr_cb(73)=*opcode_cb_49
opcodeaddr_cb(74)=*opcode_cb_4A
opcodeaddr_cb(75)=*opcode_cb_4B
opcodeaddr_cb(76)=*opcode_cb_4C
opcodeaddr_cb(77)=*opcode_cb_4D
opcodeaddr_cb(78)=*opcode_cb_4E
opcodeaddr_cb(79)=*opcode_cb_4F
opcodeaddr_cb(80)=*opcode_cb_50
opcodeaddr_cb(81)=*opcode_cb_51
opcodeaddr_cb(82)=*opcode_cb_52
opcodeaddr_cb(83)=*opcode_cb_53
opcodeaddr_cb(84)=*opcode_cb_54
opcodeaddr_cb(85)=*opcode_cb_55
opcodeaddr_cb(86)=*opcode_cb_56
opcodeaddr_cb(87)=*opcode_cb_57
opcodeaddr_cb(88)=*opcode_cb_58
opcodeaddr_cb(89)=*opcode_cb_59
opcodeaddr_cb(90)=*opcode_cb_5A
opcodeaddr_cb(91)=*opcode_cb_5B
opcodeaddr_cb(92)=*opcode_cb_5C
opcodeaddr_cb(93)=*opcode_cb_5D
opcodeaddr_cb(94)=*opcode_cb_5E
opcodeaddr_cb(95)=*opcode_cb_5F
opcodeaddr_cb(96)=*opcode_cb_60
opcodeaddr_cb(97)=*opcode_cb_61
opcodeaddr_cb(98)=*opcode_cb_62
opcodeaddr_cb(99)=*opcode_cb_63
opcodeaddr_cb(100)=*opcode_cb_64
opcodeaddr_cb(101)=*opcode_cb_65
opcodeaddr_cb(102)=*opcode_cb_66
opcodeaddr_cb(103)=*opcode_cb_67
opcodeaddr_cb(104)=*opcode_cb_68
opcodeaddr_cb(105)=*opcode_cb_69
opcodeaddr_cb(106)=*opcode_cb_6A
opcodeaddr_cb(107)=*opcode_cb_6B
opcodeaddr_cb(108)=*opcode_cb_6C
opcodeaddr_cb(109)=*opcode_cb_6D
opcodeaddr_cb(110)=*opcode_cb_6E
opcodeaddr_cb(111)=*opcode_cb_6F
opcodeaddr_cb(112)=*opcode_cb_70
opcodeaddr_cb(113)=*opcode_cb_71
opcodeaddr_cb(114)=*opcode_cb_72
opcodeaddr_cb(115)=*opcode_cb_73
opcodeaddr_cb(116)=*opcode_cb_74
opcodeaddr_cb(117)=*opcode_cb_75
opcodeaddr_cb(118)=*opcode_cb_76
opcodeaddr_cb(119)=*opcode_cb_77
opcodeaddr_cb(120)=*opcode_cb_78
opcodeaddr_cb(121)=*opcode_cb_79
opcodeaddr_cb(122)=*opcode_cb_7A
opcodeaddr_cb(123)=*opcode_cb_7B
opcodeaddr_cb(124)=*opcode_cb_7C
opcodeaddr_cb(125)=*opcode_cb_7D
opcodeaddr_cb(126)=*opcode_cb_7E
opcodeaddr_cb(127)=*opcode_cb_7F
opcodeaddr_cb(128)=*opcode_cb_80
opcodeaddr_cb(129)=*opcode_cb_81
opcodeaddr_cb(130)=*opcode_cb_82
opcodeaddr_cb(131)=*opcode_cb_83
opcodeaddr_cb(132)=*opcode_cb_84
opcodeaddr_cb(133)=*opcode_cb_85
opcodeaddr_cb(134)=*opcode_cb_86
opcodeaddr_cb(135)=*opcode_cb_87
opcodeaddr_cb(136)=*opcode_cb_88
opcodeaddr_cb(137)=*opcode_cb_89
opcodeaddr_cb(138)=*opcode_cb_8A
opcodeaddr_cb(139)=*opcode_cb_8B
opcodeaddr_cb(140)=*opcode_cb_8C
opcodeaddr_cb(141)=*opcode_cb_8D
opcodeaddr_cb(142)=*opcode_cb_8E
opcodeaddr_cb(143)=*opcode_cb_8F
opcodeaddr_cb(144)=*opcode_cb_90
opcodeaddr_cb(145)=*opcode_cb_91
opcodeaddr_cb(146)=*opcode_cb_92
opcodeaddr_cb(147)=*opcode_cb_93
opcodeaddr_cb(148)=*opcode_cb_94
opcodeaddr_cb(149)=*opcode_cb_95
opcodeaddr_cb(150)=*opcode_cb_96
opcodeaddr_cb(151)=*opcode_cb_97
opcodeaddr_cb(152)=*opcode_cb_98
opcodeaddr_cb(153)=*opcode_cb_99
opcodeaddr_cb(154)=*opcode_cb_9A
opcodeaddr_cb(155)=*opcode_cb_9B
opcodeaddr_cb(156)=*opcode_cb_9C
opcodeaddr_cb(157)=*opcode_cb_9D
opcodeaddr_cb(158)=*opcode_cb_9E
opcodeaddr_cb(159)=*opcode_cb_9F
opcodeaddr_cb(160)=*opcode_cb_A0
opcodeaddr_cb(161)=*opcode_cb_A1
opcodeaddr_cb(162)=*opcode_cb_A2
opcodeaddr_cb(163)=*opcode_cb_A3
opcodeaddr_cb(164)=*opcode_cb_A4
opcodeaddr_cb(165)=*opcode_cb_A5
opcodeaddr_cb(166)=*opcode_cb_A6
opcodeaddr_cb(167)=*opcode_cb_A7
opcodeaddr_cb(168)=*opcode_cb_A8
opcodeaddr_cb(169)=*opcode_cb_A9
opcodeaddr_cb(170)=*opcode_cb_AA
opcodeaddr_cb(171)=*opcode_cb_AB
opcodeaddr_cb(172)=*opcode_cb_AC
opcodeaddr_cb(173)=*opcode_cb_AD
opcodeaddr_cb(174)=*opcode_cb_AE
opcodeaddr_cb(175)=*opcode_cb_AF
opcodeaddr_cb(176)=*opcode_cb_B0
opcodeaddr_cb(177)=*opcode_cb_B1
opcodeaddr_cb(178)=*opcode_cb_B2
opcodeaddr_cb(179)=*opcode_cb_B3
opcodeaddr_cb(180)=*opcode_cb_B4
opcodeaddr_cb(181)=*opcode_cb_B5
opcodeaddr_cb(182)=*opcode_cb_B6
opcodeaddr_cb(183)=*opcode_cb_B7
opcodeaddr_cb(184)=*opcode_cb_B8
opcodeaddr_cb(185)=*opcode_cb_B9
opcodeaddr_cb(186)=*opcode_cb_BA
opcodeaddr_cb(187)=*opcode_cb_BB
opcodeaddr_cb(188)=*opcode_cb_BC
opcodeaddr_cb(189)=*opcode_cb_BD
opcodeaddr_cb(190)=*opcode_cb_BE
opcodeaddr_cb(191)=*opcode_cb_BF
opcodeaddr_cb(192)=*opcode_cb_C0
opcodeaddr_cb(193)=*opcode_cb_C1
opcodeaddr_cb(194)=*opcode_cb_C2
opcodeaddr_cb(195)=*opcode_cb_C3
opcodeaddr_cb(196)=*opcode_cb_C4
opcodeaddr_cb(197)=*opcode_cb_C5
opcodeaddr_cb(198)=*opcode_cb_C6
opcodeaddr_cb(199)=*opcode_cb_C7
opcodeaddr_cb(200)=*opcode_cb_C8
opcodeaddr_cb(201)=*opcode_cb_C9
opcodeaddr_cb(202)=*opcode_cb_CA
opcodeaddr_cb(203)=*opcode_cb_CB
opcodeaddr_cb(204)=*opcode_cb_CC
opcodeaddr_cb(205)=*opcode_cb_CD
opcodeaddr_cb(206)=*opcode_cb_CE
opcodeaddr_cb(207)=*opcode_cb_CF
opcodeaddr_cb(208)=*opcode_cb_D0
opcodeaddr_cb(209)=*opcode_cb_D1
opcodeaddr_cb(210)=*opcode_cb_D2
opcodeaddr_cb(211)=*opcode_cb_D3
opcodeaddr_cb(212)=*opcode_cb_D4
opcodeaddr_cb(213)=*opcode_cb_D5
opcodeaddr_cb(214)=*opcode_cb_D6
opcodeaddr_cb(215)=*opcode_cb_D7
opcodeaddr_cb(216)=*opcode_cb_D8
opcodeaddr_cb(217)=*opcode_cb_D9
opcodeaddr_cb(218)=*opcode_cb_DA
opcodeaddr_cb(219)=*opcode_cb_DB
opcodeaddr_cb(220)=*opcode_cb_DC
opcodeaddr_cb(221)=*opcode_cb_DD
opcodeaddr_cb(222)=*opcode_cb_DE
opcodeaddr_cb(223)=*opcode_cb_DF
opcodeaddr_cb(224)=*opcode_cb_E0
opcodeaddr_cb(225)=*opcode_cb_E1
opcodeaddr_cb(226)=*opcode_cb_E2
opcodeaddr_cb(227)=*opcode_cb_E3
opcodeaddr_cb(228)=*opcode_cb_E4
opcodeaddr_cb(229)=*opcode_cb_E5
opcodeaddr_cb(230)=*opcode_cb_E6
opcodeaddr_cb(231)=*opcode_cb_E7
opcodeaddr_cb(232)=*opcode_cb_E8
opcodeaddr_cb(233)=*opcode_cb_E9
opcodeaddr_cb(234)=*opcode_cb_EA
opcodeaddr_cb(235)=*opcode_cb_EB
opcodeaddr_cb(236)=*opcode_cb_EC
opcodeaddr_cb(237)=*opcode_cb_ED
opcodeaddr_cb(238)=*opcode_cb_EE
opcodeaddr_cb(239)=*opcode_cb_EF
opcodeaddr_cb(240)=*opcode_cb_F0
opcodeaddr_cb(241)=*opcode_cb_F1
opcodeaddr_cb(242)=*opcode_cb_F2
opcodeaddr_cb(243)=*opcode_cb_F3
opcodeaddr_cb(244)=*opcode_cb_F4
opcodeaddr_cb(245)=*opcode_cb_F5
opcodeaddr_cb(246)=*opcode_cb_F6
opcodeaddr_cb(247)=*opcode_cb_F7
opcodeaddr_cb(248)=*opcode_cb_F8
opcodeaddr_cb(249)=*opcode_cb_F9
opcodeaddr_cb(250)=*opcode_cb_FA
opcodeaddr_cb(251)=*opcode_cb_FB
opcodeaddr_cb(252)=*opcode_cb_FC
opcodeaddr_cb(253)=*opcode_cb_FD
opcodeaddr_cb(254)=*opcode_cb_FE
opcodeaddr_cb(255)=*opcode_cb_FF

opcodeaddr_dd(0)=*opcode_dd_00
opcodeaddr_dd(1)=*opcode_dd_01
opcodeaddr_dd(2)=*opcode_dd_02
opcodeaddr_dd(3)=*opcode_dd_03
opcodeaddr_dd(4)=*opcode_dd_04
opcodeaddr_dd(5)=*opcode_dd_05
opcodeaddr_dd(6)=*opcode_dd_06
opcodeaddr_dd(7)=*opcode_dd_07
opcodeaddr_dd(8)=*opcode_dd_08
opcodeaddr_dd(9)=*opcode_dd_09
opcodeaddr_dd(10)=*opcode_dd_0A
opcodeaddr_dd(11)=*opcode_dd_0B
opcodeaddr_dd(12)=*opcode_dd_0C
opcodeaddr_dd(13)=*opcode_dd_0D
opcodeaddr_dd(14)=*opcode_dd_0E
opcodeaddr_dd(15)=*opcode_dd_0F
opcodeaddr_dd(16)=*opcode_dd_10
opcodeaddr_dd(17)=*opcode_dd_11
opcodeaddr_dd(18)=*opcode_dd_12
opcodeaddr_dd(19)=*opcode_dd_13
opcodeaddr_dd(20)=*opcode_dd_14
opcodeaddr_dd(21)=*opcode_dd_15
opcodeaddr_dd(22)=*opcode_dd_16
opcodeaddr_dd(23)=*opcode_dd_17
opcodeaddr_dd(24)=*opcode_dd_18
opcodeaddr_dd(25)=*opcode_dd_19
opcodeaddr_dd(26)=*opcode_dd_1A
opcodeaddr_dd(27)=*opcode_dd_1B
opcodeaddr_dd(28)=*opcode_dd_1C
opcodeaddr_dd(29)=*opcode_dd_1D
opcodeaddr_dd(30)=*opcode_dd_1E
opcodeaddr_dd(31)=*opcode_dd_1F
opcodeaddr_dd(32)=*opcode_dd_20
opcodeaddr_dd(33)=*opcode_dd_21
opcodeaddr_dd(34)=*opcode_dd_22
opcodeaddr_dd(35)=*opcode_dd_23
opcodeaddr_dd(36)=*opcode_dd_24
opcodeaddr_dd(37)=*opcode_dd_25
opcodeaddr_dd(38)=*opcode_dd_26
opcodeaddr_dd(39)=*opcode_dd_27
opcodeaddr_dd(40)=*opcode_dd_28
opcodeaddr_dd(41)=*opcode_dd_29
opcodeaddr_dd(42)=*opcode_dd_2A
opcodeaddr_dd(43)=*opcode_dd_2B
opcodeaddr_dd(44)=*opcode_dd_2C
opcodeaddr_dd(45)=*opcode_dd_2D
opcodeaddr_dd(46)=*opcode_dd_2E
opcodeaddr_dd(47)=*opcode_dd_2F
opcodeaddr_dd(48)=*opcode_dd_30
opcodeaddr_dd(49)=*opcode_dd_31
opcodeaddr_dd(50)=*opcode_dd_32
opcodeaddr_dd(51)=*opcode_dd_33
opcodeaddr_dd(52)=*opcode_dd_34
opcodeaddr_dd(53)=*opcode_dd_35
opcodeaddr_dd(54)=*opcode_dd_36
opcodeaddr_dd(55)=*opcode_dd_37
opcodeaddr_dd(56)=*opcode_dd_38
opcodeaddr_dd(57)=*opcode_dd_39
opcodeaddr_dd(58)=*opcode_dd_3A
opcodeaddr_dd(59)=*opcode_dd_3B
opcodeaddr_dd(60)=*opcode_dd_3C
opcodeaddr_dd(61)=*opcode_dd_3D
opcodeaddr_dd(62)=*opcode_dd_3E
opcodeaddr_dd(63)=*opcode_dd_3F
opcodeaddr_dd(64)=*opcode_dd_40
opcodeaddr_dd(65)=*opcode_dd_41
opcodeaddr_dd(66)=*opcode_dd_42
opcodeaddr_dd(67)=*opcode_dd_43
opcodeaddr_dd(68)=*opcode_dd_44
opcodeaddr_dd(69)=*opcode_dd_45
opcodeaddr_dd(70)=*opcode_dd_46
opcodeaddr_dd(71)=*opcode_dd_47
opcodeaddr_dd(72)=*opcode_dd_48
opcodeaddr_dd(73)=*opcode_dd_49
opcodeaddr_dd(74)=*opcode_dd_4A
opcodeaddr_dd(75)=*opcode_dd_4B
opcodeaddr_dd(76)=*opcode_dd_4C
opcodeaddr_dd(77)=*opcode_dd_4D
opcodeaddr_dd(78)=*opcode_dd_4E
opcodeaddr_dd(79)=*opcode_dd_4F
opcodeaddr_dd(80)=*opcode_dd_50
opcodeaddr_dd(81)=*opcode_dd_51
opcodeaddr_dd(82)=*opcode_dd_52
opcodeaddr_dd(83)=*opcode_dd_53
opcodeaddr_dd(84)=*opcode_dd_54
opcodeaddr_dd(85)=*opcode_dd_55
opcodeaddr_dd(86)=*opcode_dd_56
opcodeaddr_dd(87)=*opcode_dd_57
opcodeaddr_dd(88)=*opcode_dd_58
opcodeaddr_dd(89)=*opcode_dd_59
opcodeaddr_dd(90)=*opcode_dd_5A
opcodeaddr_dd(91)=*opcode_dd_5B
opcodeaddr_dd(92)=*opcode_dd_5C
opcodeaddr_dd(93)=*opcode_dd_5D
opcodeaddr_dd(94)=*opcode_dd_5E
opcodeaddr_dd(95)=*opcode_dd_5F
opcodeaddr_dd(96)=*opcode_dd_60
opcodeaddr_dd(97)=*opcode_dd_61
opcodeaddr_dd(98)=*opcode_dd_62
opcodeaddr_dd(99)=*opcode_dd_63
opcodeaddr_dd(100)=*opcode_dd_64
opcodeaddr_dd(101)=*opcode_dd_65
opcodeaddr_dd(102)=*opcode_dd_66
opcodeaddr_dd(103)=*opcode_dd_67
opcodeaddr_dd(104)=*opcode_dd_68
opcodeaddr_dd(105)=*opcode_dd_69
opcodeaddr_dd(106)=*opcode_dd_6A
opcodeaddr_dd(107)=*opcode_dd_6B
opcodeaddr_dd(108)=*opcode_dd_6C
opcodeaddr_dd(109)=*opcode_dd_6D
opcodeaddr_dd(110)=*opcode_dd_6E
opcodeaddr_dd(111)=*opcode_dd_6F
opcodeaddr_dd(112)=*opcode_dd_70
opcodeaddr_dd(113)=*opcode_dd_71
opcodeaddr_dd(114)=*opcode_dd_72
opcodeaddr_dd(115)=*opcode_dd_73
opcodeaddr_dd(116)=*opcode_dd_74
opcodeaddr_dd(117)=*opcode_dd_75
opcodeaddr_dd(118)=*opcode_dd_76
opcodeaddr_dd(119)=*opcode_dd_77
opcodeaddr_dd(120)=*opcode_dd_78
opcodeaddr_dd(121)=*opcode_dd_79
opcodeaddr_dd(122)=*opcode_dd_7A
opcodeaddr_dd(123)=*opcode_dd_7B
opcodeaddr_dd(124)=*opcode_dd_7C
opcodeaddr_dd(125)=*opcode_dd_7D
opcodeaddr_dd(126)=*opcode_dd_7E
opcodeaddr_dd(127)=*opcode_dd_7F
opcodeaddr_dd(128)=*opcode_dd_80
opcodeaddr_dd(129)=*opcode_dd_81
opcodeaddr_dd(130)=*opcode_dd_82
opcodeaddr_dd(131)=*opcode_dd_83
opcodeaddr_dd(132)=*opcode_dd_84
opcodeaddr_dd(133)=*opcode_dd_85
opcodeaddr_dd(134)=*opcode_dd_86
opcodeaddr_dd(135)=*opcode_dd_87
opcodeaddr_dd(136)=*opcode_dd_88
opcodeaddr_dd(137)=*opcode_dd_89
opcodeaddr_dd(138)=*opcode_dd_8A
opcodeaddr_dd(139)=*opcode_dd_8B
opcodeaddr_dd(140)=*opcode_dd_8C
opcodeaddr_dd(141)=*opcode_dd_8D
opcodeaddr_dd(142)=*opcode_dd_8E
opcodeaddr_dd(143)=*opcode_dd_8F
opcodeaddr_dd(144)=*opcode_dd_90
opcodeaddr_dd(145)=*opcode_dd_91
opcodeaddr_dd(146)=*opcode_dd_92
opcodeaddr_dd(147)=*opcode_dd_93
opcodeaddr_dd(148)=*opcode_dd_94
opcodeaddr_dd(149)=*opcode_dd_95
opcodeaddr_dd(150)=*opcode_dd_96
opcodeaddr_dd(151)=*opcode_dd_97
opcodeaddr_dd(152)=*opcode_dd_98
opcodeaddr_dd(153)=*opcode_dd_99
opcodeaddr_dd(154)=*opcode_dd_9A
opcodeaddr_dd(155)=*opcode_dd_9B
opcodeaddr_dd(156)=*opcode_dd_9C
opcodeaddr_dd(157)=*opcode_dd_9D
opcodeaddr_dd(158)=*opcode_dd_9E
opcodeaddr_dd(159)=*opcode_dd_9F
opcodeaddr_dd(160)=*opcode_dd_A0
opcodeaddr_dd(161)=*opcode_dd_A1
opcodeaddr_dd(162)=*opcode_dd_A2
opcodeaddr_dd(163)=*opcode_dd_A3
opcodeaddr_dd(164)=*opcode_dd_A4
opcodeaddr_dd(165)=*opcode_dd_A5
opcodeaddr_dd(166)=*opcode_dd_A6
opcodeaddr_dd(167)=*opcode_dd_A7
opcodeaddr_dd(168)=*opcode_dd_A8
opcodeaddr_dd(169)=*opcode_dd_A9
opcodeaddr_dd(170)=*opcode_dd_AA
opcodeaddr_dd(171)=*opcode_dd_AB
opcodeaddr_dd(172)=*opcode_dd_AC
opcodeaddr_dd(173)=*opcode_dd_AD
opcodeaddr_dd(174)=*opcode_dd_AE
opcodeaddr_dd(175)=*opcode_dd_AF
opcodeaddr_dd(176)=*opcode_dd_B0
opcodeaddr_dd(177)=*opcode_dd_B1
opcodeaddr_dd(178)=*opcode_dd_B2
opcodeaddr_dd(179)=*opcode_dd_B3
opcodeaddr_dd(180)=*opcode_dd_B4
opcodeaddr_dd(181)=*opcode_dd_B5
opcodeaddr_dd(182)=*opcode_dd_B6
opcodeaddr_dd(183)=*opcode_dd_B7
opcodeaddr_dd(184)=*opcode_dd_B8
opcodeaddr_dd(185)=*opcode_dd_B9
opcodeaddr_dd(186)=*opcode_dd_BA
opcodeaddr_dd(187)=*opcode_dd_BB
opcodeaddr_dd(188)=*opcode_dd_BC
opcodeaddr_dd(189)=*opcode_dd_BD
opcodeaddr_dd(190)=*opcode_dd_BE
opcodeaddr_dd(191)=*opcode_dd_BF
opcodeaddr_dd(192)=*opcode_dd_C0
opcodeaddr_dd(193)=*opcode_dd_C1
opcodeaddr_dd(194)=*opcode_dd_C2
opcodeaddr_dd(195)=*opcode_dd_C3
opcodeaddr_dd(196)=*opcode_dd_C4
opcodeaddr_dd(197)=*opcode_dd_C5
opcodeaddr_dd(198)=*opcode_dd_C6
opcodeaddr_dd(199)=*opcode_dd_C7
opcodeaddr_dd(200)=*opcode_dd_C8
opcodeaddr_dd(201)=*opcode_dd_C9
opcodeaddr_dd(202)=*opcode_dd_CA
opcodeaddr_dd(203)=*opcode_dd_CB
opcodeaddr_dd(204)=*opcode_dd_CC
opcodeaddr_dd(205)=*opcode_dd_CD
opcodeaddr_dd(206)=*opcode_dd_CE
opcodeaddr_dd(207)=*opcode_dd_CF
opcodeaddr_dd(208)=*opcode_dd_D0
opcodeaddr_dd(209)=*opcode_dd_D1
opcodeaddr_dd(210)=*opcode_dd_D2
opcodeaddr_dd(211)=*opcode_dd_D3
opcodeaddr_dd(212)=*opcode_dd_D4
opcodeaddr_dd(213)=*opcode_dd_D5
opcodeaddr_dd(214)=*opcode_dd_D6
opcodeaddr_dd(215)=*opcode_dd_D7
opcodeaddr_dd(216)=*opcode_dd_D8
opcodeaddr_dd(217)=*opcode_dd_D9
opcodeaddr_dd(218)=*opcode_dd_DA
opcodeaddr_dd(219)=*opcode_dd_DB
opcodeaddr_dd(220)=*opcode_dd_DC
opcodeaddr_dd(221)=*opcode_dd_DD
opcodeaddr_dd(222)=*opcode_dd_DE
opcodeaddr_dd(223)=*opcode_dd_DF
opcodeaddr_dd(224)=*opcode_dd_E0
opcodeaddr_dd(225)=*opcode_dd_E1
opcodeaddr_dd(226)=*opcode_dd_E2
opcodeaddr_dd(227)=*opcode_dd_E3
opcodeaddr_dd(228)=*opcode_dd_E4
opcodeaddr_dd(229)=*opcode_dd_E5
opcodeaddr_dd(230)=*opcode_dd_E6
opcodeaddr_dd(231)=*opcode_dd_E7
opcodeaddr_dd(232)=*opcode_dd_E8
opcodeaddr_dd(233)=*opcode_dd_E9
opcodeaddr_dd(234)=*opcode_dd_EA
opcodeaddr_dd(235)=*opcode_dd_EB
opcodeaddr_dd(236)=*opcode_dd_EC
opcodeaddr_dd(237)=*opcode_dd_ED
opcodeaddr_dd(238)=*opcode_dd_EE
opcodeaddr_dd(239)=*opcode_dd_EF
opcodeaddr_dd(240)=*opcode_dd_F0
opcodeaddr_dd(241)=*opcode_dd_F1
opcodeaddr_dd(242)=*opcode_dd_F2
opcodeaddr_dd(243)=*opcode_dd_F3
opcodeaddr_dd(244)=*opcode_dd_F4
opcodeaddr_dd(245)=*opcode_dd_F5
opcodeaddr_dd(246)=*opcode_dd_F6
opcodeaddr_dd(247)=*opcode_dd_F7
opcodeaddr_dd(248)=*opcode_dd_F8
opcodeaddr_dd(249)=*opcode_dd_F9
opcodeaddr_dd(250)=*opcode_dd_FA
opcodeaddr_dd(251)=*opcode_dd_FB
opcodeaddr_dd(252)=*opcode_dd_FC
opcodeaddr_dd(253)=*opcode_dd_FD
opcodeaddr_dd(254)=*opcode_dd_FE
opcodeaddr_dd(255)=*opcode_dd_FF

opcodeaddr_dd_cb(0)=*opcode_dd_cb_00
opcodeaddr_dd_cb(1)=*opcode_dd_cb_01
opcodeaddr_dd_cb(2)=*opcode_dd_cb_02
opcodeaddr_dd_cb(3)=*opcode_dd_cb_03
opcodeaddr_dd_cb(4)=*opcode_dd_cb_04
opcodeaddr_dd_cb(5)=*opcode_dd_cb_05
opcodeaddr_dd_cb(6)=*opcode_dd_cb_06
opcodeaddr_dd_cb(7)=*opcode_dd_cb_07
opcodeaddr_dd_cb(8)=*opcode_dd_cb_08
opcodeaddr_dd_cb(9)=*opcode_dd_cb_09
opcodeaddr_dd_cb(10)=*opcode_dd_cb_0A
opcodeaddr_dd_cb(11)=*opcode_dd_cb_0B
opcodeaddr_dd_cb(12)=*opcode_dd_cb_0C
opcodeaddr_dd_cb(13)=*opcode_dd_cb_0D
opcodeaddr_dd_cb(14)=*opcode_dd_cb_0E
opcodeaddr_dd_cb(15)=*opcode_dd_cb_0F
opcodeaddr_dd_cb(16)=*opcode_dd_cb_10
opcodeaddr_dd_cb(17)=*opcode_dd_cb_11
opcodeaddr_dd_cb(18)=*opcode_dd_cb_12
opcodeaddr_dd_cb(19)=*opcode_dd_cb_13
opcodeaddr_dd_cb(20)=*opcode_dd_cb_14
opcodeaddr_dd_cb(21)=*opcode_dd_cb_15
opcodeaddr_dd_cb(22)=*opcode_dd_cb_16
opcodeaddr_dd_cb(23)=*opcode_dd_cb_17
opcodeaddr_dd_cb(24)=*opcode_dd_cb_18
opcodeaddr_dd_cb(25)=*opcode_dd_cb_19
opcodeaddr_dd_cb(26)=*opcode_dd_cb_1A
opcodeaddr_dd_cb(27)=*opcode_dd_cb_1B
opcodeaddr_dd_cb(28)=*opcode_dd_cb_1C
opcodeaddr_dd_cb(29)=*opcode_dd_cb_1D
opcodeaddr_dd_cb(30)=*opcode_dd_cb_1E
opcodeaddr_dd_cb(31)=*opcode_dd_cb_1F
opcodeaddr_dd_cb(32)=*opcode_dd_cb_20
opcodeaddr_dd_cb(33)=*opcode_dd_cb_21
opcodeaddr_dd_cb(34)=*opcode_dd_cb_22
opcodeaddr_dd_cb(35)=*opcode_dd_cb_23
opcodeaddr_dd_cb(36)=*opcode_dd_cb_24
opcodeaddr_dd_cb(37)=*opcode_dd_cb_25
opcodeaddr_dd_cb(38)=*opcode_dd_cb_26
opcodeaddr_dd_cb(39)=*opcode_dd_cb_27
opcodeaddr_dd_cb(40)=*opcode_dd_cb_28
opcodeaddr_dd_cb(41)=*opcode_dd_cb_29
opcodeaddr_dd_cb(42)=*opcode_dd_cb_2A
opcodeaddr_dd_cb(43)=*opcode_dd_cb_2B
opcodeaddr_dd_cb(44)=*opcode_dd_cb_2C
opcodeaddr_dd_cb(45)=*opcode_dd_cb_2D
opcodeaddr_dd_cb(46)=*opcode_dd_cb_2E
opcodeaddr_dd_cb(47)=*opcode_dd_cb_2F
opcodeaddr_dd_cb(48)=*opcode_dd_cb_30
opcodeaddr_dd_cb(49)=*opcode_dd_cb_31
opcodeaddr_dd_cb(50)=*opcode_dd_cb_32
opcodeaddr_dd_cb(51)=*opcode_dd_cb_33
opcodeaddr_dd_cb(52)=*opcode_dd_cb_34
opcodeaddr_dd_cb(53)=*opcode_dd_cb_35
opcodeaddr_dd_cb(54)=*opcode_dd_cb_36
opcodeaddr_dd_cb(55)=*opcode_dd_cb_37
opcodeaddr_dd_cb(56)=*opcode_dd_cb_38
opcodeaddr_dd_cb(57)=*opcode_dd_cb_39
opcodeaddr_dd_cb(58)=*opcode_dd_cb_3A
opcodeaddr_dd_cb(59)=*opcode_dd_cb_3B
opcodeaddr_dd_cb(60)=*opcode_dd_cb_3C
opcodeaddr_dd_cb(61)=*opcode_dd_cb_3D
opcodeaddr_dd_cb(62)=*opcode_dd_cb_3E
opcodeaddr_dd_cb(63)=*opcode_dd_cb_3F
opcodeaddr_dd_cb(64)=*opcode_dd_cb_40
opcodeaddr_dd_cb(65)=*opcode_dd_cb_41
opcodeaddr_dd_cb(66)=*opcode_dd_cb_42
opcodeaddr_dd_cb(67)=*opcode_dd_cb_43
opcodeaddr_dd_cb(68)=*opcode_dd_cb_44
opcodeaddr_dd_cb(69)=*opcode_dd_cb_45
opcodeaddr_dd_cb(70)=*opcode_dd_cb_46
opcodeaddr_dd_cb(71)=*opcode_dd_cb_47
opcodeaddr_dd_cb(72)=*opcode_dd_cb_48
opcodeaddr_dd_cb(73)=*opcode_dd_cb_49
opcodeaddr_dd_cb(74)=*opcode_dd_cb_4A
opcodeaddr_dd_cb(75)=*opcode_dd_cb_4B
opcodeaddr_dd_cb(76)=*opcode_dd_cb_4C
opcodeaddr_dd_cb(77)=*opcode_dd_cb_4D
opcodeaddr_dd_cb(78)=*opcode_dd_cb_4E
opcodeaddr_dd_cb(79)=*opcode_dd_cb_4F
opcodeaddr_dd_cb(80)=*opcode_dd_cb_50
opcodeaddr_dd_cb(81)=*opcode_dd_cb_51
opcodeaddr_dd_cb(82)=*opcode_dd_cb_52
opcodeaddr_dd_cb(83)=*opcode_dd_cb_53
opcodeaddr_dd_cb(84)=*opcode_dd_cb_54
opcodeaddr_dd_cb(85)=*opcode_dd_cb_55
opcodeaddr_dd_cb(86)=*opcode_dd_cb_56
opcodeaddr_dd_cb(87)=*opcode_dd_cb_57
opcodeaddr_dd_cb(88)=*opcode_dd_cb_58
opcodeaddr_dd_cb(89)=*opcode_dd_cb_59
opcodeaddr_dd_cb(90)=*opcode_dd_cb_5A
opcodeaddr_dd_cb(91)=*opcode_dd_cb_5B
opcodeaddr_dd_cb(92)=*opcode_dd_cb_5C
opcodeaddr_dd_cb(93)=*opcode_dd_cb_5D
opcodeaddr_dd_cb(94)=*opcode_dd_cb_5E
opcodeaddr_dd_cb(95)=*opcode_dd_cb_5F
opcodeaddr_dd_cb(96)=*opcode_dd_cb_60
opcodeaddr_dd_cb(97)=*opcode_dd_cb_61
opcodeaddr_dd_cb(98)=*opcode_dd_cb_62
opcodeaddr_dd_cb(99)=*opcode_dd_cb_63
opcodeaddr_dd_cb(100)=*opcode_dd_cb_64
opcodeaddr_dd_cb(101)=*opcode_dd_cb_65
opcodeaddr_dd_cb(102)=*opcode_dd_cb_66
opcodeaddr_dd_cb(103)=*opcode_dd_cb_67
opcodeaddr_dd_cb(104)=*opcode_dd_cb_68
opcodeaddr_dd_cb(105)=*opcode_dd_cb_69
opcodeaddr_dd_cb(106)=*opcode_dd_cb_6A
opcodeaddr_dd_cb(107)=*opcode_dd_cb_6B
opcodeaddr_dd_cb(108)=*opcode_dd_cb_6C
opcodeaddr_dd_cb(109)=*opcode_dd_cb_6D
opcodeaddr_dd_cb(110)=*opcode_dd_cb_6E
opcodeaddr_dd_cb(111)=*opcode_dd_cb_6F
opcodeaddr_dd_cb(112)=*opcode_dd_cb_70
opcodeaddr_dd_cb(113)=*opcode_dd_cb_71
opcodeaddr_dd_cb(114)=*opcode_dd_cb_72
opcodeaddr_dd_cb(115)=*opcode_dd_cb_73
opcodeaddr_dd_cb(116)=*opcode_dd_cb_74
opcodeaddr_dd_cb(117)=*opcode_dd_cb_75
opcodeaddr_dd_cb(118)=*opcode_dd_cb_76
opcodeaddr_dd_cb(119)=*opcode_dd_cb_77
opcodeaddr_dd_cb(120)=*opcode_dd_cb_78
opcodeaddr_dd_cb(121)=*opcode_dd_cb_79
opcodeaddr_dd_cb(122)=*opcode_dd_cb_7A
opcodeaddr_dd_cb(123)=*opcode_dd_cb_7B
opcodeaddr_dd_cb(124)=*opcode_dd_cb_7C
opcodeaddr_dd_cb(125)=*opcode_dd_cb_7D
opcodeaddr_dd_cb(126)=*opcode_dd_cb_7E
opcodeaddr_dd_cb(127)=*opcode_dd_cb_7F
opcodeaddr_dd_cb(128)=*opcode_dd_cb_80
opcodeaddr_dd_cb(129)=*opcode_dd_cb_81
opcodeaddr_dd_cb(130)=*opcode_dd_cb_82
opcodeaddr_dd_cb(131)=*opcode_dd_cb_83
opcodeaddr_dd_cb(132)=*opcode_dd_cb_84
opcodeaddr_dd_cb(133)=*opcode_dd_cb_85
opcodeaddr_dd_cb(134)=*opcode_dd_cb_86
opcodeaddr_dd_cb(135)=*opcode_dd_cb_87
opcodeaddr_dd_cb(136)=*opcode_dd_cb_88
opcodeaddr_dd_cb(137)=*opcode_dd_cb_89
opcodeaddr_dd_cb(138)=*opcode_dd_cb_8A
opcodeaddr_dd_cb(139)=*opcode_dd_cb_8B
opcodeaddr_dd_cb(140)=*opcode_dd_cb_8C
opcodeaddr_dd_cb(141)=*opcode_dd_cb_8D
opcodeaddr_dd_cb(142)=*opcode_dd_cb_8E
opcodeaddr_dd_cb(143)=*opcode_dd_cb_8F
opcodeaddr_dd_cb(144)=*opcode_dd_cb_90
opcodeaddr_dd_cb(145)=*opcode_dd_cb_91
opcodeaddr_dd_cb(146)=*opcode_dd_cb_92
opcodeaddr_dd_cb(147)=*opcode_dd_cb_93
opcodeaddr_dd_cb(148)=*opcode_dd_cb_94
opcodeaddr_dd_cb(149)=*opcode_dd_cb_95
opcodeaddr_dd_cb(150)=*opcode_dd_cb_96
opcodeaddr_dd_cb(151)=*opcode_dd_cb_97
opcodeaddr_dd_cb(152)=*opcode_dd_cb_98
opcodeaddr_dd_cb(153)=*opcode_dd_cb_99
opcodeaddr_dd_cb(154)=*opcode_dd_cb_9A
opcodeaddr_dd_cb(155)=*opcode_dd_cb_9B
opcodeaddr_dd_cb(156)=*opcode_dd_cb_9C
opcodeaddr_dd_cb(157)=*opcode_dd_cb_9D
opcodeaddr_dd_cb(158)=*opcode_dd_cb_9E
opcodeaddr_dd_cb(159)=*opcode_dd_cb_9F
opcodeaddr_dd_cb(160)=*opcode_dd_cb_A0
opcodeaddr_dd_cb(161)=*opcode_dd_cb_A1
opcodeaddr_dd_cb(162)=*opcode_dd_cb_A2
opcodeaddr_dd_cb(163)=*opcode_dd_cb_A3
opcodeaddr_dd_cb(164)=*opcode_dd_cb_A4
opcodeaddr_dd_cb(165)=*opcode_dd_cb_A5
opcodeaddr_dd_cb(166)=*opcode_dd_cb_A6
opcodeaddr_dd_cb(167)=*opcode_dd_cb_A7
opcodeaddr_dd_cb(168)=*opcode_dd_cb_A8
opcodeaddr_dd_cb(169)=*opcode_dd_cb_A9
opcodeaddr_dd_cb(170)=*opcode_dd_cb_AA
opcodeaddr_dd_cb(171)=*opcode_dd_cb_AB
opcodeaddr_dd_cb(172)=*opcode_dd_cb_AC
opcodeaddr_dd_cb(173)=*opcode_dd_cb_AD
opcodeaddr_dd_cb(174)=*opcode_dd_cb_AE
opcodeaddr_dd_cb(175)=*opcode_dd_cb_AF
opcodeaddr_dd_cb(176)=*opcode_dd_cb_B0
opcodeaddr_dd_cb(177)=*opcode_dd_cb_B1
opcodeaddr_dd_cb(178)=*opcode_dd_cb_B2
opcodeaddr_dd_cb(179)=*opcode_dd_cb_B3
opcodeaddr_dd_cb(180)=*opcode_dd_cb_B4
opcodeaddr_dd_cb(181)=*opcode_dd_cb_B5
opcodeaddr_dd_cb(182)=*opcode_dd_cb_B6
opcodeaddr_dd_cb(183)=*opcode_dd_cb_B7
opcodeaddr_dd_cb(184)=*opcode_dd_cb_B8
opcodeaddr_dd_cb(185)=*opcode_dd_cb_B9
opcodeaddr_dd_cb(186)=*opcode_dd_cb_BA
opcodeaddr_dd_cb(187)=*opcode_dd_cb_BB
opcodeaddr_dd_cb(188)=*opcode_dd_cb_BC
opcodeaddr_dd_cb(189)=*opcode_dd_cb_BD
opcodeaddr_dd_cb(190)=*opcode_dd_cb_BE
opcodeaddr_dd_cb(191)=*opcode_dd_cb_BF
opcodeaddr_dd_cb(192)=*opcode_dd_cb_C0
opcodeaddr_dd_cb(193)=*opcode_dd_cb_C1
opcodeaddr_dd_cb(194)=*opcode_dd_cb_C2
opcodeaddr_dd_cb(195)=*opcode_dd_cb_C3
opcodeaddr_dd_cb(196)=*opcode_dd_cb_C4
opcodeaddr_dd_cb(197)=*opcode_dd_cb_C5
opcodeaddr_dd_cb(198)=*opcode_dd_cb_C6
opcodeaddr_dd_cb(199)=*opcode_dd_cb_C7
opcodeaddr_dd_cb(200)=*opcode_dd_cb_C8
opcodeaddr_dd_cb(201)=*opcode_dd_cb_C9
opcodeaddr_dd_cb(202)=*opcode_dd_cb_CA
opcodeaddr_dd_cb(203)=*opcode_dd_cb_CB
opcodeaddr_dd_cb(204)=*opcode_dd_cb_CC
opcodeaddr_dd_cb(205)=*opcode_dd_cb_CD
opcodeaddr_dd_cb(206)=*opcode_dd_cb_CE
opcodeaddr_dd_cb(207)=*opcode_dd_cb_CF
opcodeaddr_dd_cb(208)=*opcode_dd_cb_D0
opcodeaddr_dd_cb(209)=*opcode_dd_cb_D1
opcodeaddr_dd_cb(210)=*opcode_dd_cb_D2
opcodeaddr_dd_cb(211)=*opcode_dd_cb_D3
opcodeaddr_dd_cb(212)=*opcode_dd_cb_D4
opcodeaddr_dd_cb(213)=*opcode_dd_cb_D5
opcodeaddr_dd_cb(214)=*opcode_dd_cb_D6
opcodeaddr_dd_cb(215)=*opcode_dd_cb_D7
opcodeaddr_dd_cb(216)=*opcode_dd_cb_D8
opcodeaddr_dd_cb(217)=*opcode_dd_cb_D9
opcodeaddr_dd_cb(218)=*opcode_dd_cb_DA
opcodeaddr_dd_cb(219)=*opcode_dd_cb_DB
opcodeaddr_dd_cb(220)=*opcode_dd_cb_DC
opcodeaddr_dd_cb(221)=*opcode_dd_cb_DD
opcodeaddr_dd_cb(222)=*opcode_dd_cb_DE
opcodeaddr_dd_cb(223)=*opcode_dd_cb_DF
opcodeaddr_dd_cb(224)=*opcode_dd_cb_E0
opcodeaddr_dd_cb(225)=*opcode_dd_cb_E1
opcodeaddr_dd_cb(226)=*opcode_dd_cb_E2
opcodeaddr_dd_cb(227)=*opcode_dd_cb_E3
opcodeaddr_dd_cb(228)=*opcode_dd_cb_E4
opcodeaddr_dd_cb(229)=*opcode_dd_cb_E5
opcodeaddr_dd_cb(230)=*opcode_dd_cb_E6
opcodeaddr_dd_cb(231)=*opcode_dd_cb_E7
opcodeaddr_dd_cb(232)=*opcode_dd_cb_E8
opcodeaddr_dd_cb(233)=*opcode_dd_cb_E9
opcodeaddr_dd_cb(234)=*opcode_dd_cb_EA
opcodeaddr_dd_cb(235)=*opcode_dd_cb_EB
opcodeaddr_dd_cb(236)=*opcode_dd_cb_EC
opcodeaddr_dd_cb(237)=*opcode_dd_cb_ED
opcodeaddr_dd_cb(238)=*opcode_dd_cb_EE
opcodeaddr_dd_cb(239)=*opcode_dd_cb_EF
opcodeaddr_dd_cb(240)=*opcode_dd_cb_F0
opcodeaddr_dd_cb(241)=*opcode_dd_cb_F1
opcodeaddr_dd_cb(242)=*opcode_dd_cb_F2
opcodeaddr_dd_cb(243)=*opcode_dd_cb_F3
opcodeaddr_dd_cb(244)=*opcode_dd_cb_F4
opcodeaddr_dd_cb(245)=*opcode_dd_cb_F5
opcodeaddr_dd_cb(246)=*opcode_dd_cb_F6
opcodeaddr_dd_cb(247)=*opcode_dd_cb_F7
opcodeaddr_dd_cb(248)=*opcode_dd_cb_F8
opcodeaddr_dd_cb(249)=*opcode_dd_cb_F9
opcodeaddr_dd_cb(250)=*opcode_dd_cb_FA
opcodeaddr_dd_cb(251)=*opcode_dd_cb_FB
opcodeaddr_dd_cb(252)=*opcode_dd_cb_FC
opcodeaddr_dd_cb(253)=*opcode_dd_cb_FD
opcodeaddr_dd_cb(254)=*opcode_dd_cb_FE
opcodeaddr_dd_cb(255)=*opcode_dd_cb_FF

opcodeaddr_ed(0)=*opcode_ed_00
opcodeaddr_ed(1)=*opcode_ed_01
opcodeaddr_ed(2)=*opcode_ed_02
opcodeaddr_ed(3)=*opcode_ed_03
opcodeaddr_ed(4)=*opcode_ed_04
opcodeaddr_ed(5)=*opcode_ed_05
opcodeaddr_ed(6)=*opcode_ed_06
opcodeaddr_ed(7)=*opcode_ed_07
opcodeaddr_ed(8)=*opcode_ed_08
opcodeaddr_ed(9)=*opcode_ed_09
opcodeaddr_ed(10)=*opcode_ed_0A
opcodeaddr_ed(11)=*opcode_ed_0B
opcodeaddr_ed(12)=*opcode_ed_0C
opcodeaddr_ed(13)=*opcode_ed_0D
opcodeaddr_ed(14)=*opcode_ed_0E
opcodeaddr_ed(15)=*opcode_ed_0F
opcodeaddr_ed(16)=*opcode_ed_10
opcodeaddr_ed(17)=*opcode_ed_11
opcodeaddr_ed(18)=*opcode_ed_12
opcodeaddr_ed(19)=*opcode_ed_13
opcodeaddr_ed(20)=*opcode_ed_14
opcodeaddr_ed(21)=*opcode_ed_15
opcodeaddr_ed(22)=*opcode_ed_16
opcodeaddr_ed(23)=*opcode_ed_17
opcodeaddr_ed(24)=*opcode_ed_18
opcodeaddr_ed(25)=*opcode_ed_19
opcodeaddr_ed(26)=*opcode_ed_1A
opcodeaddr_ed(27)=*opcode_ed_1B
opcodeaddr_ed(28)=*opcode_ed_1C
opcodeaddr_ed(29)=*opcode_ed_1D
opcodeaddr_ed(30)=*opcode_ed_1E
opcodeaddr_ed(31)=*opcode_ed_1F
opcodeaddr_ed(32)=*opcode_ed_20
opcodeaddr_ed(33)=*opcode_ed_21
opcodeaddr_ed(34)=*opcode_ed_22
opcodeaddr_ed(35)=*opcode_ed_23
opcodeaddr_ed(36)=*opcode_ed_24
opcodeaddr_ed(37)=*opcode_ed_25
opcodeaddr_ed(38)=*opcode_ed_26
opcodeaddr_ed(39)=*opcode_ed_27
opcodeaddr_ed(40)=*opcode_ed_28
opcodeaddr_ed(41)=*opcode_ed_29
opcodeaddr_ed(42)=*opcode_ed_2A
opcodeaddr_ed(43)=*opcode_ed_2B
opcodeaddr_ed(44)=*opcode_ed_2C
opcodeaddr_ed(45)=*opcode_ed_2D
opcodeaddr_ed(46)=*opcode_ed_2E
opcodeaddr_ed(47)=*opcode_ed_2F
opcodeaddr_ed(48)=*opcode_ed_30
opcodeaddr_ed(49)=*opcode_ed_31
opcodeaddr_ed(50)=*opcode_ed_32
opcodeaddr_ed(51)=*opcode_ed_33
opcodeaddr_ed(52)=*opcode_ed_34
opcodeaddr_ed(53)=*opcode_ed_35
opcodeaddr_ed(54)=*opcode_ed_36
opcodeaddr_ed(55)=*opcode_ed_37
opcodeaddr_ed(56)=*opcode_ed_38
opcodeaddr_ed(57)=*opcode_ed_39
opcodeaddr_ed(58)=*opcode_ed_3A
opcodeaddr_ed(59)=*opcode_ed_3B
opcodeaddr_ed(60)=*opcode_ed_3C
opcodeaddr_ed(61)=*opcode_ed_3D
opcodeaddr_ed(62)=*opcode_ed_3E
opcodeaddr_ed(63)=*opcode_ed_3F
opcodeaddr_ed(64)=*opcode_ed_40
opcodeaddr_ed(65)=*opcode_ed_41
opcodeaddr_ed(66)=*opcode_ed_42
opcodeaddr_ed(67)=*opcode_ed_43
opcodeaddr_ed(68)=*opcode_ed_44
opcodeaddr_ed(69)=*opcode_ed_45
opcodeaddr_ed(70)=*opcode_ed_46
opcodeaddr_ed(71)=*opcode_ed_47
opcodeaddr_ed(72)=*opcode_ed_48
opcodeaddr_ed(73)=*opcode_ed_49
opcodeaddr_ed(74)=*opcode_ed_4A
opcodeaddr_ed(75)=*opcode_ed_4B
opcodeaddr_ed(76)=*opcode_ed_4C
opcodeaddr_ed(77)=*opcode_ed_4D
opcodeaddr_ed(78)=*opcode_ed_4E
opcodeaddr_ed(79)=*opcode_ed_4F
opcodeaddr_ed(80)=*opcode_ed_50
opcodeaddr_ed(81)=*opcode_ed_51
opcodeaddr_ed(82)=*opcode_ed_52
opcodeaddr_ed(83)=*opcode_ed_53
opcodeaddr_ed(84)=*opcode_ed_54
opcodeaddr_ed(85)=*opcode_ed_55
opcodeaddr_ed(86)=*opcode_ed_56
opcodeaddr_ed(87)=*opcode_ed_57
opcodeaddr_ed(88)=*opcode_ed_58
opcodeaddr_ed(89)=*opcode_ed_59
opcodeaddr_ed(90)=*opcode_ed_5A
opcodeaddr_ed(91)=*opcode_ed_5B
opcodeaddr_ed(92)=*opcode_ed_5C
opcodeaddr_ed(93)=*opcode_ed_5D
opcodeaddr_ed(94)=*opcode_ed_5E
opcodeaddr_ed(95)=*opcode_ed_5F
opcodeaddr_ed(96)=*opcode_ed_60
opcodeaddr_ed(97)=*opcode_ed_61
opcodeaddr_ed(98)=*opcode_ed_62
opcodeaddr_ed(99)=*opcode_ed_63
opcodeaddr_ed(100)=*opcode_ed_64
opcodeaddr_ed(101)=*opcode_ed_65
opcodeaddr_ed(102)=*opcode_ed_66
opcodeaddr_ed(103)=*opcode_ed_67
opcodeaddr_ed(104)=*opcode_ed_68
opcodeaddr_ed(105)=*opcode_ed_69
opcodeaddr_ed(106)=*opcode_ed_6A
opcodeaddr_ed(107)=*opcode_ed_6B
opcodeaddr_ed(108)=*opcode_ed_6C
opcodeaddr_ed(109)=*opcode_ed_6D
opcodeaddr_ed(110)=*opcode_ed_6E
opcodeaddr_ed(111)=*opcode_ed_6F
opcodeaddr_ed(112)=*opcode_ed_70
opcodeaddr_ed(113)=*opcode_ed_71
opcodeaddr_ed(114)=*opcode_ed_72
opcodeaddr_ed(115)=*opcode_ed_73
opcodeaddr_ed(116)=*opcode_ed_74
opcodeaddr_ed(117)=*opcode_ed_75
opcodeaddr_ed(118)=*opcode_ed_76
opcodeaddr_ed(119)=*opcode_ed_77
opcodeaddr_ed(120)=*opcode_ed_78
opcodeaddr_ed(121)=*opcode_ed_79
opcodeaddr_ed(122)=*opcode_ed_7A
opcodeaddr_ed(123)=*opcode_ed_7B
opcodeaddr_ed(124)=*opcode_ed_7C
opcodeaddr_ed(125)=*opcode_ed_7D
opcodeaddr_ed(126)=*opcode_ed_7E
opcodeaddr_ed(127)=*opcode_ed_7F
opcodeaddr_ed(128)=*opcode_ed_80
opcodeaddr_ed(129)=*opcode_ed_81
opcodeaddr_ed(130)=*opcode_ed_82
opcodeaddr_ed(131)=*opcode_ed_83
opcodeaddr_ed(132)=*opcode_ed_84
opcodeaddr_ed(133)=*opcode_ed_85
opcodeaddr_ed(134)=*opcode_ed_86
opcodeaddr_ed(135)=*opcode_ed_87
opcodeaddr_ed(136)=*opcode_ed_88
opcodeaddr_ed(137)=*opcode_ed_89
opcodeaddr_ed(138)=*opcode_ed_8A
opcodeaddr_ed(139)=*opcode_ed_8B
opcodeaddr_ed(140)=*opcode_ed_8C
opcodeaddr_ed(141)=*opcode_ed_8D
opcodeaddr_ed(142)=*opcode_ed_8E
opcodeaddr_ed(143)=*opcode_ed_8F
opcodeaddr_ed(144)=*opcode_ed_90
opcodeaddr_ed(145)=*opcode_ed_91
opcodeaddr_ed(146)=*opcode_ed_92
opcodeaddr_ed(147)=*opcode_ed_93
opcodeaddr_ed(148)=*opcode_ed_94
opcodeaddr_ed(149)=*opcode_ed_95
opcodeaddr_ed(150)=*opcode_ed_96
opcodeaddr_ed(151)=*opcode_ed_97
opcodeaddr_ed(152)=*opcode_ed_98
opcodeaddr_ed(153)=*opcode_ed_99
opcodeaddr_ed(154)=*opcode_ed_9A
opcodeaddr_ed(155)=*opcode_ed_9B
opcodeaddr_ed(156)=*opcode_ed_9C
opcodeaddr_ed(157)=*opcode_ed_9D
opcodeaddr_ed(158)=*opcode_ed_9E
opcodeaddr_ed(159)=*opcode_ed_9F
opcodeaddr_ed(160)=*opcode_ed_A0
opcodeaddr_ed(161)=*opcode_ed_A1
opcodeaddr_ed(162)=*opcode_ed_A2
opcodeaddr_ed(163)=*opcode_ed_A3
opcodeaddr_ed(164)=*opcode_ed_A4
opcodeaddr_ed(165)=*opcode_ed_A5
opcodeaddr_ed(166)=*opcode_ed_A6
opcodeaddr_ed(167)=*opcode_ed_A7
opcodeaddr_ed(168)=*opcode_ed_A8
opcodeaddr_ed(169)=*opcode_ed_A9
opcodeaddr_ed(170)=*opcode_ed_AA
opcodeaddr_ed(171)=*opcode_ed_AB
opcodeaddr_ed(172)=*opcode_ed_AC
opcodeaddr_ed(173)=*opcode_ed_AD
opcodeaddr_ed(174)=*opcode_ed_AE
opcodeaddr_ed(175)=*opcode_ed_AF
opcodeaddr_ed(176)=*opcode_ed_B0
opcodeaddr_ed(177)=*opcode_ed_B1
opcodeaddr_ed(178)=*opcode_ed_B2
opcodeaddr_ed(179)=*opcode_ed_B3
opcodeaddr_ed(180)=*opcode_ed_B4
opcodeaddr_ed(181)=*opcode_ed_B5
opcodeaddr_ed(182)=*opcode_ed_B6
opcodeaddr_ed(183)=*opcode_ed_B7
opcodeaddr_ed(184)=*opcode_ed_B8
opcodeaddr_ed(185)=*opcode_ed_B9
opcodeaddr_ed(186)=*opcode_ed_BA
opcodeaddr_ed(187)=*opcode_ed_BB
opcodeaddr_ed(188)=*opcode_ed_BC
opcodeaddr_ed(189)=*opcode_ed_BD
opcodeaddr_ed(190)=*opcode_ed_BE
opcodeaddr_ed(191)=*opcode_ed_BF
opcodeaddr_ed(192)=*opcode_ed_C0
opcodeaddr_ed(193)=*opcode_ed_C1
opcodeaddr_ed(194)=*opcode_ed_C2
opcodeaddr_ed(195)=*opcode_ed_C3
opcodeaddr_ed(196)=*opcode_ed_C4
opcodeaddr_ed(197)=*opcode_ed_C5
opcodeaddr_ed(198)=*opcode_ed_C6
opcodeaddr_ed(199)=*opcode_ed_C7
opcodeaddr_ed(200)=*opcode_ed_C8
opcodeaddr_ed(201)=*opcode_ed_C9
opcodeaddr_ed(202)=*opcode_ed_CA
opcodeaddr_ed(203)=*opcode_ed_CB
opcodeaddr_ed(204)=*opcode_ed_CC
opcodeaddr_ed(205)=*opcode_ed_CD
opcodeaddr_ed(206)=*opcode_ed_CE
opcodeaddr_ed(207)=*opcode_ed_CF
opcodeaddr_ed(208)=*opcode_ed_D0
opcodeaddr_ed(209)=*opcode_ed_D1
opcodeaddr_ed(210)=*opcode_ed_D2
opcodeaddr_ed(211)=*opcode_ed_D3
opcodeaddr_ed(212)=*opcode_ed_D4
opcodeaddr_ed(213)=*opcode_ed_D5
opcodeaddr_ed(214)=*opcode_ed_D6
opcodeaddr_ed(215)=*opcode_ed_D7
opcodeaddr_ed(216)=*opcode_ed_D8
opcodeaddr_ed(217)=*opcode_ed_D9
opcodeaddr_ed(218)=*opcode_ed_DA
opcodeaddr_ed(219)=*opcode_ed_DB
opcodeaddr_ed(220)=*opcode_ed_DC
opcodeaddr_ed(221)=*opcode_ed_DD
opcodeaddr_ed(222)=*opcode_ed_DE
opcodeaddr_ed(223)=*opcode_ed_DF
opcodeaddr_ed(224)=*opcode_ed_E0
opcodeaddr_ed(225)=*opcode_ed_E1
opcodeaddr_ed(226)=*opcode_ed_E2
opcodeaddr_ed(227)=*opcode_ed_E3
opcodeaddr_ed(228)=*opcode_ed_E4
opcodeaddr_ed(229)=*opcode_ed_E5
opcodeaddr_ed(230)=*opcode_ed_E6
opcodeaddr_ed(231)=*opcode_ed_E7
opcodeaddr_ed(232)=*opcode_ed_E8
opcodeaddr_ed(233)=*opcode_ed_E9
opcodeaddr_ed(234)=*opcode_ed_EA
opcodeaddr_ed(235)=*opcode_ed_EB
opcodeaddr_ed(236)=*opcode_ed_EC
opcodeaddr_ed(237)=*opcode_ed_ED
opcodeaddr_ed(238)=*opcode_ed_EE
opcodeaddr_ed(239)=*opcode_ed_EF
opcodeaddr_ed(240)=*opcode_ed_F0
opcodeaddr_ed(241)=*opcode_ed_F1
opcodeaddr_ed(242)=*opcode_ed_F2
opcodeaddr_ed(243)=*opcode_ed_F3
opcodeaddr_ed(244)=*opcode_ed_F4
opcodeaddr_ed(245)=*opcode_ed_F5
opcodeaddr_ed(246)=*opcode_ed_F6
opcodeaddr_ed(247)=*opcode_ed_F7
opcodeaddr_ed(248)=*opcode_ed_F8
opcodeaddr_ed(249)=*opcode_ed_F9
opcodeaddr_ed(250)=*opcode_ed_FA
opcodeaddr_ed(251)=*opcode_ed_FB
opcodeaddr_ed(252)=*opcode_ed_FC
opcodeaddr_ed(253)=*opcode_ed_FD
opcodeaddr_ed(254)=*opcode_ed_FE
opcodeaddr_ed(255)=*opcode_ed_FF

opcodeaddr_fd(0)=*opcode_fd_00
opcodeaddr_fd(1)=*opcode_fd_01
opcodeaddr_fd(2)=*opcode_fd_02
opcodeaddr_fd(3)=*opcode_fd_03
opcodeaddr_fd(4)=*opcode_fd_04
opcodeaddr_fd(5)=*opcode_fd_05
opcodeaddr_fd(6)=*opcode_fd_06
opcodeaddr_fd(7)=*opcode_fd_07
opcodeaddr_fd(8)=*opcode_fd_08
opcodeaddr_fd(9)=*opcode_fd_09
opcodeaddr_fd(10)=*opcode_fd_0A
opcodeaddr_fd(11)=*opcode_fd_0B
opcodeaddr_fd(12)=*opcode_fd_0C
opcodeaddr_fd(13)=*opcode_fd_0D
opcodeaddr_fd(14)=*opcode_fd_0E
opcodeaddr_fd(15)=*opcode_fd_0F
opcodeaddr_fd(16)=*opcode_fd_10
opcodeaddr_fd(17)=*opcode_fd_11
opcodeaddr_fd(18)=*opcode_fd_12
opcodeaddr_fd(19)=*opcode_fd_13
opcodeaddr_fd(20)=*opcode_fd_14
opcodeaddr_fd(21)=*opcode_fd_15
opcodeaddr_fd(22)=*opcode_fd_16
opcodeaddr_fd(23)=*opcode_fd_17
opcodeaddr_fd(24)=*opcode_fd_18
opcodeaddr_fd(25)=*opcode_fd_19
opcodeaddr_fd(26)=*opcode_fd_1A
opcodeaddr_fd(27)=*opcode_fd_1B
opcodeaddr_fd(28)=*opcode_fd_1C
opcodeaddr_fd(29)=*opcode_fd_1D
opcodeaddr_fd(30)=*opcode_fd_1E
opcodeaddr_fd(31)=*opcode_fd_1F
opcodeaddr_fd(32)=*opcode_fd_20
opcodeaddr_fd(33)=*opcode_fd_21
opcodeaddr_fd(34)=*opcode_fd_22
opcodeaddr_fd(35)=*opcode_fd_23
opcodeaddr_fd(36)=*opcode_fd_24
opcodeaddr_fd(37)=*opcode_fd_25
opcodeaddr_fd(38)=*opcode_fd_26
opcodeaddr_fd(39)=*opcode_fd_27
opcodeaddr_fd(40)=*opcode_fd_28
opcodeaddr_fd(41)=*opcode_fd_29
opcodeaddr_fd(42)=*opcode_fd_2A
opcodeaddr_fd(43)=*opcode_fd_2B
opcodeaddr_fd(44)=*opcode_fd_2C
opcodeaddr_fd(45)=*opcode_fd_2D
opcodeaddr_fd(46)=*opcode_fd_2E
opcodeaddr_fd(47)=*opcode_fd_2F
opcodeaddr_fd(48)=*opcode_fd_30
opcodeaddr_fd(49)=*opcode_fd_31
opcodeaddr_fd(50)=*opcode_fd_32
opcodeaddr_fd(51)=*opcode_fd_33
opcodeaddr_fd(52)=*opcode_fd_34
opcodeaddr_fd(53)=*opcode_fd_35
opcodeaddr_fd(54)=*opcode_fd_36
opcodeaddr_fd(55)=*opcode_fd_37
opcodeaddr_fd(56)=*opcode_fd_38
opcodeaddr_fd(57)=*opcode_fd_39
opcodeaddr_fd(58)=*opcode_fd_3A
opcodeaddr_fd(59)=*opcode_fd_3B
opcodeaddr_fd(60)=*opcode_fd_3C
opcodeaddr_fd(61)=*opcode_fd_3D
opcodeaddr_fd(62)=*opcode_fd_3E
opcodeaddr_fd(63)=*opcode_fd_3F
opcodeaddr_fd(64)=*opcode_fd_40
opcodeaddr_fd(65)=*opcode_fd_41
opcodeaddr_fd(66)=*opcode_fd_42
opcodeaddr_fd(67)=*opcode_fd_43
opcodeaddr_fd(68)=*opcode_fd_44
opcodeaddr_fd(69)=*opcode_fd_45
opcodeaddr_fd(70)=*opcode_fd_46
opcodeaddr_fd(71)=*opcode_fd_47
opcodeaddr_fd(72)=*opcode_fd_48
opcodeaddr_fd(73)=*opcode_fd_49
opcodeaddr_fd(74)=*opcode_fd_4A
opcodeaddr_fd(75)=*opcode_fd_4B
opcodeaddr_fd(76)=*opcode_fd_4C
opcodeaddr_fd(77)=*opcode_fd_4D
opcodeaddr_fd(78)=*opcode_fd_4E
opcodeaddr_fd(79)=*opcode_fd_4F
opcodeaddr_fd(80)=*opcode_fd_50
opcodeaddr_fd(81)=*opcode_fd_51
opcodeaddr_fd(82)=*opcode_fd_52
opcodeaddr_fd(83)=*opcode_fd_53
opcodeaddr_fd(84)=*opcode_fd_54
opcodeaddr_fd(85)=*opcode_fd_55
opcodeaddr_fd(86)=*opcode_fd_56
opcodeaddr_fd(87)=*opcode_fd_57
opcodeaddr_fd(88)=*opcode_fd_58
opcodeaddr_fd(89)=*opcode_fd_59
opcodeaddr_fd(90)=*opcode_fd_5A
opcodeaddr_fd(91)=*opcode_fd_5B
opcodeaddr_fd(92)=*opcode_fd_5C
opcodeaddr_fd(93)=*opcode_fd_5D
opcodeaddr_fd(94)=*opcode_fd_5E
opcodeaddr_fd(95)=*opcode_fd_5F
opcodeaddr_fd(96)=*opcode_fd_60
opcodeaddr_fd(97)=*opcode_fd_61
opcodeaddr_fd(98)=*opcode_fd_62
opcodeaddr_fd(99)=*opcode_fd_63
opcodeaddr_fd(100)=*opcode_fd_64
opcodeaddr_fd(101)=*opcode_fd_65
opcodeaddr_fd(102)=*opcode_fd_66
opcodeaddr_fd(103)=*opcode_fd_67
opcodeaddr_fd(104)=*opcode_fd_68
opcodeaddr_fd(105)=*opcode_fd_69
opcodeaddr_fd(106)=*opcode_fd_6A
opcodeaddr_fd(107)=*opcode_fd_6B
opcodeaddr_fd(108)=*opcode_fd_6C
opcodeaddr_fd(109)=*opcode_fd_6D
opcodeaddr_fd(110)=*opcode_fd_6E
opcodeaddr_fd(111)=*opcode_fd_6F
opcodeaddr_fd(112)=*opcode_fd_70
opcodeaddr_fd(113)=*opcode_fd_71
opcodeaddr_fd(114)=*opcode_fd_72
opcodeaddr_fd(115)=*opcode_fd_73
opcodeaddr_fd(116)=*opcode_fd_74
opcodeaddr_fd(117)=*opcode_fd_75
opcodeaddr_fd(118)=*opcode_fd_76
opcodeaddr_fd(119)=*opcode_fd_77
opcodeaddr_fd(120)=*opcode_fd_78
opcodeaddr_fd(121)=*opcode_fd_79
opcodeaddr_fd(122)=*opcode_fd_7A
opcodeaddr_fd(123)=*opcode_fd_7B
opcodeaddr_fd(124)=*opcode_fd_7C
opcodeaddr_fd(125)=*opcode_fd_7D
opcodeaddr_fd(126)=*opcode_fd_7E
opcodeaddr_fd(127)=*opcode_fd_7F
opcodeaddr_fd(128)=*opcode_fd_80
opcodeaddr_fd(129)=*opcode_fd_81
opcodeaddr_fd(130)=*opcode_fd_82
opcodeaddr_fd(131)=*opcode_fd_83
opcodeaddr_fd(132)=*opcode_fd_84
opcodeaddr_fd(133)=*opcode_fd_85
opcodeaddr_fd(134)=*opcode_fd_86
opcodeaddr_fd(135)=*opcode_fd_87
opcodeaddr_fd(136)=*opcode_fd_88
opcodeaddr_fd(137)=*opcode_fd_89
opcodeaddr_fd(138)=*opcode_fd_8A
opcodeaddr_fd(139)=*opcode_fd_8B
opcodeaddr_fd(140)=*opcode_fd_8C
opcodeaddr_fd(141)=*opcode_fd_8D
opcodeaddr_fd(142)=*opcode_fd_8E
opcodeaddr_fd(143)=*opcode_fd_8F
opcodeaddr_fd(144)=*opcode_fd_90
opcodeaddr_fd(145)=*opcode_fd_91
opcodeaddr_fd(146)=*opcode_fd_92
opcodeaddr_fd(147)=*opcode_fd_93
opcodeaddr_fd(148)=*opcode_fd_94
opcodeaddr_fd(149)=*opcode_fd_95
opcodeaddr_fd(150)=*opcode_fd_96
opcodeaddr_fd(151)=*opcode_fd_97
opcodeaddr_fd(152)=*opcode_fd_98
opcodeaddr_fd(153)=*opcode_fd_99
opcodeaddr_fd(154)=*opcode_fd_9A
opcodeaddr_fd(155)=*opcode_fd_9B
opcodeaddr_fd(156)=*opcode_fd_9C
opcodeaddr_fd(157)=*opcode_fd_9D
opcodeaddr_fd(158)=*opcode_fd_9E
opcodeaddr_fd(159)=*opcode_fd_9F
opcodeaddr_fd(160)=*opcode_fd_A0
opcodeaddr_fd(161)=*opcode_fd_A1
opcodeaddr_fd(162)=*opcode_fd_A2
opcodeaddr_fd(163)=*opcode_fd_A3
opcodeaddr_fd(164)=*opcode_fd_A4
opcodeaddr_fd(165)=*opcode_fd_A5
opcodeaddr_fd(166)=*opcode_fd_A6
opcodeaddr_fd(167)=*opcode_fd_A7
opcodeaddr_fd(168)=*opcode_fd_A8
opcodeaddr_fd(169)=*opcode_fd_A9
opcodeaddr_fd(170)=*opcode_fd_AA
opcodeaddr_fd(171)=*opcode_fd_AB
opcodeaddr_fd(172)=*opcode_fd_AC
opcodeaddr_fd(173)=*opcode_fd_AD
opcodeaddr_fd(174)=*opcode_fd_AE
opcodeaddr_fd(175)=*opcode_fd_AF
opcodeaddr_fd(176)=*opcode_fd_B0
opcodeaddr_fd(177)=*opcode_fd_B1
opcodeaddr_fd(178)=*opcode_fd_B2
opcodeaddr_fd(179)=*opcode_fd_B3
opcodeaddr_fd(180)=*opcode_fd_B4
opcodeaddr_fd(181)=*opcode_fd_B5
opcodeaddr_fd(182)=*opcode_fd_B6
opcodeaddr_fd(183)=*opcode_fd_B7
opcodeaddr_fd(184)=*opcode_fd_B8
opcodeaddr_fd(185)=*opcode_fd_B9
opcodeaddr_fd(186)=*opcode_fd_BA
opcodeaddr_fd(187)=*opcode_fd_BB
opcodeaddr_fd(188)=*opcode_fd_BC
opcodeaddr_fd(189)=*opcode_fd_BD
opcodeaddr_fd(190)=*opcode_fd_BE
opcodeaddr_fd(191)=*opcode_fd_BF
opcodeaddr_fd(192)=*opcode_fd_C0
opcodeaddr_fd(193)=*opcode_fd_C1
opcodeaddr_fd(194)=*opcode_fd_C2
opcodeaddr_fd(195)=*opcode_fd_C3
opcodeaddr_fd(196)=*opcode_fd_C4
opcodeaddr_fd(197)=*opcode_fd_C5
opcodeaddr_fd(198)=*opcode_fd_C6
opcodeaddr_fd(199)=*opcode_fd_C7
opcodeaddr_fd(200)=*opcode_fd_C8
opcodeaddr_fd(201)=*opcode_fd_C9
opcodeaddr_fd(202)=*opcode_fd_CA
opcodeaddr_fd(203)=*opcode_fd_CB
opcodeaddr_fd(204)=*opcode_fd_CC
opcodeaddr_fd(205)=*opcode_fd_CD
opcodeaddr_fd(206)=*opcode_fd_CE
opcodeaddr_fd(207)=*opcode_fd_CF
opcodeaddr_fd(208)=*opcode_fd_D0
opcodeaddr_fd(209)=*opcode_fd_D1
opcodeaddr_fd(210)=*opcode_fd_D2
opcodeaddr_fd(211)=*opcode_fd_D3
opcodeaddr_fd(212)=*opcode_fd_D4
opcodeaddr_fd(213)=*opcode_fd_D5
opcodeaddr_fd(214)=*opcode_fd_D6
opcodeaddr_fd(215)=*opcode_fd_D7
opcodeaddr_fd(216)=*opcode_fd_D8
opcodeaddr_fd(217)=*opcode_fd_D9
opcodeaddr_fd(218)=*opcode_fd_DA
opcodeaddr_fd(219)=*opcode_fd_DB
opcodeaddr_fd(220)=*opcode_fd_DC
opcodeaddr_fd(221)=*opcode_fd_DD
opcodeaddr_fd(222)=*opcode_fd_DE
opcodeaddr_fd(223)=*opcode_fd_DF
opcodeaddr_fd(224)=*opcode_fd_E0
opcodeaddr_fd(225)=*opcode_fd_E1
opcodeaddr_fd(226)=*opcode_fd_E2
opcodeaddr_fd(227)=*opcode_fd_E3
opcodeaddr_fd(228)=*opcode_fd_E4
opcodeaddr_fd(229)=*opcode_fd_E5
opcodeaddr_fd(230)=*opcode_fd_E6
opcodeaddr_fd(231)=*opcode_fd_E7
opcodeaddr_fd(232)=*opcode_fd_E8
opcodeaddr_fd(233)=*opcode_fd_E9
opcodeaddr_fd(234)=*opcode_fd_EA
opcodeaddr_fd(235)=*opcode_fd_EB
opcodeaddr_fd(236)=*opcode_fd_EC
opcodeaddr_fd(237)=*opcode_fd_ED
opcodeaddr_fd(238)=*opcode_fd_EE
opcodeaddr_fd(239)=*opcode_fd_EF
opcodeaddr_fd(240)=*opcode_fd_F0
opcodeaddr_fd(241)=*opcode_fd_F1
opcodeaddr_fd(242)=*opcode_fd_F2
opcodeaddr_fd(243)=*opcode_fd_F3
opcodeaddr_fd(244)=*opcode_fd_F4
opcodeaddr_fd(245)=*opcode_fd_F5
opcodeaddr_fd(246)=*opcode_fd_F6
opcodeaddr_fd(247)=*opcode_fd_F7
opcodeaddr_fd(248)=*opcode_fd_F8
opcodeaddr_fd(249)=*opcode_fd_F9
opcodeaddr_fd(250)=*opcode_fd_FA
opcodeaddr_fd(251)=*opcode_fd_FB
opcodeaddr_fd(252)=*opcode_fd_FC
opcodeaddr_fd(253)=*opcode_fd_FD
opcodeaddr_fd(254)=*opcode_fd_FE
opcodeaddr_fd(255)=*opcode_fd_FF

opcodeaddr_fd_cb(0)=*opcode_fd_cb_00
opcodeaddr_fd_cb(1)=*opcode_fd_cb_01
opcodeaddr_fd_cb(2)=*opcode_fd_cb_02
opcodeaddr_fd_cb(3)=*opcode_fd_cb_03
opcodeaddr_fd_cb(4)=*opcode_fd_cb_04
opcodeaddr_fd_cb(5)=*opcode_fd_cb_05
opcodeaddr_fd_cb(6)=*opcode_fd_cb_06
opcodeaddr_fd_cb(7)=*opcode_fd_cb_07
opcodeaddr_fd_cb(8)=*opcode_fd_cb_08
opcodeaddr_fd_cb(9)=*opcode_fd_cb_09
opcodeaddr_fd_cb(10)=*opcode_fd_cb_0A
opcodeaddr_fd_cb(11)=*opcode_fd_cb_0B
opcodeaddr_fd_cb(12)=*opcode_fd_cb_0C
opcodeaddr_fd_cb(13)=*opcode_fd_cb_0D
opcodeaddr_fd_cb(14)=*opcode_fd_cb_0E
opcodeaddr_fd_cb(15)=*opcode_fd_cb_0F
opcodeaddr_fd_cb(16)=*opcode_fd_cb_10
opcodeaddr_fd_cb(17)=*opcode_fd_cb_11
opcodeaddr_fd_cb(18)=*opcode_fd_cb_12
opcodeaddr_fd_cb(19)=*opcode_fd_cb_13
opcodeaddr_fd_cb(20)=*opcode_fd_cb_14
opcodeaddr_fd_cb(21)=*opcode_fd_cb_15
opcodeaddr_fd_cb(22)=*opcode_fd_cb_16
opcodeaddr_fd_cb(23)=*opcode_fd_cb_17
opcodeaddr_fd_cb(24)=*opcode_fd_cb_18
opcodeaddr_fd_cb(25)=*opcode_fd_cb_19
opcodeaddr_fd_cb(26)=*opcode_fd_cb_1A
opcodeaddr_fd_cb(27)=*opcode_fd_cb_1B
opcodeaddr_fd_cb(28)=*opcode_fd_cb_1C
opcodeaddr_fd_cb(29)=*opcode_fd_cb_1D
opcodeaddr_fd_cb(30)=*opcode_fd_cb_1E
opcodeaddr_fd_cb(31)=*opcode_fd_cb_1F
opcodeaddr_fd_cb(32)=*opcode_fd_cb_20
opcodeaddr_fd_cb(33)=*opcode_fd_cb_21
opcodeaddr_fd_cb(34)=*opcode_fd_cb_22
opcodeaddr_fd_cb(35)=*opcode_fd_cb_23
opcodeaddr_fd_cb(36)=*opcode_fd_cb_24
opcodeaddr_fd_cb(37)=*opcode_fd_cb_25
opcodeaddr_fd_cb(38)=*opcode_fd_cb_26
opcodeaddr_fd_cb(39)=*opcode_fd_cb_27
opcodeaddr_fd_cb(40)=*opcode_fd_cb_28
opcodeaddr_fd_cb(41)=*opcode_fd_cb_29
opcodeaddr_fd_cb(42)=*opcode_fd_cb_2A
opcodeaddr_fd_cb(43)=*opcode_fd_cb_2B
opcodeaddr_fd_cb(44)=*opcode_fd_cb_2C
opcodeaddr_fd_cb(45)=*opcode_fd_cb_2D
opcodeaddr_fd_cb(46)=*opcode_fd_cb_2E
opcodeaddr_fd_cb(47)=*opcode_fd_cb_2F
opcodeaddr_fd_cb(48)=*opcode_fd_cb_30
opcodeaddr_fd_cb(49)=*opcode_fd_cb_31
opcodeaddr_fd_cb(50)=*opcode_fd_cb_32
opcodeaddr_fd_cb(51)=*opcode_fd_cb_33
opcodeaddr_fd_cb(52)=*opcode_fd_cb_34
opcodeaddr_fd_cb(53)=*opcode_fd_cb_35
opcodeaddr_fd_cb(54)=*opcode_fd_cb_36
opcodeaddr_fd_cb(55)=*opcode_fd_cb_37
opcodeaddr_fd_cb(56)=*opcode_fd_cb_38
opcodeaddr_fd_cb(57)=*opcode_fd_cb_39
opcodeaddr_fd_cb(58)=*opcode_fd_cb_3A
opcodeaddr_fd_cb(59)=*opcode_fd_cb_3B
opcodeaddr_fd_cb(60)=*opcode_fd_cb_3C
opcodeaddr_fd_cb(61)=*opcode_fd_cb_3D
opcodeaddr_fd_cb(62)=*opcode_fd_cb_3E
opcodeaddr_fd_cb(63)=*opcode_fd_cb_3F
opcodeaddr_fd_cb(64)=*opcode_fd_cb_40
opcodeaddr_fd_cb(65)=*opcode_fd_cb_41
opcodeaddr_fd_cb(66)=*opcode_fd_cb_42
opcodeaddr_fd_cb(67)=*opcode_fd_cb_43
opcodeaddr_fd_cb(68)=*opcode_fd_cb_44
opcodeaddr_fd_cb(69)=*opcode_fd_cb_45
opcodeaddr_fd_cb(70)=*opcode_fd_cb_46
opcodeaddr_fd_cb(71)=*opcode_fd_cb_47
opcodeaddr_fd_cb(72)=*opcode_fd_cb_48
opcodeaddr_fd_cb(73)=*opcode_fd_cb_49
opcodeaddr_fd_cb(74)=*opcode_fd_cb_4A
opcodeaddr_fd_cb(75)=*opcode_fd_cb_4B
opcodeaddr_fd_cb(76)=*opcode_fd_cb_4C
opcodeaddr_fd_cb(77)=*opcode_fd_cb_4D
opcodeaddr_fd_cb(78)=*opcode_fd_cb_4E
opcodeaddr_fd_cb(79)=*opcode_fd_cb_4F
opcodeaddr_fd_cb(80)=*opcode_fd_cb_50
opcodeaddr_fd_cb(81)=*opcode_fd_cb_51
opcodeaddr_fd_cb(82)=*opcode_fd_cb_52
opcodeaddr_fd_cb(83)=*opcode_fd_cb_53
opcodeaddr_fd_cb(84)=*opcode_fd_cb_54
opcodeaddr_fd_cb(85)=*opcode_fd_cb_55
opcodeaddr_fd_cb(86)=*opcode_fd_cb_56
opcodeaddr_fd_cb(87)=*opcode_fd_cb_57
opcodeaddr_fd_cb(88)=*opcode_fd_cb_58
opcodeaddr_fd_cb(89)=*opcode_fd_cb_59
opcodeaddr_fd_cb(90)=*opcode_fd_cb_5A
opcodeaddr_fd_cb(91)=*opcode_fd_cb_5B
opcodeaddr_fd_cb(92)=*opcode_fd_cb_5C
opcodeaddr_fd_cb(93)=*opcode_fd_cb_5D
opcodeaddr_fd_cb(94)=*opcode_fd_cb_5E
opcodeaddr_fd_cb(95)=*opcode_fd_cb_5F
opcodeaddr_fd_cb(96)=*opcode_fd_cb_60
opcodeaddr_fd_cb(97)=*opcode_fd_cb_61
opcodeaddr_fd_cb(98)=*opcode_fd_cb_62
opcodeaddr_fd_cb(99)=*opcode_fd_cb_63
opcodeaddr_fd_cb(100)=*opcode_fd_cb_64
opcodeaddr_fd_cb(101)=*opcode_fd_cb_65
opcodeaddr_fd_cb(102)=*opcode_fd_cb_66
opcodeaddr_fd_cb(103)=*opcode_fd_cb_67
opcodeaddr_fd_cb(104)=*opcode_fd_cb_68
opcodeaddr_fd_cb(105)=*opcode_fd_cb_69
opcodeaddr_fd_cb(106)=*opcode_fd_cb_6A
opcodeaddr_fd_cb(107)=*opcode_fd_cb_6B
opcodeaddr_fd_cb(108)=*opcode_fd_cb_6C
opcodeaddr_fd_cb(109)=*opcode_fd_cb_6D
opcodeaddr_fd_cb(110)=*opcode_fd_cb_6E
opcodeaddr_fd_cb(111)=*opcode_fd_cb_6F
opcodeaddr_fd_cb(112)=*opcode_fd_cb_70
opcodeaddr_fd_cb(113)=*opcode_fd_cb_71
opcodeaddr_fd_cb(114)=*opcode_fd_cb_72
opcodeaddr_fd_cb(115)=*opcode_fd_cb_73
opcodeaddr_fd_cb(116)=*opcode_fd_cb_74
opcodeaddr_fd_cb(117)=*opcode_fd_cb_75
opcodeaddr_fd_cb(118)=*opcode_fd_cb_76
opcodeaddr_fd_cb(119)=*opcode_fd_cb_77
opcodeaddr_fd_cb(120)=*opcode_fd_cb_78
opcodeaddr_fd_cb(121)=*opcode_fd_cb_79
opcodeaddr_fd_cb(122)=*opcode_fd_cb_7A
opcodeaddr_fd_cb(123)=*opcode_fd_cb_7B
opcodeaddr_fd_cb(124)=*opcode_fd_cb_7C
opcodeaddr_fd_cb(125)=*opcode_fd_cb_7D
opcodeaddr_fd_cb(126)=*opcode_fd_cb_7E
opcodeaddr_fd_cb(127)=*opcode_fd_cb_7F
opcodeaddr_fd_cb(128)=*opcode_fd_cb_80
opcodeaddr_fd_cb(129)=*opcode_fd_cb_81
opcodeaddr_fd_cb(130)=*opcode_fd_cb_82
opcodeaddr_fd_cb(131)=*opcode_fd_cb_83
opcodeaddr_fd_cb(132)=*opcode_fd_cb_84
opcodeaddr_fd_cb(133)=*opcode_fd_cb_85
opcodeaddr_fd_cb(134)=*opcode_fd_cb_86
opcodeaddr_fd_cb(135)=*opcode_fd_cb_87
opcodeaddr_fd_cb(136)=*opcode_fd_cb_88
opcodeaddr_fd_cb(137)=*opcode_fd_cb_89
opcodeaddr_fd_cb(138)=*opcode_fd_cb_8A
opcodeaddr_fd_cb(139)=*opcode_fd_cb_8B
opcodeaddr_fd_cb(140)=*opcode_fd_cb_8C
opcodeaddr_fd_cb(141)=*opcode_fd_cb_8D
opcodeaddr_fd_cb(142)=*opcode_fd_cb_8E
opcodeaddr_fd_cb(143)=*opcode_fd_cb_8F
opcodeaddr_fd_cb(144)=*opcode_fd_cb_90
opcodeaddr_fd_cb(145)=*opcode_fd_cb_91
opcodeaddr_fd_cb(146)=*opcode_fd_cb_92
opcodeaddr_fd_cb(147)=*opcode_fd_cb_93
opcodeaddr_fd_cb(148)=*opcode_fd_cb_94
opcodeaddr_fd_cb(149)=*opcode_fd_cb_95
opcodeaddr_fd_cb(150)=*opcode_fd_cb_96
opcodeaddr_fd_cb(151)=*opcode_fd_cb_97
opcodeaddr_fd_cb(152)=*opcode_fd_cb_98
opcodeaddr_fd_cb(153)=*opcode_fd_cb_99
opcodeaddr_fd_cb(154)=*opcode_fd_cb_9A
opcodeaddr_fd_cb(155)=*opcode_fd_cb_9B
opcodeaddr_fd_cb(156)=*opcode_fd_cb_9C
opcodeaddr_fd_cb(157)=*opcode_fd_cb_9D
opcodeaddr_fd_cb(158)=*opcode_fd_cb_9E
opcodeaddr_fd_cb(159)=*opcode_fd_cb_9F
opcodeaddr_fd_cb(160)=*opcode_fd_cb_A0
opcodeaddr_fd_cb(161)=*opcode_fd_cb_A1
opcodeaddr_fd_cb(162)=*opcode_fd_cb_A2
opcodeaddr_fd_cb(163)=*opcode_fd_cb_A3
opcodeaddr_fd_cb(164)=*opcode_fd_cb_A4
opcodeaddr_fd_cb(165)=*opcode_fd_cb_A5
opcodeaddr_fd_cb(166)=*opcode_fd_cb_A6
opcodeaddr_fd_cb(167)=*opcode_fd_cb_A7
opcodeaddr_fd_cb(168)=*opcode_fd_cb_A8
opcodeaddr_fd_cb(169)=*opcode_fd_cb_A9
opcodeaddr_fd_cb(170)=*opcode_fd_cb_AA
opcodeaddr_fd_cb(171)=*opcode_fd_cb_AB
opcodeaddr_fd_cb(172)=*opcode_fd_cb_AC
opcodeaddr_fd_cb(173)=*opcode_fd_cb_AD
opcodeaddr_fd_cb(174)=*opcode_fd_cb_AE
opcodeaddr_fd_cb(175)=*opcode_fd_cb_AF
opcodeaddr_fd_cb(176)=*opcode_fd_cb_B0
opcodeaddr_fd_cb(177)=*opcode_fd_cb_B1
opcodeaddr_fd_cb(178)=*opcode_fd_cb_B2
opcodeaddr_fd_cb(179)=*opcode_fd_cb_B3
opcodeaddr_fd_cb(180)=*opcode_fd_cb_B4
opcodeaddr_fd_cb(181)=*opcode_fd_cb_B5
opcodeaddr_fd_cb(182)=*opcode_fd_cb_B6
opcodeaddr_fd_cb(183)=*opcode_fd_cb_B7
opcodeaddr_fd_cb(184)=*opcode_fd_cb_B8
opcodeaddr_fd_cb(185)=*opcode_fd_cb_B9
opcodeaddr_fd_cb(186)=*opcode_fd_cb_BA
opcodeaddr_fd_cb(187)=*opcode_fd_cb_BB
opcodeaddr_fd_cb(188)=*opcode_fd_cb_BC
opcodeaddr_fd_cb(189)=*opcode_fd_cb_BD
opcodeaddr_fd_cb(190)=*opcode_fd_cb_BE
opcodeaddr_fd_cb(191)=*opcode_fd_cb_BF
opcodeaddr_fd_cb(192)=*opcode_fd_cb_C0
opcodeaddr_fd_cb(193)=*opcode_fd_cb_C1
opcodeaddr_fd_cb(194)=*opcode_fd_cb_C2
opcodeaddr_fd_cb(195)=*opcode_fd_cb_C3
opcodeaddr_fd_cb(196)=*opcode_fd_cb_C4
opcodeaddr_fd_cb(197)=*opcode_fd_cb_C5
opcodeaddr_fd_cb(198)=*opcode_fd_cb_C6
opcodeaddr_fd_cb(199)=*opcode_fd_cb_C7
opcodeaddr_fd_cb(200)=*opcode_fd_cb_C8
opcodeaddr_fd_cb(201)=*opcode_fd_cb_C9
opcodeaddr_fd_cb(202)=*opcode_fd_cb_CA
opcodeaddr_fd_cb(203)=*opcode_fd_cb_CB
opcodeaddr_fd_cb(204)=*opcode_fd_cb_CC
opcodeaddr_fd_cb(205)=*opcode_fd_cb_CD
opcodeaddr_fd_cb(206)=*opcode_fd_cb_CE
opcodeaddr_fd_cb(207)=*opcode_fd_cb_CF
opcodeaddr_fd_cb(208)=*opcode_fd_cb_D0
opcodeaddr_fd_cb(209)=*opcode_fd_cb_D1
opcodeaddr_fd_cb(210)=*opcode_fd_cb_D2
opcodeaddr_fd_cb(211)=*opcode_fd_cb_D3
opcodeaddr_fd_cb(212)=*opcode_fd_cb_D4
opcodeaddr_fd_cb(213)=*opcode_fd_cb_D5
opcodeaddr_fd_cb(214)=*opcode_fd_cb_D6
opcodeaddr_fd_cb(215)=*opcode_fd_cb_D7
opcodeaddr_fd_cb(216)=*opcode_fd_cb_D8
opcodeaddr_fd_cb(217)=*opcode_fd_cb_D9
opcodeaddr_fd_cb(218)=*opcode_fd_cb_DA
opcodeaddr_fd_cb(219)=*opcode_fd_cb_DB
opcodeaddr_fd_cb(220)=*opcode_fd_cb_DC
opcodeaddr_fd_cb(221)=*opcode_fd_cb_DD
opcodeaddr_fd_cb(222)=*opcode_fd_cb_DE
opcodeaddr_fd_cb(223)=*opcode_fd_cb_DF
opcodeaddr_fd_cb(224)=*opcode_fd_cb_E0
opcodeaddr_fd_cb(225)=*opcode_fd_cb_E1
opcodeaddr_fd_cb(226)=*opcode_fd_cb_E2
opcodeaddr_fd_cb(227)=*opcode_fd_cb_E3
opcodeaddr_fd_cb(228)=*opcode_fd_cb_E4
opcodeaddr_fd_cb(229)=*opcode_fd_cb_E5
opcodeaddr_fd_cb(230)=*opcode_fd_cb_E6
opcodeaddr_fd_cb(231)=*opcode_fd_cb_E7
opcodeaddr_fd_cb(232)=*opcode_fd_cb_E8
opcodeaddr_fd_cb(233)=*opcode_fd_cb_E9
opcodeaddr_fd_cb(234)=*opcode_fd_cb_EA
opcodeaddr_fd_cb(235)=*opcode_fd_cb_EB
opcodeaddr_fd_cb(236)=*opcode_fd_cb_EC
opcodeaddr_fd_cb(237)=*opcode_fd_cb_ED
opcodeaddr_fd_cb(238)=*opcode_fd_cb_EE
opcodeaddr_fd_cb(239)=*opcode_fd_cb_EF
opcodeaddr_fd_cb(240)=*opcode_fd_cb_F0
opcodeaddr_fd_cb(241)=*opcode_fd_cb_F1
opcodeaddr_fd_cb(242)=*opcode_fd_cb_F2
opcodeaddr_fd_cb(243)=*opcode_fd_cb_F3
opcodeaddr_fd_cb(244)=*opcode_fd_cb_F4
opcodeaddr_fd_cb(245)=*opcode_fd_cb_F5
opcodeaddr_fd_cb(246)=*opcode_fd_cb_F6
opcodeaddr_fd_cb(247)=*opcode_fd_cb_F7
opcodeaddr_fd_cb(248)=*opcode_fd_cb_F8
opcodeaddr_fd_cb(249)=*opcode_fd_cb_F9
opcodeaddr_fd_cb(250)=*opcode_fd_cb_FA
opcodeaddr_fd_cb(251)=*opcode_fd_cb_FB
opcodeaddr_fd_cb(252)=*opcode_fd_cb_FC
opcodeaddr_fd_cb(253)=*opcode_fd_cb_FD
opcodeaddr_fd_cb(254)=*opcode_fd_cb_FE
opcodeaddr_fd_cb(255)=*opcode_fd_cb_FF

ldim jrlbldim,2
ldim jplbldim,2
ldim retlbldim,2
ldim calllbldim,2
jrlbldim(0)=*jrlblfalse,*opcode_18
jplbldim(0)=*jplblfalse,*opcode_C3
retlbldim(0)=*retlblfalse,*opcode_C9
calllbldim(0)=*calllblfalse,*opcode_CD

z80rwmemflag=0:z80rwmemaddr=0:z80iochecklabel=*null:z80iochecklabel2=*null
cpuamountmax=256
dim z80scfccfflag,cpuamountmax
dim r2forcalc,cpuamountmax
sdim stackformt,64,2,cpuamountmax
for cnt2,0,cpuamountmax,1
memset stackformt(0,cnt2),255,64,0
memset stackformt(1,cnt2),255,64,0
next
sdim iomemory,cpuamountmax
dim z80runmode,cpuamountmax
dim z80haltmodesw,cpuamountmax
cnt2=0
dim z80halt2endmode,cpuamountmax
return

#deffunc z80iomappedjump label z80iocheck
z80iochecklabel=z80iocheck
return
#deffunc z80ioportcalljump label z80iocheck
z80iochecklabel2=z80iocheck
return
#deffunc z80iochkclear
z80iochecklabel=*null:z80iochecklabel2=*null
return
#ifdef z80memaccess
#deffunc z80writemem int addressforz80rwm,int z80pokedata
addressforz80rwmads=addressforz80rwm
z80pokedataads=z80pokedata
z80memaccess addressforz80rwmads&0xFFFF,z80pokedataads,0
return
#defcfunc z80readmem int addressforz80rwm
addressforz80rwmads=addressforz80rwm
z80memaccess addressforz80rwmads&0xFFFF,0,1
stat2z80pokedataads=stat
return stat2z80pokedataads
#else
#deffunc z80writemem int addressforz80rwm,int z80pokedata
z80rwmemflag=1
z80rwmemaddr=addressforz80rwm
poke memoryn,(addressforz80rwm & 0xFFFF),z80pokedata
_z80rwmemflag@=z80rwmemflag
_z80rwmemaddr@=z80rwmemaddr
gosub z80iochecklabel
return
#defcfunc z80readmem int addressforz80rwm
z80rwmemflag=2
z80rwmemaddr=addressforz80rwm
_z80rwmemflag@=z80rwmemflag
_z80rwmemaddr@=z80rwmemaddr
gosub z80iochecklabel
return peek(memoryn,(addressforz80rwm & 0xFFFF))
#endif
#deffunc z80writemem16 int addressforz80rwm16,int z80pokedata16
z80pokedata16i=z80pokedata16
z80writemem (addressforz80rwm16) & 0xFFFF,peek(z80pokedata16i,0)
z80writemem (addressforz80rwm16+1) & 0xFFFF,peek(z80pokedata16i,1)
z80rwmemflag=1
z80rwmemaddr=addressforz80rwm16
return
#defcfunc z80readmem16 int addressforz80rwm16
z80readmem16readmemforcv=0
poke z80readmem16readmemforcv,0,z80readmem((addressforz80rwm16) & 0xFFFF)
poke z80readmem16readmemforcv,1,z80readmem((addressforz80rwm16+1) & 0xFFFF)
z80rwmemflag=2
z80rwmemaddr=addressforz80rwm16
return z80readmem16readmemforcv
#ifdef getioportread16bitaddrwithcpuno
#defcfunc z80getioportread16bitaddrwithcpuno var startaddr, var memory, int threadidforrunthez80
#else
#defcfunc getioportread16bitaddrwithcpuno var startaddr, var memory, int threadidforrunthez80
#endif
memcpy stack(0),stackformt(0,threadidforrunthez80),64,0,0
memcpy stack(1),stackformt(1,threadidforrunthez80),64,0,0
#ifdef getioportread16bitaddr
#defcfunc z80getioportread16bitaddr var startaddr, var memory
#else
#defcfunc getioportread16bitaddr var startaddr, var memory
#endif
dup memoryn,memory
address=-1
switch z80readmem(startaddr)
case 0xDB
address=0
poke address,0,z80readmem(startaddr+1)
poke address,1,peek(stack(0),0)
swbreak
case 0xED
switch z80readmem(startaddr+1)
case 0x40
address=0
address=wpeek(stack(0),2)
swbreak
case 0x48
address=0
address=wpeek(stack(0),2)
swbreak
case 0x50
address=0
address=wpeek(stack(0),2)
swbreak
case 0x58
address=0
address=wpeek(stack(0),2)
swbreak
case 0x60
address=0
address=wpeek(stack(0),2)
swbreak
case 0x68
address=0
address=wpeek(stack(0),2)
swbreak
case 0x70
address=0
address=wpeek(stack(0),2)
swbreak
case 0x78
address=0
address=wpeek(stack(0),2)
swbreak
case 0xA2
address=0
wpoke address,0,wpeek(stack(0),2)
//peek address,1,peek(stack(0),4)
swbreak
case 0xAA
address=0
wpoke address,0,wpeek(stack(0),2)
//peek address,1,peek(stack(0),4)
swbreak
case 0xB2
address=0
wpoke address,0,wpeek(stack(0),2)
//peek address,1,peek(stack(0),4)
swbreak
case 0xBA
address=0
wpoke address,0,wpeek(stack(0),2)
//peek address,1,peek(stack(0),4)
swbreak
swend
swbreak
swend
return address

#defcfunc isioportcalled
ioportidforreturn=iomemorycalledid
if iomemorycalled=0{ioportidforreturn=-1}
if iomemorycalled=2{ioportidforreturn=-1}
if iomemorycalled=1{iomemorycalled=0}
return ioportidforreturn
#defcfunc isioportcalled16
ioportidforreturn=iomemorycalledid16
if iomemorycalled=0{ioportidforreturn=-1}
if iomemorycalled=2{ioportidforreturn=-1}
if iomemorycalled=1{iomemorycalled=0}
return ioportidforreturn
#ifdef ioportpoke
#deffunc z80ioportpoke int iomemoryidforz80,int iomemorydataforz80
#else
#deffunc ioportpoke int iomemoryidforz80,int iomemorydataforz80
#endif
poke iomemory,iomemoryidforz80,iomemorydataforz80
return
#ifdef ioportpeek
#defcfunc z80ioportpeek int iomemoryidforz80
#else
#defcfunc ioportpeek int iomemoryidforz80
#endif
return peek(iomemory,iomemoryidforz80)

#ifdef stackpoke
#deffunc z80stackpoke int threadidforrunthez80,int threadidforrunthez80ptrid,int iomemoryidforz80,int iomemorydataforz80
#else
#deffunc stackpoke int threadidforrunthez80,int threadidforrunthez80ptrid,int iomemoryidforz80,int iomemorydataforz80
#endif
poke stackformt(threadidforrunthez80ptrid,threadidforrunthez80),iomemoryidforz80,iomemorydataforz80
return
#ifdef stackpeek
#defcfunc z80stackpeek int threadidforrunthez80,int threadidforrunthez80ptrid,int iomemoryidforz80
#else
#defcfunc stackpeek int threadidforrunthez80,int threadidforrunthez80ptrid,int iomemoryidforz80
#endif
return peek(stackformt(threadidforrunthez80ptrid,threadidforrunthez80),iomemoryidforz80)

#ifdef z80memaccess
#deffunc z80interrupt var startaddr, int threadidforrunthez80,int iomemoryidforz80
#else
#deffunc z80interrupt var startaddr, var memory,int threadidforrunthez80,int iomemoryidforz80
dup memoryn,memory
#endif
if z80haltmodesw(threadidforrunthez80)=1{z80haltmodesw(threadidforrunthez80)=0:startaddr=startaddr+1}
if (peek(stackformt(1,threadidforrunthez80),14) & 0x01){
if z80runmode(threadidforrunthez80)=0{
memcpy stack(0),stackformt(0,threadidforrunthez80),64,0,0
memcpy stack(1),stackformt(1,threadidforrunthez80),64,0,0
wpoke stack(0),10,startaddr
//opcode=z80readmem(wpeek(stack(0),10))
//lpoke jumplabel,0,opcodeaddr(opcode)
#ifdef __useslowz80emulation_flag__
opcode=(iomemoryidforz80 & 0xff)
gosub *z80opcodeinterpretsw
#else
gosub opcodeaddr(iomemoryidforz80 & 0xff)//opcodeaddr(opcode)//jumplabel
#endif
lpoke startaddr,0,wpeek(stack(0),10)
memcpy stackformt(0,threadidforrunthez80),stack(0),64,0,0
memcpy stackformt(1,threadidforrunthez80),stack(1),64,0,0
}
if z80runmode(threadidforrunthez80)=1{
z80writemem wpeek(stackformt(0,threadidforrunthez80),12)-2,peek(stackformt(0,threadidforrunthez80),10)
z80writemem wpeek(stackformt(0,threadidforrunthez80),12)-1,peek(stackformt(0,threadidforrunthez80),11)
wpoke stackformt(0,threadidforrunthez80),12,wpeek(stackformt(0,threadidforrunthez80),12)-2
wpoke stackformt(0,threadidforrunthez80),10,0x38
startaddr=0x38
}
if z80runmode(threadidforrunthez80)=2{
z80writemem wpeek(stackformt(0,threadidforrunthez80),12)-2,peek(stackformt(0,threadidforrunthez80),10)
z80writemem wpeek(stackformt(0,threadidforrunthez80),12)-1,peek(stackformt(0,threadidforrunthez80),11)
wpoke stackformt(0,threadidforrunthez80),12,wpeek(stackformt(0,threadidforrunthez80),12)-2
startaddr=z80readmem16((peek(stackformt(0,threadidforrunthez80),15)<<8)+(iomemoryidforz80 & 0xff))
}
poke stackformt(1,threadidforrunthez80),14,0
poke stackformt(1,threadidforrunthez80),15,0
}
return

#defcfunc z80getwhatishalt int threadidforrunthez80
return z80haltmodesw(threadidforrunthez80)

#ifdef z80memaccess
#deffunc z80nminterrupt var startaddr, int threadidforrunthez80
#else
#deffunc z80nminterrupt var startaddr, var memory,int threadidforrunthez80
dup memoryn,memory
#endif
if z80haltmodesw(threadidforrunthez80)=1{z80haltmodesw(threadidforrunthez80)=0:startaddr=startaddr+1}
z80writemem wpeek(stackformt(0,threadidforrunthez80),12)-2,peek(stackformt(0,threadidforrunthez80),10)
z80writemem wpeek(stackformt(0,threadidforrunthez80),12)-1,peek(stackformt(0,threadidforrunthez80),11)
wpoke stackformt(0,threadidforrunthez80),12,wpeek(stackformt(0,threadidforrunthez80),12)-2
wpoke stackformt(0,threadidforrunthez80),10,0x66
poke stackformt(1,threadidforrunthez80),14,0
startaddr=0x66
return

#deffunc z80stackreset int threadidforrunthez80
z80scfccfflag(threadidforrunthez80)=0
z80haltmodesw(threadidforrunthez80)=0
memset stackformt(0,threadidforrunthez80),255,64,0
memset stackformt(1,threadidforrunthez80),255,64,0
return

#deffunc z80hltendset int threadidforrunthez80,int threadidforrunthez80ptrid
z80halt2endmode(threadidforrunthez80)=threadidforrunthez80ptrid
return

#ifdef z80memaccess
#defcfunc z80run_c var startaddr, int threadidforrunthez80
#deffunc z80run var startaddr, int threadidforrunthez80
#else
#defcfunc z80run_c var startaddr, var memory, int threadidforrunthez80
#deffunc z80run var startaddr, var memory, int threadidforrunthez80
dup memoryn,memory
#endif
memcpy stack(0),stackformt(0,threadidforrunthez80),64,0,0
memcpy stack(1),stackformt(1,threadidforrunthez80),64,0,0
wpoke stack(0),10,startaddr
//opcode=z80readmem(wpeek(stack(0),10))
//lpoke jumplabel,0,opcodeaddr(opcode)
wpoke stack(0),10,wpeek(stack(0),10)+1
if z80haltmodesw(threadidforrunthez80)=0{
opcode=z80readmem(startaddr):clockcount=opcodecc_op(opcode)
#ifdef __useslowz80emulation_flag__
gosub *z80opcodeinterpretsw
#else
gosub opcodeaddr(opcode)
#endif
}//opcodeaddr(opcode)//jumplabel
lpoke startaddr,0,wpeek(stack(0),10)
poke stack(0),14,peek(stack(0),14)+1
#ifdef z80memaccess
z80memaccess peek(stack(0),14)&0x7F,0,4
#endif
memcpy stackformt(0,threadidforrunthez80),stack(0),64,0,0
memcpy stackformt(1,threadidforrunthez80),stack(1),64,0,0
return clockcount//peek(stack(0),1)
opcodewaiti=opcodewaiti+1
if opcodewaiti=4001{opcodewaiti=0:await 1}
//loop
*jplblfalse
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*jrlblfalse
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*retlblfalse
return
*calllblfalse
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*null
return

*opcode_00
return
*opcode_01
wpoke stack(0),2,z80readmem16(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_02
z80writemem wpeek(stack(0),2),peek(stack(0),0)
return
*opcode_03
wpoke stack(0),2,wpeek(stack(0),2)+1
return
*opcode_04
calculated=0
calculated=peek(stack(0),3)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(0),3,calculated
return
*opcode_05
calculated=0
calculated=peek(stack(0),3)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(0),3,calculated
return
*opcode_06
poke stack(0),3,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_07
poke stack(0),0,(peek(stack(0),0) << 1) | (peek(stack(0),0) >> 7)
poke stack(0),1,(peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (peek(stack(0),0) & (0x20 | 0x08 | 0x01))
return
*opcode_08
A_bak1=peek(stack(0),0)
A_bak2=peek(stack(1),0)
F_bak1=peek(stack(0),1)
F_bak2=peek(stack(1),1)
poke stack(0),0,A_bak2
poke stack(1),0,A_bak1
poke stack(0),1,F_bak2
poke stack(1),1,F_bak1
return
*opcode_09
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(0),addtostack,calculated
return
*opcode_0a
poke stack(0),0,z80readmem(wpeek(stack(0),2))
return
*opcode_0b
wpoke stack(0),2,wpeek(stack(0),2)-1
return
*opcode_0c
calculated=0
calculated=peek(stack(0),2)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(0),2,calculated
return
*opcode_0d
calculated=0
calculated=peek(stack(0),2)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(0),2,calculated
return
*opcode_0e
poke stack(0),2,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_0f
poke stack(0),1,(peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (peek(stack(0),0) & 0x01)
poke stack(0),0,(peek(stack(0),0) >> 1) | (peek(stack(0),0) << 7)
poke stack(0),1,peek(stack(0),1) | (peek(stack(0),0) & (0x20 | 0x08))
return
*opcode_10
poke stack(0),3,peek(stack(0),3)-1
address=z80readmem(wpeek(stack(0),10))
if address>=128{address=-(256-address)}
if (peek(stack(0),3)) {wpoke stack(0),10,wpeek(stack(0),10)+address+1}else{wpoke stack(0),10,wpeek(stack(0),10)+1}
return
*opcode_10_lbl
poke stack(0),3,peek(stack(0),3)-1
goto jrlbldim((peek(stack(0),3)!0))
return
*opcode_11
wpoke stack(0),4,z80readmem16(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_12
z80writemem wpeek(stack(0),4),peek(stack(0),0)
return
*opcode_13
wpoke stack(0),4,wpeek(stack(0),4)+1
return
*opcode_14
calculated=0
calculated=peek(stack(0),5)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(0),5,calculated
return
*opcode_15
calculated=0
calculated=peek(stack(0),5)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(0),5,calculated
return
*opcode_16
poke stack(0),5,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_17
rlac=1
rlares = (peek(stack(0),0) << 1) | (peek(stack(0),1) & 0x01)
if (peek(stack(0),0) & 0x80) {rlac = 0x01}else{rlac = 0}
poke stack(0),1,(peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | rlac | (rlares & (0x20 | 0x08))
poke stack(0),0,rlares
return
*opcode_18
address=z80readmem(wpeek(stack(0),10))
if address>=128{address=-(256-address)}
wpoke stack(0),10,wpeek(stack(0),10)+address+1
return
*opcode_19
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(0),addtostack,calculated
return
*opcode_1a
poke stack(0),0,z80readmem(wpeek(stack(0),4))
return
*opcode_1b
wpoke stack(0),4,wpeek(stack(0),4)-1
return
*opcode_1c
calculated=0
calculated=peek(stack(0),4)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(0),4,calculated
return
*opcode_1d
calculated=0
calculated=peek(stack(0),4)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(0),4,calculated
return
*opcode_1e
poke stack(0),4,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_1f
rlac=1
rlares = (peek(stack(0),0) >> 1) | (peek(stack(0),1) << 7)
if (peek(stack(0),0) & 0x01) {rlac= 0x01}else{rlac = 0}
poke stack(0),1,(peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | rlac | (rlares & (0x20 | 0x08))
poke stack(0),0,rlares
return
*opcode_20
address=z80readmem(wpeek(stack(0),10))
if address>=128{address=-(256-address)}
if (peek(stack(0),1) & 0x40) {wpoke stack(0),10,wpeek(stack(0),10)+1}else{wpoke stack(0),10,wpeek(stack(0),10)+address+1}
return
*opcode_20_lbl
goto jrlbldim(((peek(stack(0),1) & 0x40)!0)=0)
return
*opcode_21
wpoke stack(0),6,z80readmem16(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_22
z80writemem16 z80readmem16(wpeek(stack(0),10)),wpeek(stack(0),6)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_23
wpoke stack(0),6,wpeek(stack(0),6)+1
return
*opcode_24
calculated=0
calculated=peek(stack(0),7)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(0),7,calculated
return
*opcode_25
calculated=0
calculated=peek(stack(0),7)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(0),7,calculated
return
*opcode_26
poke stack(0),7,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_27
	/*#if 0
		afordaa=0
		afordaa = peek(stack(0),0)
		if peek(stack(0),1) & 0x01 {afordaa |= 0x100}
		if peek(stack(0),1) & 0x10 {afordaa |= 0x200}
		if peek(stack(0),1) & 0x02 {afordaa |= 0x400}
		poke stack(0),0,peek(DAATable(afordaa),1)
		poke stack(0),1,peek(DAATable(afordaa),0)
	#else
	afordaa=peek(stack(0),0)
	if(peek(stack(0),1) & 0x02) { 
		if((peek(stack(0),1) & 0x10) | ((peek(stack(0),0) & 0xf) > 9)) {afordaa -= 6}
		if((peek(stack(0),1) & 0x01) | (peek(stack(0),0) > 0x99)) {afordaa -= 0x60}
	} else { 
		if((peek(stack(0),1) & 0x10) | ((peek(stack(0),0) & 0xf) > 9)) {afordaa += 6}
		if((peek(stack(0),1) & 0x01) | (peek(stack(0),0) > 0x99)) {afordaa += 0x60}
	} 
	poke stack(0),1,(peek(stack(0),1) & (0x01 | 0x02)) | (peek(stack(0),0) > 0x99) | ((peek(stack(0),0) ^ afordaa) & 0x10) | SZP(peek(afordaa,0))
	poke stack(0),0,afordaa
	#endif*/
		afordaa=0
		afordaa = peek(stack(0),0)+(0x100*((peek(stack(0),1) & 0x01)!0))+(0x200*((peek(stack(0),1) & 0x10)!0))+(0x400*((peek(stack(0),1) & 0x02)!0))
		poke stack(0),0,peek(DAATable(afordaa),1):poke stack(0),1,peek(DAATable(afordaa),0)
return
*opcode_28
address=z80readmem(wpeek(stack(0),10))
if address>=128{address=-(256-address)}
if (peek(stack(0),1) & 0x40) {wpoke stack(0),10,wpeek(stack(0),10)+address+1}else{wpoke stack(0),10,wpeek(stack(0),10)+1}
return
*opcode_28_lbl
goto jrlbldim(((peek(stack(0),1) & 0x40)!0))
return
*opcode_29
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(0),addtostack,calculated
return
*opcode_2a
wpoke stack(0),6,z80readmem16(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_2b
wpoke stack(0),6,wpeek(stack(0),6)-1
return
*opcode_2c
calculated=0
calculated=peek(stack(0),6)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(0),6,calculated
return
*opcode_2d
calculated=0
calculated=peek(stack(0),6)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(0),6,calculated
return
*opcode_2e
poke stack(0),6,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_2f
cpla=peek(stack(0),0)
cpla ^=0xFF
poke stack(0),0,cpla
poke stack(0),1,(peek(stack(0),1) & (0x80 | 0x40 | 0x04 | 0x01)) | 0x10 | 0x02 | (peek(stack(0),0) & (0x20 | 0x08))
return
*opcode_30
address=z80readmem(wpeek(stack(0),10))
if address>=128{address=-(256-address)}
if (peek(stack(0),1) & 0x01) {wpoke stack(0),10,wpeek(stack(0),10)+1}else{wpoke stack(0),10,wpeek(stack(0),10)+address+1}
return
*opcode_30_lbl
goto jrlbldim(((peek(stack(0),1) & 0x01)!0)=0)
return
*opcode_31
wpoke stack(0),12,z80readmem16(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_32
z80writemem z80readmem16(wpeek(stack(0),10)),peek(stack(0),0)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_33
wpoke stack(0),12,wpeek(stack(0),12)+1
return
*opcode_34
calculated=0
calculated=z80readmem(wpeek(stack(0),6))+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
z80writemem wpeek(stack(0),6),calculated
return
*opcode_35
calculated=0
calculated=z80readmem(wpeek(stack(0),6))-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
z80writemem wpeek(stack(0),6),calculated
return
*opcode_36
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_37
if z80scfccfflag(threadidforrunthez80)=1{
poke stack(0),1,(peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | 0x01 | (peek(stack(0),0) & (0x20 | 0x08));
z80scfccfflag(threadidforrunthez80)=0
}else{
poke stack(0),1,(peek(stack(0),1) & (0x80 | 0x40 | 0x20 | 0x08 | 0x04)) | 0x01 | (peek(stack(0),0) & (0x20 | 0x08))
z80scfccfflag(threadidforrunthez80)=2
}
return
*opcode_38
address=z80readmem(wpeek(stack(0),10))
if address>=128{address=-(256-address)}
if (peek(stack(0),1) & 0x01) {wpoke stack(0),10,wpeek(stack(0),10)+address+1}else{wpoke stack(0),10,wpeek(stack(0),10)+1}
return
*opcode_38_lbl
goto jrlbldim(((peek(stack(0),1) & 0x01)!0))
return
*opcode_39
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(0),addtostack,calculated
return
*opcode_3a
poke stack(0),0,z80readmem(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_3b
wpoke stack(0),12,wpeek(stack(0),12)-1
return
*opcode_3c
calculated=0
calculated=peek(stack(0),0)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(0),0,calculated
return
*opcode_3d
calculated=0
calculated=peek(stack(0),0)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(0),0,calculated
return
*opcode_3e
poke stack(0),0,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_3f
if z80scfccfflag(threadidforrunthez80)=2{
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04 | 0x01)) | ((peek(stack(0),1) & 0x01) << 4) | (peek(stack(0),0) & (0x20 | 0x08))) ^ 0x01
z80scfccfflag(threadidforrunthez80)=0
}else{
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x20 | 0x08 | 0x04 | 0x01)) | ((peek(stack(0),1) & 0x01) << 4) | (peek(stack(0),0) & (0x20 | 0x08))) ^ 0x01
z80scfccfflag(threadidforrunthez80)=1
}
return
*opcode_40
poke stack(0),3,peek(stack(0),3)
return
*opcode_41
poke stack(0),3,peek(stack(0),2)
return
*opcode_42
poke stack(0),3,peek(stack(0),5)
return
*opcode_43
poke stack(0),3,peek(stack(0),4)
return
*opcode_44
poke stack(0),3,peek(stack(0),7)
return
*opcode_45
poke stack(0),3,peek(stack(0),6)
return
*opcode_46
poke stack(0),3,z80readmem(wpeek(stack(0),6))
return
*opcode_47
poke stack(0),3,peek(stack(0),0)
return
*opcode_48
poke stack(0),2,peek(stack(0),3)
return
*opcode_49
poke stack(0),2,peek(stack(0),2)
return
*opcode_4a
poke stack(0),2,peek(stack(0),5)
return
*opcode_4b
poke stack(0),2,peek(stack(0),4)
return
*opcode_4c
poke stack(0),2,peek(stack(0),7)
return
*opcode_4d
poke stack(0),2,peek(stack(0),6)
return
*opcode_4e
poke stack(0),2,z80readmem(wpeek(stack(0),6))
return
*opcode_4f
poke stack(0),2,peek(stack(0),0)
return
*opcode_50
poke stack(0),5,peek(stack(0),3)
return
*opcode_51
poke stack(0),5,peek(stack(0),2)
return
*opcode_52
poke stack(0),5,peek(stack(0),5)
return
*opcode_53
poke stack(0),5,peek(stack(0),4)
return
*opcode_54
poke stack(0),5,peek(stack(0),7)
return
*opcode_55
poke stack(0),5,peek(stack(0),6)
return
*opcode_56
poke stack(0),5,z80readmem(wpeek(stack(0),6))
return
*opcode_57
poke stack(0),5,peek(stack(0),0)
return
*opcode_58
poke stack(0),4,peek(stack(0),3)
return
*opcode_59
poke stack(0),4,peek(stack(0),2)
return
*opcode_5a
poke stack(0),4,peek(stack(0),5)
return
*opcode_5b
poke stack(0),4,peek(stack(0),4)
return
*opcode_5c
poke stack(0),4,peek(stack(0),7)
return
*opcode_5d
poke stack(0),4,peek(stack(0),6)
return
*opcode_5e
poke stack(0),4,z80readmem(wpeek(stack(0),6))
return
*opcode_5f
poke stack(0),4,peek(stack(0),0)
return
*opcode_60
poke stack(0),7,peek(stack(0),3)
return
*opcode_61
poke stack(0),7,peek(stack(0),2)
return
*opcode_62
poke stack(0),7,peek(stack(0),5)
return
*opcode_63
poke stack(0),7,peek(stack(0),4)
return
*opcode_64
poke stack(0),7,peek(stack(0),7)
return
*opcode_65
poke stack(0),7,peek(stack(0),6)
return
*opcode_66
poke stack(0),7,z80readmem(wpeek(stack(0),6))
return
*opcode_67
poke stack(0),7,peek(stack(0),0)
return
*opcode_68
poke stack(0),6,peek(stack(0),3)
return
*opcode_69
poke stack(0),6,peek(stack(0),2)
return
*opcode_6a
poke stack(0),6,peek(stack(0),5)
return
*opcode_6b
poke stack(0),6,peek(stack(0),4)
return
*opcode_6c
poke stack(0),6,peek(stack(0),7)
return
*opcode_6d
poke stack(0),6,peek(stack(0),6)
return
*opcode_6e
poke stack(0),6,z80readmem(wpeek(stack(0),6))
return
*opcode_6f
poke stack(0),6,peek(stack(0),0)
return
*opcode_70
z80writemem wpeek(stack(0),6),peek(stack(0),3)
return
*opcode_71
z80writemem wpeek(stack(0),6),peek(stack(0),2)
return
*opcode_72
z80writemem wpeek(stack(0),6),peek(stack(0),5)
return
*opcode_73
z80writemem wpeek(stack(0),6),peek(stack(0),4)
return
*opcode_74
z80writemem wpeek(stack(0),6),peek(stack(0),7)
return
*opcode_75
z80writemem wpeek(stack(0),6),peek(stack(0),6)
return
*opcode_76
threadidforrunthez80_2=threadidforrunthez80
wpoke stack(0),10,wpeek(stack(0),10)-1
if z80halt2endmode(threadidforrunthez80_2)=2{z80haltmodesw(threadidforrunthez80_2)=1}else{
if z80halt2endmode(threadidforrunthez80_2)=1{z80stackreset threadidforrunthez80_2}else{end}}
return
*opcode_77
z80writemem wpeek(stack(0),6),peek(stack(0),0)
return
*opcode_78
poke stack(0),0,peek(stack(0),3)
return
*opcode_79
poke stack(0),0,peek(stack(0),2)
return
*opcode_7a
poke stack(0),0,peek(stack(0),5)
return
*opcode_7b
poke stack(0),0,peek(stack(0),4)
return
*opcode_7c
poke stack(0),0,peek(stack(0),7)
return
*opcode_7d
poke stack(0),0,peek(stack(0),6)
return
*opcode_7e
poke stack(0),0,z80readmem(wpeek(stack(0),6))
return
*opcode_7f
poke stack(0),0,peek(stack(0),0)
return
*opcode_80
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_81
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_82
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_83
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_84
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_85
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_86
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+z80readmem(wpeek(stack(0),6))
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),6))) & 0x10) | (((z80readmem(wpeek(stack(0),6)) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(0),6)) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_87
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_88
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_89
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_8a
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_8b
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_8c
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_8d
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_8e
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+z80readmem(wpeek(stack(0),6))+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),6))) & 0x10) | (((z80readmem(wpeek(stack(0),6)) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(0),6)) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_8f
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
return
*opcode_90
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_91
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_92
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_93
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_94
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_95
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_96
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-z80readmem(wpeek(stack(0),6))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),6))) & 0x10) | (((z80readmem(wpeek(stack(0),6))^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_97
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_98
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_99
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_9a
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_9b
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_9c
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_9d
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_9e
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-z80readmem(wpeek(stack(0),6))-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),6))) & 0x10) | (((z80readmem(wpeek(stack(0),6))^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_9f
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_a0
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a1
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a2
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a3
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a4
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a5
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a6
//poke stack(0),1,peek(stack(0),1) ^ (0x01)
//poke stack(0),1,peek(stack(0),1) ^ (0x02)
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&z80readmem(wpeek(stack(0),6))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a7
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_a8
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_a9
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_aa
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_ab
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_ac
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_ad
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_ae
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^z80readmem(wpeek(stack(0),6))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_af
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b0
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b1
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b2
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b3
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b4
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b5
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b6
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|z80readmem(wpeek(stack(0),6))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b7
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_b8
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=3
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(0),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | ((((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_b9
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(0),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | ((((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_ba
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=5
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(0),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | ((((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_bb
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(0),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | ((((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_bc
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(0),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | ((((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_bd
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(0),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | ((((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_be
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=7
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-z80readmem(wpeek(stack(0),6))
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (z80readmem(wpeek(stack(0),6)) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),6))) & 0x10) | ((((z80readmem(wpeek(stack(0),6)) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_bf
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(0),addfromstack)
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(0),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | ((((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_c0
if peek(stack(0),1) & (0x40){}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_c0_lbl
goto retlbldim(((peek(stack(0),1) & (0x40))!0)=0)
return
*opcode_c1
wpoke stack(0),2,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
return
*opcode_c2
if peek(stack(0),1) & (0x40){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_c2_lbl
goto jplbldim(((peek(stack(0),1) & (0x40))!0)=0)
return
*opcode_c3
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
return
*opcode_c4
if peek(stack(0),1) & (0x40){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_c4_lbl
goto calllbldim(((peek(stack(0),1) & (0x40))!0)=0)
return
*opcode_c5
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),2)
return
*opcode_c6
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+z80readmem(wpeek(stack(0),10))
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),10))) & 0x10) | (((z80readmem(wpeek(stack(0),10)) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(0),10)) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_c7
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,0
return
*opcode_c8
if peek(stack(0),1) & (0x40){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_c8_lbl
goto retlbldim(((peek(stack(0),1) & (0x40))!0))
return
*opcode_c9
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
return
*opcode_ca
if peek(stack(0),1) & (0x40){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_ca_lbl
goto jplbldim(((peek(stack(0),1) & (0x40))!0))
return
*opcode_cb
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_cb(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+1
gosub opcodeaddr_cb(opcodeforsubcall)
poke stack(0),14,peek(stack(0),14)+1
return
//switch opcodeforsubcall
*opcode_cb_00
changetoforrlc=3
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_01
changetoforrlc=2
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_02
changetoforrlc=5
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_03
changetoforrlc=4
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_04
changetoforrlc=7
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_05
changetoforrlc=6
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_06
changetoforrlc=2
resforrlc=z80readmem(wpeek(stack(0),6))
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(0),6),resforrlc
return
*opcode_cb_07
changetoforrlc=0
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_08
changetoforrlc=3
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_09
changetoforrlc=2
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_0A
changetoforrlc=5
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_0B
changetoforrlc=4
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_0C
changetoforrlc=7
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_0D
changetoforrlc=6
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_0E
changetoforrlc=2
resforrlc=z80readmem(wpeek(stack(0),6))
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(0),6),resforrlc
return
*opcode_cb_0F
changetoforrlc=0
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_10
changetoforrlc=3
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_11
changetoforrlc=2
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_12
changetoforrlc=5
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_13
changetoforrlc=4
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_14
changetoforrlc=7
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_15
changetoforrlc=6
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_16
changetoforrlc=2
resforrlc=z80readmem(wpeek(stack(0),6))
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(0),6),resforrlc
return
*opcode_cb_17
changetoforrlc=0
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_18
changetoforrlc=3
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_19
changetoforrlc=2
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_1A
changetoforrlc=5
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_1B
changetoforrlc=4
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_1C
changetoforrlc=7
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_1D
changetoforrlc=6
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_1E
changetoforrlc=2
resforrlc=z80readmem(wpeek(stack(0),6))
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(0),6),resforrlc
return
*opcode_cb_1F
changetoforrlc=0
resforrlc=peek(stack(0),changetoforrlc)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
return
*opcode_cb_20
regidforsla=3
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_21
regidforsla=2
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_22
regidforsla=5
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_23
regidforsla=4
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_24
regidforsla=7
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_25
regidforsla=6
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_26
slares=0
slares=z80readmem(wpeek(stack(0),6))
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(0),6),slares
return
*opcode_cb_27
regidforsla=0
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_28
regidforsla=3
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_29
regidforsla=2
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_2A
regidforsla=5
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_2B
regidforsla=4
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_2C
regidforsla=7
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_2D
regidforsla=6
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_2E
slares=0
slares=z80readmem(wpeek(stack(0),6))
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(0),6),slares
return
*opcode_cb_2F
regidforsla=0
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_30
regidforsla=3
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_31
regidforsla=2
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_32
regidforsla=5
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_33
regidforsla=4
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_34
regidforsla=7
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_35
regidforsla=6
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_36
slares=0
slares=z80readmem(wpeek(stack(0),6))
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(0),6),slares
return
*opcode_cb_37
regidforsla=0
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_38
regidforsla=3
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_39
regidforsla=2
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_3A
regidforsla=5
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_3B
regidforsla=4
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_3C
regidforsla=7
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_3D
regidforsla=6
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_3E
slares=0
slares=z80readmem(wpeek(stack(0),6))
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(0),6),slares
return
*opcode_cb_3F
regidforsla=0
slares=0
slares=peek(stack(0),regidforsla)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
return
*opcode_cb_40
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_41
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_42
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_43
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_44
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_45
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_46
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_47
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 0))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
*opcode_cb_48
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_49
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_4A
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_4B
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_4C
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_4D
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_4E
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_4F
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 1))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
*opcode_cb_50
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_51
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_52
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_53
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_54
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_55
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_56
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_57
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 2))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
*opcode_cb_58
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_59
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_5A
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_5B
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_5C
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_5D
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_5E
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_5F
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 3))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
*opcode_cb_60
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_61
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_62
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_63
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_64
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_65
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_66
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_67
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 4))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
*opcode_cb_68
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_69
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_6A
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_6B
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_6C
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_6D
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_6E
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_6F
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 5))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
*opcode_cb_70
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_71
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_72
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_73
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_74
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_75
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_76
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_77
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 6))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
*opcode_cb_78
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),3) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),3)) & (0x20 | 0x08))
return
*opcode_cb_79
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),2) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),2)) & (0x20 | 0x08))
return
*opcode_cb_7A
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),5) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),5)) & (0x20 | 0x08))
return
*opcode_cb_7B
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),4) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),4)) & (0x20 | 0x08))
return
*opcode_cb_7C
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),7) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),7)) & (0x20 | 0x08))
return
*opcode_cb_7D
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),6) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),6)) & (0x20 | 0x08))
return
*opcode_cb_7E
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
return
*opcode_cb_7F
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),0) & (1 << 7))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0)) & (0x20 | 0x08))
return
#if 0
*opcode_cb_40
*opcode_cb_41
*opcode_cb_42
*opcode_cb_43
*opcode_cb_44
*opcode_cb_45
*opcode_cb_46
*opcode_cb_47
*opcode_cb_48
*opcode_cb_49
*opcode_cb_4A
*opcode_cb_4B
*opcode_cb_4C
*opcode_cb_4D
*opcode_cb_4E
*opcode_cb_4F
*opcode_cb_50
*opcode_cb_51
*opcode_cb_52
*opcode_cb_53
*opcode_cb_54
*opcode_cb_55
*opcode_cb_56
*opcode_cb_57
*opcode_cb_58
*opcode_cb_59
*opcode_cb_5A
*opcode_cb_5B
*opcode_cb_5C
*opcode_cb_5D
*opcode_cb_5E
*opcode_cb_5F
*opcode_cb_60
*opcode_cb_61
*opcode_cb_62
*opcode_cb_63
*opcode_cb_64
*opcode_cb_65
*opcode_cb_66
*opcode_cb_67
*opcode_cb_68
*opcode_cb_69
*opcode_cb_6A
*opcode_cb_6B
*opcode_cb_6C
*opcode_cb_6D
*opcode_cb_6E
*opcode_cb_6F
*opcode_cb_70
*opcode_cb_71
*opcode_cb_72
*opcode_cb_73
*opcode_cb_74
*opcode_cb_75
*opcode_cb_76
*opcode_cb_77
*opcode_cb_78
*opcode_cb_79
*opcode_cb_7A
*opcode_cb_7B
*opcode_cb_7C
*opcode_cb_7D
*opcode_cb_7E
*opcode_cb_7F
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
//if cbopcodecallid>=0x40 & cbopcodecallid<=127{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
switch regfromopcodeforbit
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 6
regforbit=-1
swbreak
case 7
regforbit=0
swbreak
swend
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	if regforbit=-1{
	poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((z80readmem(wpeek(stack(0),6)) & (1 << cbopcodecallidforbit))) & (0xFF - (0x20 | 0x08))) | ((wpeek(stack(0),6) >> 8) & (0x20 | 0x08))
	}else{
	poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT((peek(stack(0),regforbit) & (1 << cbopcodecallidforbit))) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),regforbit)) & (0x20 | 0x08))
	}
//}
return
#endif
*opcode_cb_80
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(8-8))
return
*opcode_cb_81
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(8-8))
return
*opcode_cb_82
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(8-8))
return
*opcode_cb_83
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(8-8))
return
*opcode_cb_84
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(8-8))
return
*opcode_cb_85
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(8-8))
return
*opcode_cb_86
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(8-8))
return
*opcode_cb_87
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(8-8))
return
*opcode_cb_88
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(9-8))
return
*opcode_cb_89
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(9-8))
return
*opcode_cb_8A
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(9-8))
return
*opcode_cb_8B
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(9-8))
return
*opcode_cb_8C
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(9-8))
return
*opcode_cb_8D
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(9-8))
return
*opcode_cb_8E
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(9-8))
return
*opcode_cb_8F
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(9-8))
return
*opcode_cb_90
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(10-8))
return
*opcode_cb_91
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(10-8))
return
*opcode_cb_92
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(10-8))
return
*opcode_cb_93
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(10-8))
return
*opcode_cb_94
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(10-8))
return
*opcode_cb_95
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(10-8))
return
*opcode_cb_96
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(10-8))
return
*opcode_cb_97
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(10-8))
return
*opcode_cb_98
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(11-8))
return
*opcode_cb_99
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(11-8))
return
*opcode_cb_9A
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(11-8))
return
*opcode_cb_9B
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(11-8))
return
*opcode_cb_9C
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(11-8))
return
*opcode_cb_9D
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(11-8))
return
*opcode_cb_9E
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(11-8))
return
*opcode_cb_9F
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(11-8))
return
*opcode_cb_A0
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(12-8))
return
*opcode_cb_A1
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(12-8))
return
*opcode_cb_A2
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(12-8))
return
*opcode_cb_A3
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(12-8))
return
*opcode_cb_A4
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(12-8))
return
*opcode_cb_A5
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(12-8))
return
*opcode_cb_A6
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(12-8))
return
*opcode_cb_A7
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(12-8))
return
*opcode_cb_A8
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(13-8))
return
*opcode_cb_A9
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(13-8))
return
*opcode_cb_AA
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(13-8))
return
*opcode_cb_AB
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(13-8))
return
*opcode_cb_AC
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(13-8))
return
*opcode_cb_AD
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(13-8))
return
*opcode_cb_AE
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(13-8))
return
*opcode_cb_AF
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(13-8))
return
*opcode_cb_B0
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(14-8))
return
*opcode_cb_B1
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(14-8))
return
*opcode_cb_B2
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(14-8))
return
*opcode_cb_B3
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(14-8))
return
*opcode_cb_B4
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(14-8))
return
*opcode_cb_B5
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(14-8))
return
*opcode_cb_B6
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(14-8))
return
*opcode_cb_B7
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(14-8))
return
*opcode_cb_B8
poke stack(0),3,peek(stack(0),3) & 0xFF - (1<<(15-8))
return
*opcode_cb_B9
poke stack(0),2,peek(stack(0),2) & 0xFF - (1<<(15-8))
return
*opcode_cb_BA
poke stack(0),5,peek(stack(0),5) & 0xFF - (1<<(15-8))
return
*opcode_cb_BB
poke stack(0),4,peek(stack(0),4) & 0xFF - (1<<(15-8))
return
*opcode_cb_BC
poke stack(0),7,peek(stack(0),7) & 0xFF - (1<<(15-8))
return
*opcode_cb_BD
poke stack(0),6,peek(stack(0),6) & 0xFF - (1<<(15-8))
return
*opcode_cb_BE
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(15-8))
return
*opcode_cb_BF
poke stack(0),0,peek(stack(0),0) & 0xFF - (1<<(15-8))
return
#if 0
*opcode_cb_80
*opcode_cb_81
*opcode_cb_82
*opcode_cb_83
*opcode_cb_84
*opcode_cb_85
*opcode_cb_86
*opcode_cb_87
*opcode_cb_88
*opcode_cb_89
*opcode_cb_8A
*opcode_cb_8B
*opcode_cb_8C
*opcode_cb_8D
*opcode_cb_8E
*opcode_cb_8F
*opcode_cb_90
*opcode_cb_91
*opcode_cb_92
*opcode_cb_93
*opcode_cb_94
*opcode_cb_95
*opcode_cb_96
*opcode_cb_97
*opcode_cb_98
*opcode_cb_99
*opcode_cb_9A
*opcode_cb_9B
*opcode_cb_9C
*opcode_cb_9D
*opcode_cb_9E
*opcode_cb_9F
*opcode_cb_A0
*opcode_cb_A1
*opcode_cb_A2
*opcode_cb_A3
*opcode_cb_A4
*opcode_cb_A5
*opcode_cb_A6
*opcode_cb_A7
*opcode_cb_A8
*opcode_cb_A9
*opcode_cb_AA
*opcode_cb_AB
*opcode_cb_AC
*opcode_cb_AD
*opcode_cb_AE
*opcode_cb_AF
*opcode_cb_B0
*opcode_cb_B1
*opcode_cb_B2
*opcode_cb_B3
*opcode_cb_B4
*opcode_cb_B5
*opcode_cb_B6
*opcode_cb_B7
*opcode_cb_B8
*opcode_cb_B9
*opcode_cb_BA
*opcode_cb_BB
*opcode_cb_BC
*opcode_cb_BD
*opcode_cb_BE
*opcode_cb_BF
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
//if cbopcodecallid>=128 & cbopcodecallid<=0xBF{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
switch regfromopcodeforbit
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 6
regforbit=-1
swbreak
case 7
regforbit=0
swbreak
swend
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	if regforbit=-1{
	z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) & 0xFF - (1<<(cbopcodecallidforbit-8))
	}else{
	poke stack(0),regforbit,peek(stack(0),regforbit) & 0xFF - (1<<(cbopcodecallidforbit-8))
	}
//}
return
#endif
*opcode_cb_C0
poke stack(0),3,peek(stack(0),3) | (1<<(16-16))
return
*opcode_cb_C1
poke stack(0),2,peek(stack(0),2) | (1<<(16-16))
return
*opcode_cb_C2
poke stack(0),5,peek(stack(0),5) | (1<<(16-16))
return
*opcode_cb_C3
poke stack(0),4,peek(stack(0),4) | (1<<(16-16))
return
*opcode_cb_C4
poke stack(0),7,peek(stack(0),7) | (1<<(16-16))
return
*opcode_cb_C5
poke stack(0),6,peek(stack(0),6) | (1<<(16-16))
return
*opcode_cb_C6
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(16-16))
return
*opcode_cb_C7
poke stack(0),0,peek(stack(0),0) | (1<<(16-16))
return
*opcode_cb_C8
poke stack(0),3,peek(stack(0),3) | (1<<(17-16))
return
*opcode_cb_C9
poke stack(0),2,peek(stack(0),2) | (1<<(17-16))
return
*opcode_cb_CA
poke stack(0),5,peek(stack(0),5) | (1<<(17-16))
return
*opcode_cb_CB
poke stack(0),4,peek(stack(0),4) | (1<<(17-16))
return
*opcode_cb_CC
poke stack(0),7,peek(stack(0),7) | (1<<(17-16))
return
*opcode_cb_CD
poke stack(0),6,peek(stack(0),6) | (1<<(17-16))
return
*opcode_cb_CE
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(17-16))
return
*opcode_cb_CF
poke stack(0),0,peek(stack(0),0) | (1<<(17-16))
return
*opcode_cb_D0
poke stack(0),3,peek(stack(0),3) | (1<<(18-16))
return
*opcode_cb_D1
poke stack(0),2,peek(stack(0),2) | (1<<(18-16))
return
*opcode_cb_D2
poke stack(0),5,peek(stack(0),5) | (1<<(18-16))
return
*opcode_cb_D3
poke stack(0),4,peek(stack(0),4) | (1<<(18-16))
return
*opcode_cb_D4
poke stack(0),7,peek(stack(0),7) | (1<<(18-16))
return
*opcode_cb_D5
poke stack(0),6,peek(stack(0),6) | (1<<(18-16))
return
*opcode_cb_D6
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(18-16))
return
*opcode_cb_D7
poke stack(0),0,peek(stack(0),0) | (1<<(18-16))
return
*opcode_cb_D8
poke stack(0),3,peek(stack(0),3) | (1<<(19-16))
return
*opcode_cb_D9
poke stack(0),2,peek(stack(0),2) | (1<<(19-16))
return
*opcode_cb_DA
poke stack(0),5,peek(stack(0),5) | (1<<(19-16))
return
*opcode_cb_DB
poke stack(0),4,peek(stack(0),4) | (1<<(19-16))
return
*opcode_cb_DC
poke stack(0),7,peek(stack(0),7) | (1<<(19-16))
return
*opcode_cb_DD
poke stack(0),6,peek(stack(0),6) | (1<<(19-16))
return
*opcode_cb_DE
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(19-16))
return
*opcode_cb_DF
poke stack(0),0,peek(stack(0),0) | (1<<(19-16))
return
*opcode_cb_E0
poke stack(0),3,peek(stack(0),3) | (1<<(20-16))
return
*opcode_cb_E1
poke stack(0),2,peek(stack(0),2) | (1<<(20-16))
return
*opcode_cb_E2
poke stack(0),5,peek(stack(0),5) | (1<<(20-16))
return
*opcode_cb_E3
poke stack(0),4,peek(stack(0),4) | (1<<(20-16))
return
*opcode_cb_E4
poke stack(0),7,peek(stack(0),7) | (1<<(20-16))
return
*opcode_cb_E5
poke stack(0),6,peek(stack(0),6) | (1<<(20-16))
return
*opcode_cb_E6
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(20-16))
return
*opcode_cb_E7
poke stack(0),0,peek(stack(0),0) | (1<<(20-16))
return
*opcode_cb_E8
poke stack(0),3,peek(stack(0),3) | (1<<(21-16))
return
*opcode_cb_E9
poke stack(0),2,peek(stack(0),2) | (1<<(21-16))
return
*opcode_cb_EA
poke stack(0),5,peek(stack(0),5) | (1<<(21-16))
return
*opcode_cb_EB
poke stack(0),4,peek(stack(0),4) | (1<<(21-16))
return
*opcode_cb_EC
poke stack(0),7,peek(stack(0),7) | (1<<(21-16))
return
*opcode_cb_ED
poke stack(0),6,peek(stack(0),6) | (1<<(21-16))
return
*opcode_cb_EE
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(21-16))
return
*opcode_cb_EF
poke stack(0),0,peek(stack(0),0) | (1<<(21-16))
return
*opcode_cb_F0
poke stack(0),3,peek(stack(0),3) | (1<<(22-16))
return
*opcode_cb_F1
poke stack(0),2,peek(stack(0),2) | (1<<(22-16))
return
*opcode_cb_F2
poke stack(0),5,peek(stack(0),5) | (1<<(22-16))
return
*opcode_cb_F3
poke stack(0),4,peek(stack(0),4) | (1<<(22-16))
return
*opcode_cb_F4
poke stack(0),7,peek(stack(0),7) | (1<<(22-16))
return
*opcode_cb_F5
poke stack(0),6,peek(stack(0),6) | (1<<(22-16))
return
*opcode_cb_F6
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(22-16))
return
*opcode_cb_F7
poke stack(0),0,peek(stack(0),0) | (1<<(22-16))
return
*opcode_cb_F8
poke stack(0),3,peek(stack(0),3) | (1<<(23-16))
return
*opcode_cb_F9
poke stack(0),2,peek(stack(0),2) | (1<<(23-16))
return
*opcode_cb_FA
poke stack(0),5,peek(stack(0),5) | (1<<(23-16))
return
*opcode_cb_FB
poke stack(0),4,peek(stack(0),4) | (1<<(23-16))
return
*opcode_cb_FC
poke stack(0),7,peek(stack(0),7) | (1<<(23-16))
return
*opcode_cb_FD
poke stack(0),6,peek(stack(0),6) | (1<<(23-16))
return
*opcode_cb_FE
z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(23-16))
return
*opcode_cb_FF
poke stack(0),0,peek(stack(0),0) | (1<<(23-16))
return
#if 0
*opcode_cb_C0
*opcode_cb_C1
*opcode_cb_C2
*opcode_cb_C3
*opcode_cb_C4
*opcode_cb_C5
*opcode_cb_C6
*opcode_cb_C7
*opcode_cb_C8
*opcode_cb_C9
*opcode_cb_CA
*opcode_cb_CB
*opcode_cb_CC
*opcode_cb_CD
*opcode_cb_CE
*opcode_cb_CF
*opcode_cb_D0
*opcode_cb_D1
*opcode_cb_D2
*opcode_cb_D3
*opcode_cb_D4
*opcode_cb_D5
*opcode_cb_D6
*opcode_cb_D7
*opcode_cb_D8
*opcode_cb_D9
*opcode_cb_DA
*opcode_cb_DB
*opcode_cb_DC
*opcode_cb_DD
*opcode_cb_DE
*opcode_cb_DF
*opcode_cb_E0
*opcode_cb_E1
*opcode_cb_E2
*opcode_cb_E3
*opcode_cb_E4
*opcode_cb_E5
*opcode_cb_E6
*opcode_cb_E7
*opcode_cb_E8
*opcode_cb_E9
*opcode_cb_EA
*opcode_cb_EB
*opcode_cb_EC
*opcode_cb_ED
*opcode_cb_EE
*opcode_cb_EF
*opcode_cb_F0
*opcode_cb_F1
*opcode_cb_F2
*opcode_cb_F3
*opcode_cb_F4
*opcode_cb_F5
*opcode_cb_F6
*opcode_cb_F7
*opcode_cb_F8
*opcode_cb_F9
*opcode_cb_FA
*opcode_cb_FB
*opcode_cb_FC
*opcode_cb_FD
*opcode_cb_FE
*opcode_cb_FF
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
//if cbopcodecallid>=0xC0 & cbopcodecallid<=0xFF{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
switch regfromopcodeforbit
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 6
regforbit=-1
swbreak
case 7
regforbit=0
swbreak
swend
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	if regforbit=-1{
	z80writemem wpeek(stack(0),6),z80readmem(wpeek(stack(0),6)) | (1<<(cbopcodecallidforbit-16))
	}else{
	poke stack(0),regforbit,peek(stack(0),regforbit) | (1<<(cbopcodecallidforbit-16))
	}
#endif
//}
//poke stack(0),14,peek(stack(0),14)+1
return
*opcode_cc
if peek(stack(0),1) & (0x40){
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_cc_lbl
goto calllbldim(((peek(stack(0),1) & (0x40))!0))
return
*opcode_cd
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
return
*opcode_ce
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+z80readmem(wpeek(stack(0),10))+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),10))) & 0x10) | (((z80readmem(wpeek(stack(0),10)) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(0),10)) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_cf
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,8
return
*opcode_d0
if peek(stack(0),1) & (0x01){}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_d0_lbl
goto retlbldim(((peek(stack(0),1) & (0x01))!0)=0)
return
*opcode_d1
wpoke stack(0),4,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
return
*opcode_d2
if peek(stack(0),1) & (0x01){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_d2_lbl
goto jplbldim(((peek(stack(0),1) & (0x01))!0)=0)
return
*opcode_d3
#ifdef z80memaccess
poke addressforz80rwmads,0,z80readmem(wpeek(stack(0),10))
poke addressforz80rwmads,1,peek(stack(0),0)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),0),2
#else
poke iomemory,z80readmem(wpeek(stack(0),10)),peek(stack(0),0)
iomemorycalled=1
iomemorycalledid=z80readmem(wpeek(stack(0),10))
iomemorycalledid16=0
poke iomemorycalledid16,0,z80readmem(wpeek(stack(0),10))
poke iomemorycalledid16,1,peek(stack(0),0)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_d4
if peek(stack(0),1) & (0x01){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_d4_lbl
goto calllbldim(((peek(stack(0),1) & (0x01))!0)=0)
return
*opcode_d5
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),4)
return
*opcode_d6
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-z80readmem(wpeek(stack(0),10))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),10))) & 0x10) | (((z80readmem(wpeek(stack(0),10)) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_d7
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,0x10
return
*opcode_d8
if peek(stack(0),1) & (0x01){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_d8_lbl
goto retlbldim(((peek(stack(0),1) & (0x01))!0))
return
*opcode_d9
BC_bak1=0:BC_bak2=0:DE_bak1=0:DE_bak2=0:HL_bak1=0:HL_bak2=0
BC_bak1=wpeek(stack(0),2)
BC_bak2=wpeek(stack(1),2)
DE_bak1=wpeek(stack(0),4)
DE_bak2=wpeek(stack(1),4)
HL_bak1=wpeek(stack(0),6)
HL_bak2=wpeek(stack(1),6)
wpoke stack(0),2,BC_bak2
wpoke stack(1),2,BC_bak1
wpoke stack(0),4,DE_bak2
wpoke stack(1),4,DE_bak1
wpoke stack(0),6,HL_bak2
wpoke stack(1),6,HL_bak1
return
*opcode_da
if peek(stack(0),1) & (0x01){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_da_lbl
goto jplbldim(((peek(stack(0),1) & (0x01))!0))
return
*opcode_db
#ifdef z80memaccess
poke addressforz80rwmads,0,z80readmem(wpeek(stack(0),10))
poke addressforz80rwmads,1,peek(stack(0),0)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
poke stack(0),0,stat
#else
//await 100
iomemorycalled=2
iomemorycalledid=z80readmem(wpeek(stack(0),10))
iomemorycalledid16=0
poke iomemorycalledid16,0,z80readmem(wpeek(stack(0),10))
poke iomemorycalledid16,1,peek(stack(0),0)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),0,peek(iomemory,z80readmem(wpeek(stack(0),10)))
#endif
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dc
if peek(stack(0),1) & (0x01){
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_dc_lbl
goto calllbldim(((peek(stack(0),1) & (0x01))!0))
return
*opcode_dd
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_dd(opcodeforsubcall)
opcodeidforddopcode=opcodeforsubcall
wpoke stack(0),10,wpeek(stack(0),10)+1
gosub opcodeaddr_dd(opcodeforsubcall)
poke stack(0),14,peek(stack(0),14)+1
return
*opcode_dd_09
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=10
addfromstack=2
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return

*opcode_dd_19
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=10
addfromstack=4
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return

*opcode_dd_21
wpoke stack(1),10,z80readmem16(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_dd_22
z80writemem16 z80readmem16(wpeek(stack(0),10)),wpeek(stack(1),10)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_dd_23
wpoke stack(1),10,wpeek(stack(1),10)+1
return
*opcode_dd_24
calculated=0
calculated=peek(stack(1),11)+1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(1),11,calculated
return
*opcode_dd_25
calculated=0
calculated=peek(stack(1),11)-1
/*if calculated=-1{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=127{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x0F{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(1),11,calculated
return
*opcode_dd_26
poke stack(1),11,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_29
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=10
addfromstack=10
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(1),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(1),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_dd_2A
wpoke stack(1),10,z80readmem16(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_dd_2B
wpoke stack(1),10,wpeek(stack(1),10)-1
return
*opcode_dd_2C
calculated=0
calculated=peek(stack(1),10)+1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(1),10,calculated
return
*opcode_dd_2D
calculated=0
calculated=peek(stack(1),10)-1
/*if calculated=-1{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=127{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x0F{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(1),10,calculated
return
*opcode_dd_2E
poke stack(1),10,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_34
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
calculated=0
calculated=z80readmem(wpeek(stack(1),10)+z80eaddr)+1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
z80writemem wpeek(stack(1),10)+z80eaddr,calculated
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_35
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
calculated=0
calculated=z80readmem(wpeek(stack(1),10)+z80eaddr)-1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
z80writemem wpeek(stack(1),10)+z80eaddr,calculated
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_36
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
addressforixiyvar=0:addressforixiyvar=wpeek(stack(1),10)+z80eaddr
z80writemem wpeek(addressforixiyvar,0),z80readmem(wpeek(stack(0),10)+1)
wpoke stack(0),10,wpeek(stack(0),10)+2
return

*opcode_dd_39
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=10
addfromstack=12
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return

*opcode_dd_44
*opcode_dd_45
*opcode_dd_46
*opcode_dd_4c
*opcode_dd_4d
*opcode_dd_4e
*opcode_dd_54
*opcode_dd_55
*opcode_dd_56
*opcode_dd_5c
*opcode_dd_5d
*opcode_dd_5e
opcodeforsubcalladdcall=((opcodeforsubcall-0x40)/8)
opcodeforsubcalladdcall2=((opcodeforsubcall-0x40)-(opcodeforsubcalladdcall*8))
opcodeforsubcalladdcall3=opcodeforsubcalladdcall2-4
if opcodeforsubcall>=0x44 & opcodeforsubcall<=0x5E{
switch opcodeforsubcalladdcall
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 6
regforbit=-1
swbreak
case 7
regforbit=0
swbreak
swend
if opcodeforsubcalladdcall3=0 {if regforbit=-1{}else{poke stack(0),regforbit,peek(stack(1),11)}}
if opcodeforsubcalladdcall3=1 {if regforbit=-1{}else{poke stack(0),regforbit,peek(stack(1),10)}}
if opcodeforsubcalladdcall3=2 {z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}:if regforbit=-1{}else{poke stack(0),regforbit,z80readmem(wpeek(stack(1),10)+z80eaddr):wpoke stack(0),10,wpeek(stack(0),10)+1}}
}
return

*opcode_dd_60
poke stack(1),11,peek(stack(0),3)
return
*opcode_dd_61
poke stack(1),11,peek(stack(0),2)
return
*opcode_dd_62
poke stack(1),11,peek(stack(0),5)
return
*opcode_dd_63
poke stack(1),11,peek(stack(0),4)
return
*opcode_dd_64
poke stack(1),11,peek(stack(1),11)
return
*opcode_dd_65
poke stack(1),11,peek(stack(1),10)
return
*opcode_dd_66
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dd_67
poke stack(1),11,peek(stack(0),0)
return
*opcode_dd_68
poke stack(1),10,peek(stack(0),3)
return
*opcode_dd_69
poke stack(1),10,peek(stack(0),2)
return
*opcode_dd_6A
poke stack(1),10,peek(stack(0),5)
return
*opcode_dd_6B
poke stack(1),10,peek(stack(0),4)
return
*opcode_dd_6C
poke stack(1),10,peek(stack(1),11)
return
*opcode_dd_6D
poke stack(1),10,peek(stack(1),10)
return
*opcode_dd_6E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dd_6F
poke stack(1),10,peek(stack(0),0)
return
*opcode_dd_70
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),10)+z80eaddr),peek(stack(0),3)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dd_71
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),10)+z80eaddr),peek(stack(0),2)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dd_72
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),10)+z80eaddr),peek(stack(0),5)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dd_73
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),10)+z80eaddr),peek(stack(0),4)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dd_74
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),10)+z80eaddr),peek(stack(0),7)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_dd_75
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
addressforixiyvar=0:addressforixiyvar=(wpeek(stack(1),10)+z80eaddr)
z80writemem wpeek(addressforixiyvar,0),peek(stack(0),6)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_77
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
addressforixiyvar=0:addressforixiyvar=(wpeek(stack(1),10)+z80eaddr)
z80writemem wpeek(addressforixiyvar,0),peek(stack(0),0)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_7C
poke stack(0),0,peek(stack(1),11)
return
*opcode_dd_7D
poke stack(0),0,peek(stack(1),10)
return
*opcode_dd_7E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_84
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_dd_85
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_dd_86
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_8C
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_dd_8D
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_dd_8E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_94
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_dd_95
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_dd_96
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_9C
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_dd_9D
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_dd_9E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_A4
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&z80readmem(wpeek(stack(1),addfromstack))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_dd_A5
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&z80readmem(wpeek(stack(1),addfromstack))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_dd_A6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_AC
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_dd_AD
poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_dd_AE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_B4
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_dd_B5
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_dd_B6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_BC
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=11
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
//gosub *SZHVC2call
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(1),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | ((((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_dd_BD
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
//gosub *SZHVC2call
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(1),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | ((((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_dd_BE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=10
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
//gosub *SZHVC2call
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (z80readmem(wpeek(stack(1),addfromstack)) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack))) & 0x10) | ((((z80readmem(wpeek(stack(1),addfromstack)) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_dd_CB
opcodeforsubcall=z80readmem(wpeek(stack(0),10)+1)
clockcount=opcodecc_ddcb(opcodeforsubcall)
gosub opcodeaddr_dd_cb(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+2
poke stack(0),14,peek(stack(0),14)+1
return
//switch opcodeforsubcall
*opcode_dd_cb_00
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_01
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_02
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_03
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_04
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_05
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_06
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_07
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_08
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_09
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_0A
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_0B
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_0C
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_0D
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_0E
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_0F
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_10
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_11
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_12
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_13
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_14
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_15
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_16
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_17
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_18
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_19
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_1A
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_1B
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_1C
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_1D
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_1E
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_1F
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),10)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),10)+z80eaddr,resforrlc
return
*opcode_dd_cb_20
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_21
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_22
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_23
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_24
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_25
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_26
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_27
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_28
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_29
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_2A
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_2B
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_2C
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_2D
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_2E
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_2F
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_30
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_31
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_32
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_33
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_34
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_35
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_36
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_37
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_38
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_39
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_3A
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_3B
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_3C
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_3D
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_3E
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_3F
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),10)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),10)+z80eaddr,slares
return
*opcode_dd_cb_40
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_41
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_42
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_43
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_44
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_45
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_46
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_47
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_48
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_49
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_4A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_4B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_4C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_4D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_4E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_4F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_50
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_51
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_52
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_53
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_54
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_55
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_56
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_57
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_58
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_59
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_5A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_5B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_5C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_5D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_5E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_5F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_60
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_61
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_62
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_63
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_64
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_65
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_66
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_67
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_68
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_69
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_6A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_6B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_6C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_6D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_6E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_6F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_70
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_71
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_72
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_73
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_74
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_75
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_76
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_77
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_78
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_79
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_7A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_7B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_7C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_7D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_7E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_dd_cb_7F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
return
#if 0
*opcode_dd_cb_40
*opcode_dd_cb_41
*opcode_dd_cb_42
*opcode_dd_cb_43
*opcode_dd_cb_44
*opcode_dd_cb_45
*opcode_dd_cb_46
*opcode_dd_cb_47
*opcode_dd_cb_48
*opcode_dd_cb_49
*opcode_dd_cb_4A
*opcode_dd_cb_4B
*opcode_dd_cb_4C
*opcode_dd_cb_4D
*opcode_dd_cb_4E
*opcode_dd_cb_4F
*opcode_dd_cb_50
*opcode_dd_cb_51
*opcode_dd_cb_52
*opcode_dd_cb_53
*opcode_dd_cb_54
*opcode_dd_cb_55
*opcode_dd_cb_56
*opcode_dd_cb_57
*opcode_dd_cb_58
*opcode_dd_cb_59
*opcode_dd_cb_5A
*opcode_dd_cb_5B
*opcode_dd_cb_5C
*opcode_dd_cb_5D
*opcode_dd_cb_5E
*opcode_dd_cb_5F
*opcode_dd_cb_60
*opcode_dd_cb_61
*opcode_dd_cb_62
*opcode_dd_cb_63
*opcode_dd_cb_64
*opcode_dd_cb_65
*opcode_dd_cb_66
*opcode_dd_cb_67
*opcode_dd_cb_68
*opcode_dd_cb_69
*opcode_dd_cb_6A
*opcode_dd_cb_6B
*opcode_dd_cb_6C
*opcode_dd_cb_6D
*opcode_dd_cb_6E
*opcode_dd_cb_6F
*opcode_dd_cb_70
*opcode_dd_cb_71
*opcode_dd_cb_72
*opcode_dd_cb_73
*opcode_dd_cb_74
*opcode_dd_cb_75
*opcode_dd_cb_76
*opcode_dd_cb_77
*opcode_dd_cb_78
*opcode_dd_cb_79
*opcode_dd_cb_7A
*opcode_dd_cb_7B
*opcode_dd_cb_7C
*opcode_dd_cb_7D
*opcode_dd_cb_7E
*opcode_dd_cb_7F
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
regforbit=z80readmem(wpeek(stack(1),10)+z80readmem(wpeek(stack(0),10)))
//if cbopcodecallid>=0x40 & cbopcodecallid<=127{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
regforbit=0
/*switch regfromopcodeforbit
case 6
regforbit=-1
swbreak
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 7
regforbit=0
swbreak
swend*/
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	//if regforbit=-1{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),10)+z80eaddr) & (1 << cbopcodecallidforbit)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
	/*}else{
	z80eaddr=peek(stack(0),regforbit):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(peek(stack(0),regforbit) & (1 << cbopcodecallidforbit)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),10)+z80eaddr) >> 8) & (0x20 | 0x08))
	}*/
//}
return
#endif
*opcode_dd_cb_80
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_81
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_82
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_83
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_84
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_85
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_86
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
return
*opcode_dd_cb_87
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_88
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_89
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_8A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_8B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_8C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_8D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_8E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
return
*opcode_dd_cb_8F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_90
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_91
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_92
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_93
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_94
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_95
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_96
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
return
*opcode_dd_cb_97
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_98
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_99
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_9A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_9B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_9C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_9D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_9E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
return
*opcode_dd_cb_9F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_A0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_A1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_A2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_A3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_A4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_A5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_A6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
return
*opcode_dd_cb_A7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_A8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_A9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_AA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_AB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_AC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_AD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_AE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
return
*opcode_dd_cb_AF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_B0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_B1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_B2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_B3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_B4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_B5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_B6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
return
*opcode_dd_cb_B7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_B8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_B9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_BA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_BB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_BC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_BD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_BE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
return
*opcode_dd_cb_BF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
#if 0
*opcode_dd_cb_80
*opcode_dd_cb_81
*opcode_dd_cb_82
*opcode_dd_cb_83
*opcode_dd_cb_84
*opcode_dd_cb_85
*opcode_dd_cb_86
*opcode_dd_cb_87
*opcode_dd_cb_88
*opcode_dd_cb_89
*opcode_dd_cb_8A
*opcode_dd_cb_8B
*opcode_dd_cb_8C
*opcode_dd_cb_8D
*opcode_dd_cb_8E
*opcode_dd_cb_8F
*opcode_dd_cb_90
*opcode_dd_cb_91
*opcode_dd_cb_92
*opcode_dd_cb_93
*opcode_dd_cb_94
*opcode_dd_cb_95
*opcode_dd_cb_96
*opcode_dd_cb_97
*opcode_dd_cb_98
*opcode_dd_cb_99
*opcode_dd_cb_9A
*opcode_dd_cb_9B
*opcode_dd_cb_9C
*opcode_dd_cb_9D
*opcode_dd_cb_9E
*opcode_dd_cb_9F
*opcode_dd_cb_A0
*opcode_dd_cb_A1
*opcode_dd_cb_A2
*opcode_dd_cb_A3
*opcode_dd_cb_A4
*opcode_dd_cb_A5
*opcode_dd_cb_A6
*opcode_dd_cb_A7
*opcode_dd_cb_A8
*opcode_dd_cb_A9
*opcode_dd_cb_AA
*opcode_dd_cb_AB
*opcode_dd_cb_AC
*opcode_dd_cb_AD
*opcode_dd_cb_AE
*opcode_dd_cb_AF
*opcode_dd_cb_B0
*opcode_dd_cb_B1
*opcode_dd_cb_B2
*opcode_dd_cb_B3
*opcode_dd_cb_B4
*opcode_dd_cb_B5
*opcode_dd_cb_B6
*opcode_dd_cb_B7
*opcode_dd_cb_B8
*opcode_dd_cb_B9
*opcode_dd_cb_BA
*opcode_dd_cb_BB
*opcode_dd_cb_BC
*opcode_dd_cb_BD
*opcode_dd_cb_BE
*opcode_dd_cb_BF
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
regforbit=z80readmem(wpeek(stack(1),10)+z80readmem(wpeek(stack(0),10)))
//if cbopcodecallid>=128 & cbopcodecallid<=0xBF{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
regforbit=0
switch regfromopcodeforbit
case 6
regforbit=-1
swbreak
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 7
regforbit=0
swbreak
swend
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	if regforbit=-1{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(cbopcodecallidforbit-8))
	}else{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),regforbit,z80readmem(wpeek(stack(1),10)+z80eaddr) & 0xFF - (1<<(cbopcodecallidforbit-8))
	z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),regforbit)
	//z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),regforbit) & 0xFF - (1<<(cbopcodecallidforbit-8))
	}
//}
return
#endif
*opcode_dd_cb_C0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_C1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_C2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_C3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_C4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_C5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_C6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
return
*opcode_dd_cb_C7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_C8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_C9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_CA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_CB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_CC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_CD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_CE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
return
*opcode_dd_cb_CF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_D0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_D1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_D2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_D3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_D4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_D5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_D6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
return
*opcode_dd_cb_D7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_D8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_D9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_DA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_DB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_DC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_DD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_DE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
return
*opcode_dd_cb_DF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_E0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_E1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_E2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_E3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_E4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_E5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_E6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
return
*opcode_dd_cb_E7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_E8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_E9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_EA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_EB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_EC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_ED
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_EE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
return
*opcode_dd_cb_EF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_F0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_F1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_F2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_F3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_F4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_F5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_F6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
return
*opcode_dd_cb_F7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
*opcode_dd_cb_F8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),3)
return
*opcode_dd_cb_F9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),2)
return
*opcode_dd_cb_FA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),5)
return
*opcode_dd_cb_FB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),4)
return
*opcode_dd_cb_FC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),7)
return
*opcode_dd_cb_FD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),6)
return
*opcode_dd_cb_FE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
return
*opcode_dd_cb_FF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),0)
return
#if 0
*opcode_dd_cb_C0
*opcode_dd_cb_C1
*opcode_dd_cb_C2
*opcode_dd_cb_C3
*opcode_dd_cb_C4
*opcode_dd_cb_C5
*opcode_dd_cb_C6
*opcode_dd_cb_C7
*opcode_dd_cb_C8
*opcode_dd_cb_C9
*opcode_dd_cb_CA
*opcode_dd_cb_CB
*opcode_dd_cb_CC
*opcode_dd_cb_CD
*opcode_dd_cb_CE
*opcode_dd_cb_CF
*opcode_dd_cb_D0
*opcode_dd_cb_D1
*opcode_dd_cb_D2
*opcode_dd_cb_D3
*opcode_dd_cb_D4
*opcode_dd_cb_D5
*opcode_dd_cb_D6
*opcode_dd_cb_D7
*opcode_dd_cb_D8
*opcode_dd_cb_D9
*opcode_dd_cb_DA
*opcode_dd_cb_DB
*opcode_dd_cb_DC
*opcode_dd_cb_DD
*opcode_dd_cb_DE
*opcode_dd_cb_DF
*opcode_dd_cb_E0
*opcode_dd_cb_E1
*opcode_dd_cb_E2
*opcode_dd_cb_E3
*opcode_dd_cb_E4
*opcode_dd_cb_E5
*opcode_dd_cb_E6
*opcode_dd_cb_E7
*opcode_dd_cb_E8
*opcode_dd_cb_E9
*opcode_dd_cb_EA
*opcode_dd_cb_EB
*opcode_dd_cb_EC
*opcode_dd_cb_ED
*opcode_dd_cb_EE
*opcode_dd_cb_EF
*opcode_dd_cb_F0
*opcode_dd_cb_F1
*opcode_dd_cb_F2
*opcode_dd_cb_F3
*opcode_dd_cb_F4
*opcode_dd_cb_F5
*opcode_dd_cb_F6
*opcode_dd_cb_F7
*opcode_dd_cb_F8
*opcode_dd_cb_F9
*opcode_dd_cb_FA
*opcode_dd_cb_FB
*opcode_dd_cb_FC
*opcode_dd_cb_FD
*opcode_dd_cb_FE
*opcode_dd_cb_FF
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
regforbit=z80readmem(wpeek(stack(1),10)+z80readmem(wpeek(stack(0),10)))
//if cbopcodecallid>=0xC0 & cbopcodecallid<=0xFF{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
regforbit=0
switch regfromopcodeforbit
case 6
regforbit=-1
swbreak
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 7
regforbit=0
swbreak
swend
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	if regforbit=-1{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	z80writemem wpeek(stack(1),10)+z80eaddr,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(cbopcodecallidforbit-16))
	}else{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),regforbit,z80readmem(wpeek(stack(1),10)+z80eaddr) | (1<<(cbopcodecallidforbit-16))
	z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),regforbit)
	//z80writemem wpeek(stack(1),10)+z80eaddr,peek(stack(0),regforbit) | (1<<(cbopcodecallidforbit-16))
	}
#endif
//}
//wpoke stack(0),10,wpeek(stack(0),10)+2
return

*opcode_dd_E1
wpoke stack(1),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
return

*opcode_dd_E3
SP_bak=0
SP_bak=z80readmem16(wpeek(stack(0),12))
z80writemem16 wpeek(stack(0),12),wpeek(stack(1),10)
wpoke stack(1),10,SP_bak
return

*opcode_dd_E5
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(1),10)
return

*opcode_dd_E9
wpoke stack(0),10,wpeek(stack(1),10)
return

*opcode_dd_F9
wpoke stack(0),12,wpeek(stack(1),10)
return

*opcode_dd_FF
z80class@=0
return
*opcode_dd_00
*opcode_dd_01
*opcode_dd_02
*opcode_dd_03
*opcode_dd_04
*opcode_dd_05
*opcode_dd_06
*opcode_dd_07
*opcode_dd_08
*opcode_dd_0A
*opcode_dd_0B
*opcode_dd_0C
*opcode_dd_0D
*opcode_dd_0E
*opcode_dd_0F
*opcode_dd_10
*opcode_dd_11
*opcode_dd_12
*opcode_dd_13
*opcode_dd_14
*opcode_dd_15
*opcode_dd_16
*opcode_dd_17
*opcode_dd_18
*opcode_dd_1A
*opcode_dd_1B
*opcode_dd_1C
*opcode_dd_1D
*opcode_dd_1E
*opcode_dd_1F
*opcode_dd_20
*opcode_dd_27
*opcode_dd_28
*opcode_dd_2F
*opcode_dd_30
*opcode_dd_31
*opcode_dd_32
*opcode_dd_33
*opcode_dd_37
*opcode_dd_38
*opcode_dd_3A
*opcode_dd_3B
*opcode_dd_3C
*opcode_dd_3D
*opcode_dd_3E
*opcode_dd_3F
*opcode_dd_40
*opcode_dd_41
*opcode_dd_42
*opcode_dd_43
*opcode_dd_47
*opcode_dd_48
*opcode_dd_49
*opcode_dd_4A
*opcode_dd_4B
*opcode_dd_4F
*opcode_dd_50
*opcode_dd_51
*opcode_dd_52
*opcode_dd_53
*opcode_dd_57
*opcode_dd_58
*opcode_dd_59
*opcode_dd_5A
*opcode_dd_5B
*opcode_dd_5F
*opcode_dd_76
*opcode_dd_78
*opcode_dd_79
*opcode_dd_7A
*opcode_dd_7B
*opcode_dd_7F
*opcode_dd_80
*opcode_dd_81
*opcode_dd_82
*opcode_dd_83
*opcode_dd_87
*opcode_dd_88
*opcode_dd_89
*opcode_dd_8A
*opcode_dd_8B
*opcode_dd_8F
*opcode_dd_90
*opcode_dd_91
*opcode_dd_92
*opcode_dd_93
*opcode_dd_97
*opcode_dd_98
*opcode_dd_99
*opcode_dd_9A
*opcode_dd_9B
*opcode_dd_9F
*opcode_dd_A0
*opcode_dd_A1
*opcode_dd_A2
*opcode_dd_A3
*opcode_dd_A7
*opcode_dd_A8
*opcode_dd_A9
*opcode_dd_AA
*opcode_dd_AB
*opcode_dd_AF
*opcode_dd_B0
*opcode_dd_B1
*opcode_dd_B2
*opcode_dd_B3
*opcode_dd_B7
*opcode_dd_B8
*opcode_dd_B9
*opcode_dd_BA
*opcode_dd_BB
*opcode_dd_BF
*opcode_dd_C0
*opcode_dd_C1
*opcode_dd_C2
*opcode_dd_C3
*opcode_dd_C4
*opcode_dd_C5
*opcode_dd_C6
*opcode_dd_C7
*opcode_dd_C8
*opcode_dd_C9
*opcode_dd_CA
*opcode_dd_CC
*opcode_dd_CD
*opcode_dd_CE
*opcode_dd_CF
*opcode_dd_D0
*opcode_dd_D1
*opcode_dd_D2
*opcode_dd_D3
*opcode_dd_D4
*opcode_dd_D5
*opcode_dd_D6
*opcode_dd_D7
*opcode_dd_D8
*opcode_dd_D9
*opcode_dd_DA
*opcode_dd_DB
*opcode_dd_DC
*opcode_dd_DD
*opcode_dd_DE
*opcode_dd_DF
*opcode_dd_E0
*opcode_dd_E2
*opcode_dd_E4
*opcode_dd_E6
*opcode_dd_E7
*opcode_dd_E8
*opcode_dd_EA
*opcode_dd_EB
*opcode_dd_EC
*opcode_dd_ED
*opcode_dd_EE
*opcode_dd_EF
*opcode_dd_F0
*opcode_dd_F1
*opcode_dd_F2
*opcode_dd_F3
*opcode_dd_F4
*opcode_dd_F5
*opcode_dd_F6
*opcode_dd_F7
*opcode_dd_F8
*opcode_dd_FA
*opcode_dd_FB
*opcode_dd_FC
*opcode_dd_FD
*opcode_dd_FE
//*opcode_dd_FF
opcodeforsubcalladdcall=((opcodeforsubcall-0x40)/8)
opcodeforsubcalladdcall2=((opcodeforsubcall-0x40)-(opcodeforsubcalladdcall*8))-4
#ifdef __useslowz80emulation_flag__
opcode=z80readmem(startaddr)
gosub *z80opcodeinterpretsw
#else
opcode=z80readmem(wpeek(stack(0),10)-1)
lpoke jumplabel,0,lpeek(opcodeaddr(opcode),0)
//wpoke stack(0),10,wpeek(stack(0),10)+1
gosub jumplabel
#endif
return
*opcode_de
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-z80readmem(wpeek(stack(0),10))-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),10))) & 0x10) | (((z80readmem(wpeek(stack(0),10)) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_df
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,0x18
return
*opcode_e0
if (peek(stack(0),1) & (0x04)){}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_e0_lbl
goto retlbldim(((peek(stack(0),1) & (0x04))!0)=0)
return
*opcode_e1
wpoke stack(0),6,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
return
*opcode_e2
if (peek(stack(0),1) & (0x04)){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_e2_lbl
goto jplbldim(((peek(stack(0),1) & (0x04))!0)=0)
return
*opcode_e3
bak_sphl1=wpeek(stack(0),6)
bak_sphl2=z80readmem16(wpeek(stack(0),12))
z80writemem16 wpeek(stack(0),12),bak_sphl1
wpoke stack(0),6,bak_sphl2
return
*opcode_e4
if (peek(stack(0),1) & (0x04)){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_e4_lbl
goto calllbldim(((peek(stack(0),1) & (0x04))!0)=0)
return
*opcode_e5
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),6)
return
*opcode_e6
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&z80readmem(wpeek(stack(0),10))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
wpoke stack(0),10,wpeek(stack(0),10)+1
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_e7
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,0x20
return
*opcode_e8
if (peek(stack(0),1) & (0x04)){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_e8_lbl
goto retlbldim(((peek(stack(0),1) & (0x04))!0))
return
*opcode_e9
wpoke stack(0),10,wpeek(stack(0),6)
return
*opcode_ea
if (peek(stack(0),1) & (0x04)){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_ea_lbl
goto jplbldim(((peek(stack(0),1) & (0x04))!0))
return
*opcode_eb
bak_sphl1=wpeek(stack(0),6)
bak_sphl2=wpeek(stack(0),4)
wpoke stack(0),4,bak_sphl1
wpoke stack(0),6,bak_sphl2
return
*opcode_ec
if (peek(stack(0),1) & (0x04)){
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_ec_lbl
goto calllbldim(((peek(stack(0),1) & (0x04))!0))
return
*opcode_ed
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_ed(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+1
gosub opcodeaddr_ed(opcodeforsubcall)
poke stack(0),14,peek(stack(0),14)+1
return
*opcode_ed_40
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
poke stack(0),3,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
poke stack(0),3,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_41
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),3),2
#else
poke iomemory,peek(stack(0),2),peek(stack(0),3)
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_42
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)-wpeek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | 0x02 | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack)) & (wpeek(stack(0),addtostack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall*/
return
*opcode_ed_43
z80writemem16 z80readmem16(wpeek(stack(0),10)),wpeek(stack(0),2)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_44
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_45
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_46
z80runmode(threadidforrunthez80)=0
return
*opcode_ed_47
poke stack(0),15,peek(stack(0),0)
return
*opcode_ed_48
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
poke stack(0),2,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
poke stack(0),2,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_49
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),2),2
#else
poke iomemory,peek(stack(0),2),peek(stack(0),2)
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_4A
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack) ^ 0x8000) & (wpeek(stack(0),addfromstack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2*/
return
*opcode_ed_4B
wpoke stack(0),2,z80readmem16(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_4C
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_4D
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_4E
if z80runmode(threadidforrunthez80)=1{z80runmode(threadidforrunthez80)=0}else{if z80runmode(threadidforrunthez80)=0{z80runmode(threadidforrunthez80)=1}}
return
*opcode_ed_4F
poke stack(0),14,peek(stack(0),0)
r2forcalc(threadidforrunthez80)=peek(stack(0),0) & 0x80
return
*opcode_ed_50
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
poke stack(0),5,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
poke stack(0),5,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_51
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),5),2
#else
poke iomemory,peek(stack(0),2),peek(stack(0),5)
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_52
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)-wpeek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | 0x02 | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack)) & (wpeek(stack(0),addtostack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall*/
return
*opcode_ed_53
z80writemem16 z80readmem16(wpeek(stack(0),10)),wpeek(stack(0),4)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_54
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_55
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_56
z80runmode(threadidforrunthez80)=1
return
*opcode_ed_57
poke stack(0),0,peek(stack(0),15)
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZ(peek(stack(0),0)) | (peek(stack(1),15) << 2)
return
*opcode_ed_58
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
poke stack(0),4,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
poke stack(0),4,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_59
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),4),2
#else
poke iomemory,peek(stack(0),2),peek(stack(0),4)
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_5A
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=4
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack) ^ 0x8000) & (wpeek(stack(0),addfromstack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2*/
return
*opcode_ed_5B
wpoke stack(0),4,z80readmem16(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_5C
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_5D
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_5E
z80runmode(threadidforrunthez80)=2
return
*opcode_ed_5F
poke stack(0),0,(peek(stack(0),14) & 0x7F) | r2forcalc(threadidforrunthez80)
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZ(peek(stack(0),0)) | (peek(stack(1),15) << 2)
return
*opcode_ed_60
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
poke stack(0),7,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
poke stack(0),7,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_61
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),7),2
#else
poke iomemory,peek(stack(0),2),peek(stack(0),7)
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_62
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)-wpeek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | 0x02 | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack)) & (wpeek(stack(0),addtostack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall*/
return
*opcode_ed_63
z80writemem16 z80readmem16(wpeek(stack(0),10)),wpeek(stack(0),6)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_64
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_65
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_66
z80runmode(threadidforrunthez80)=0
return
*opcode_ed_67
rrdn=z80readmem(wpeek(stack(0),6))
z80writemem wpeek(stack(0),6),(rrdn >> 4) | (peek(stack(0),0) << 4)
poke stack(0),0,(peek(stack(0),0) & 0xf0) | (rrdn & 0x0f)
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(stack(0),0))
return
*opcode_ed_68
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
poke stack(0),6,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
poke stack(0),6,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_69
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),6),2
#else
poke iomemory,peek(stack(0),2),peek(stack(0),6)
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_6A
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=6
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack) ^ 0x8000) & (wpeek(stack(0),addfromstack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2*/
return
*opcode_ed_6B
wpoke stack(0),6,z80readmem16(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_6C
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_6D
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_6E
if z80runmode(threadidforrunthez80)=1{z80runmode(threadidforrunthez80)=0}else{if z80runmode(threadidforrunthez80)=0{z80runmode(threadidforrunthez80)=1}}
return
*opcode_ed_6F
rrdn=z80readmem(wpeek(stack(0),6))
z80writemem wpeek(stack(0),6),(rrdn << 4) | (peek(stack(0),0) & 0x0f)
poke stack(0),0,(peek(stack(0),0) & 0xf0) | (rrdn >> 4)
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(stack(0),0))
return
*opcode_ed_70
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
//poke stack(0),1,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
//poke stack(0),1,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_71
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
#ifdef __GCNZ80ISCMOS__
z80memaccess (addressforz80rwmads & 0xFFFF),0xFF,2
#else
z80memaccess (addressforz80rwmads & 0xFFFF),0,2
#endif
#else
#ifdef __GCNZ80ISCMOS__
poke iomemory,peek(stack(0),2),0xFF
#else
poke iomemory,peek(stack(0),2),0
#endif
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_72
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)-wpeek(stack(0),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | 0x02 | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack)) & (wpeek(stack(0),addtostack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall*/
return
*opcode_ed_73
z80writemem16 z80readmem16(wpeek(stack(0),10)),wpeek(stack(0),12)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_74
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_75
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_76
z80runmode(threadidforrunthez80)=1
return
*opcode_ed_77
goto *opcode_00
return
*opcode_ed_78
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),0,3
z80stature=stat
poke stack(0),0,z80stature
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(z80stature)
#else
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
//await 100
/*if peek(iomemory,peek(stack(0),2))=0{poke stack(0),1,peek(stack(0),1) ^ (0x40)}
if peek(iomemory,peek(stack(0),2))>=128{poke stack(0),1,peek(stack(0),1) ^ (0x80)}*/
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZP(peek(iomemory,peek(stack(0),2)))
poke stack(0),0,peek(iomemory,peek(stack(0),2))
#endif
return
*opcode_ed_79
#ifdef z80memaccess
addressforz80rwmads=wpeek(stack(0),2)
z80memaccess (addressforz80rwmads & 0xFFFF),peek(stack(0),0),2
#else
poke iomemory,peek(stack(0),2),peek(stack(0),0)
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=wpeek(stack(0),2)
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
return
*opcode_ed_7A
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=6
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=wpeek(stack(0),addtostack)+wpeek(stack(0),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
calculatedcontext=0:if (calculated & 0xffff) {calculatedcontext=0}else{ calculatedcontext= 0x40}:poke stack(0),1,((((wpeek(stack(0),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x80 | 0x20 | 0x08)) | (calculatedcontext) | (((wpeek(stack(0),addfromstack) ^ wpeek(stack(0),addtostack) ^ 0x8000) & (wpeek(stack(0),addfromstack) ^ calculated) &0x8000) >> 13))
//poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(0),addfromstack) ^ calculated) & 0x80) >> 5)
wpoke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVCcall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2*/
return
*opcode_ed_7B
wpoke stack(0),12,z80readmem16(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_7C
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=0
//poke stack(0),addtostack,0
calculated=addold-peek(stack(0),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((addold ^ calculated ^ peek(stack(0),addfromstack)) & 0x10) | (((peek(stack(0),addfromstack) ^ addold) & (addold ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_ed_7D
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
poke stack(1),14,peek(stack(1),15)
return
*opcode_ed_7E
z80runmode(threadidforrunthez80)=2
return
*opcode_ed_7F
poke stack(0),14,peek(stack(0),14)
return

*opcode_ed_A0
z80writemem wpeek(stack(0),4),z80readmem(wpeek(stack(0),6))
poke stack(0),1,peek(stack(0),1) & (0x80 | 0x40 | 0x01)
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
wpoke stack(0),4,wpeek(stack(0),4)+1
wpoke stack(0),6,wpeek(stack(0),6)+1
wpoke stack(0),2,wpeek(stack(0),2)-1
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
//wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_A1
resforcpiis0=0
valforcpi=z80readmem(wpeek(stack(0),6))
resforcpi=peek(stack(0),0)-valforcpi
if resforcpi=0{resforcpiis0=1}
wpoke stack(0),2,wpeek(stack(0),2)-1
wpoke stack(0),6,wpeek(stack(0),6)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | (SZ(peek(resforcpi,0)) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0) ^ valforcpi ^ resforcpi) & 0x10) | 0x02
if (peek(stack(0),1) & 0x10) {resforcpi -= 1}
	if(resforcpi & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
	if(resforcpi & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
return
*opcode_ed_A2
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
wpoke iomemorycalledid16,0,wpeek(stack(0),2)
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),0,3
dataofiomemory=stat
#else
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
//await 100
dataofiomemory=peek(iomemory,peek(stack(0),2))
#endif
poke stack(0),3,peek(stack(0),3)-1
z80writemem wpeek(stack(0),6),dataofiomemory
wpoke stack(0),6,wpeek(stack(0),6)+1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=((peek(stack(0),2)+1)&0xFF)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP((tforz80outi & 0x07) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) + 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((irep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
//peek iomemorycalledid16,1,iomemorycalledid
return
*opcode_ed_A3
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
wpoke iomemorycalledid16,0,wpeek(stack(0),2)
//peek iomemorycalledid16,1,iomemorycalledid
poke stack(0),3,peek(stack(0),3)-1
dataofiomemory=0:dataofiomemory=z80readmem(wpeek(stack(0),6))
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),dataofiomemory,2
#else
poke iomemory,peek(stack(0),2),dataofiomemory
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
wpoke stack(0),6,wpeek(stack(0),6)+1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=peek(stack(0),6)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP(((tforz80outi & 0x07) & 0xFF) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) + 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((irep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
return

*opcode_ed_A8
z80writemem wpeek(stack(0),4),z80readmem(wpeek(stack(0),6))
poke stack(0),1,peek(stack(0),1) & (0x80 | 0x40 | 0x01)
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
wpoke stack(0),4,wpeek(stack(0),4)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
wpoke stack(0),2,wpeek(stack(0),2)-1
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
//wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_A9
resforcpiis0=0
valforcpi=z80readmem(wpeek(stack(0),6))
resforcpi=peek(stack(0),0)-valforcpi
if resforcpi=0{resforcpiis0=1}
wpoke stack(0),2,wpeek(stack(0),2)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | (SZ(peek(resforcpi,0)) & ( 0xFF - (0x20 | 0x08))) | ((peek(stack(0),0) ^ valforcpi ^ resforcpi) & 0x10) | 0x02
if (peek(stack(0),1) & 0x10) {resforcpi -= 1}
	if(resforcpi & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
	if(resforcpi & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
return
*opcode_ed_AA
/*//await 100
z80writemem wpeek(stack(0),6),peek(iomemory,peek(stack(0),4))
poke stack(0),3,peek(stack(0),3)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
iomemorycalled=2
iomemorycalledid=peek(stack(0),4)
iomemorycalledid16=0
peek iomemorycalledid16,0,wpeek(stack(0),0)
peek iomemorycalledid16,1,iomemorycalledid*/
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
wpoke iomemorycalledid16,0,wpeek(stack(0),2)
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),0,3
dataofiomemory=stat
#else
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
//await 100
dataofiomemory=peek(iomemory,peek(stack(0),2))
#endif
z80writemem wpeek(stack(0),6),dataofiomemory
poke stack(0),3,peek(stack(0),3)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=((peek(stack(0),2)-1)&0xFF)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP((tforz80outi & 0x07) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) - 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((drep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
return
*opcode_ed_AB
poke stack(0),3,peek(stack(0),3)-1
dataofiomemory=0:dataofiomemory=z80readmem(wpeek(stack(0),6))
//poke iomemory,peek(stack(0),2),dataofiomemory
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),dataofiomemory,2
#else
poke iomemory,peek(stack(0),2),dataofiomemory
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
//peek iomemorycalledid16,1,iomemorycalledid
wpoke stack(0),6,wpeek(stack(0),6)-1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=peek(stack(0),6)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP(((tforz80outi & 0x07) & 0xFF) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) - 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((drep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
return

*opcode_ed_B0
z80writemem wpeek(stack(0),4),z80readmem(wpeek(stack(0),6))
poke stack(0),1,peek(stack(0),1) & (0x80 | 0x40 | 0x01)
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
wpoke stack(0),4,wpeek(stack(0),4)+1
wpoke stack(0),6,wpeek(stack(0),6)+1
wpoke stack(0),2,wpeek(stack(0),2)-1
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
if wpeek(stack(0),2)=0{}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
//wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_B1
resforcpiis0=0
valforcpi=z80readmem(wpeek(stack(0),6))
resforcpi=peek(stack(0),0)-valforcpi
if resforcpi=0{resforcpiis0=1}
wpoke stack(0),2,wpeek(stack(0),2)-1
wpoke stack(0),6,wpeek(stack(0),6)+1
poke stack(0),1,(peek(stack(0),1) & 0x01) | (SZ(peek(resforcpi,0)) & (0xFF - (0x20 | 0x08))) | ((peek(stack(0),0) ^ valforcpi ^ resforcpi) & 0x10) | 0x02
if (peek(stack(0),1) & 0x10) {resforcpi -= 1}
	if(resforcpi & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
	if(resforcpi & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
if wpeek(stack(0),2)!=0 & (peek(stack(0),1) & 0x40)!=0x40{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
/*if wpeek(stack(0),2)=0{}else{if (peek(stack(0),1) & 0x40){}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}}*/
return
*opcode_ed_B2
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
wpoke iomemorycalledid16,0,wpeek(stack(0),2)
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),0,3
dataofiomemory=stat
#else
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
//await 100
dataofiomemory=peek(iomemory,peek(stack(0),2))
#endif
poke stack(0),3,peek(stack(0),3)-1
z80writemem wpeek(stack(0),6),dataofiomemory
wpoke stack(0),6,wpeek(stack(0),6)+1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=((peek(stack(0),2)+1)&0xFF)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP((tforz80outi & 0x07) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) + 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((irep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
//peek iomemorycalledid16,1,iomemorycalledid
if peek(stack(0),3)=0{}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
return
*opcode_ed_B3
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
wpoke iomemorycalledid16,0,wpeek(stack(0),2)
//peek iomemorycalledid16,1,iomemorycalledid
poke stack(0),3,peek(stack(0),3)-1
dataofiomemory=0:dataofiomemory=z80readmem(wpeek(stack(0),6))
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),dataofiomemory,2
#else
poke iomemory,peek(stack(0),2),dataofiomemory
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
wpoke stack(0),6,wpeek(stack(0),6)+1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=peek(stack(0),6)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP(((tforz80outi & 0x07) & 0xFF) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) + 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((irep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
if peek(stack(0),3)=0{}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
return

*opcode_ed_B8
z80writemem wpeek(stack(0),4),z80readmem(wpeek(stack(0),6))
poke stack(0),1,peek(stack(0),1) & (0x80 | 0x40 | 0x01)
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
if((peek(stack(0),0)+z80readmem(wpeek(stack(0),6))) & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
wpoke stack(0),4,wpeek(stack(0),4)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
wpoke stack(0),2,wpeek(stack(0),2)-1
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
if wpeek(stack(0),2)=0{}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
//wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_ed_B9
resforcpiis0=0
valforcpi=z80readmem(wpeek(stack(0),6))
resforcpi=peek(stack(0),0)-valforcpi
if resforcpi=0{resforcpiis0=1}
wpoke stack(0),2,wpeek(stack(0),2)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
poke stack(0),1,(peek(stack(0),1) & 0x01) | (SZ(peek(resforcpi,0)) & ( 0xFF - (0x20 | 0x08))) | ((peek(stack(0),0) ^ valforcpi ^ resforcpi) & 0x10) | 0x02
if (peek(stack(0),1) & 0x10) {resforcpi -= 1}
	if(resforcpi & 0x02) {poke stack(0),1,peek(stack(0),1) | 0x20}
	if(resforcpi & 0x08) {poke stack(0),1,peek(stack(0),1) | 0x08}
if (wpeek(stack(0),2)){poke stack(0),1,peek(stack(0),1) | 0x04}
if wpeek(stack(0),2)!=0 & (peek(stack(0),1) & 0x40)!=0x40{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
/*if wpeek(stack(0),2)=0{}else{if (peek(stack(0),1) & 0x40){}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}}*/
return
*opcode_ed_BA
/*//await 100
z80writemem wpeek(stack(0),6),peek(iomemory,peek(stack(0),4))
poke stack(0),3,peek(stack(0),3)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
iomemorycalled=2
iomemorycalledid=peek(stack(0),4)
iomemorycalledid16=0
peek iomemorycalledid16,0,wpeek(stack(0),0)
peek iomemorycalledid16,1,iomemorycalledid*/
iomemorycalled=2
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
wpoke iomemorycalledid16,0,wpeek(stack(0),2)
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),0,3
dataofiomemory=stat
#else
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
//await 100
dataofiomemory=peek(iomemory,peek(stack(0),2))
#endif
z80writemem wpeek(stack(0),6),dataofiomemory
poke stack(0),3,peek(stack(0),3)-1
wpoke stack(0),6,wpeek(stack(0),6)-1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=((peek(stack(0),2)-1)&0xFF)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP((tforz80outi & 0x07) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) - 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((drep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
if peek(stack(0),3)=0{}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
return
*opcode_ed_BB
poke stack(0),3,peek(stack(0),3)-1
dataofiomemory=0:dataofiomemory=z80readmem(wpeek(stack(0),6))
//poke iomemory,peek(stack(0),2),dataofiomemory
iomemorycalled=1
iomemorycalledid=peek(stack(0),2)
iomemorycalledid16=0
wpoke iomemorycalledid16,0,wpeek(stack(0),2)
#ifdef z80memaccess
z80memaccess (iomemorycalledid16 & 0xFFFF),dataofiomemory,2
#else
poke iomemory,peek(stack(0),2),dataofiomemory
_z80iomemorycalledid@=iomemorycalledid16:_z80iomemorycalled@=iomemorycalled:gosub z80iochecklabel2
#endif
//peek iomemorycalledid16,1,iomemorycalledid
wpoke stack(0),6,wpeek(stack(0),6)-1
poke stack(0),1,SZ(peek(stack(0),3))
/*tforz80outi=peek(stack(0),6)+dataofiomemory
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
	if(tforz80outi & 0x100) {poke stack(0),1,peek(stack(0),1)| (0x10 | 0x01)}
poke stack(0),1,peek(stack(0),1)|SZP(((tforz80outi & 0x07) & 0xFF) ^ peek(stack(0),3)) & 0x04*/
if (dataofiomemory & 0x80){poke stack(0),1,peek(stack(0),1)|0x02}
if((((peek(stack(0),2) - 1) & 0xff) + dataofiomemory) & 0x100) {poke stack(0),1,peek(stack(0),1)| 0x10 | 0x01}
		if((drep_tmp((peek(stack(0),2) & 3),(dataofiomemory & 3)) ^ breg_tmp(peek(stack(0),3)) ^ (peek(stack(0),2) >> 2) ^ (dataofiomemory >> 2)) & 1) {poke stack(0),1,peek(stack(0),1)|0x04}
if peek(stack(0),3)=0{}else{
wpoke stack(0),10,wpeek(stack(0),10)-2
}
return
*opcode_ed_00
*opcode_ed_01
*opcode_ed_02
*opcode_ed_03
*opcode_ed_04
*opcode_ed_05
*opcode_ed_06
*opcode_ed_07
*opcode_ed_08
*opcode_ed_09
*opcode_ed_0A
*opcode_ed_0B
*opcode_ed_0C
*opcode_ed_0D
*opcode_ed_0E
*opcode_ed_0F
*opcode_ed_10
*opcode_ed_11
*opcode_ed_12
*opcode_ed_13
*opcode_ed_14
*opcode_ed_15
*opcode_ed_16
*opcode_ed_17
*opcode_ed_18
*opcode_ed_19
*opcode_ed_1A
*opcode_ed_1B
*opcode_ed_1C
*opcode_ed_1D
*opcode_ed_1E
*opcode_ed_1F
*opcode_ed_20
*opcode_ed_21
*opcode_ed_22
*opcode_ed_23
*opcode_ed_24
*opcode_ed_25
*opcode_ed_26
*opcode_ed_27
*opcode_ed_28
*opcode_ed_29
*opcode_ed_2A
*opcode_ed_2B
*opcode_ed_2C
*opcode_ed_2D
*opcode_ed_2E
*opcode_ed_2F
*opcode_ed_30
*opcode_ed_31
*opcode_ed_32
*opcode_ed_33
*opcode_ed_34
*opcode_ed_35
*opcode_ed_36
*opcode_ed_37
*opcode_ed_38
*opcode_ed_39
*opcode_ed_3A
*opcode_ed_3B
*opcode_ed_3C
*opcode_ed_3D
*opcode_ed_3E
*opcode_ed_3F
*opcode_ed_80
*opcode_ed_81
*opcode_ed_82
*opcode_ed_83
*opcode_ed_84
*opcode_ed_85
*opcode_ed_86
*opcode_ed_87
*opcode_ed_88
*opcode_ed_89
*opcode_ed_8A
*opcode_ed_8B
*opcode_ed_8C
*opcode_ed_8D
*opcode_ed_8E
*opcode_ed_8F
*opcode_ed_90
*opcode_ed_91
*opcode_ed_92
*opcode_ed_93
*opcode_ed_94
*opcode_ed_95
*opcode_ed_96
*opcode_ed_97
*opcode_ed_98
*opcode_ed_99
*opcode_ed_9A
*opcode_ed_9B
*opcode_ed_9C
*opcode_ed_9D
*opcode_ed_9E
*opcode_ed_9F
*opcode_ed_A4
*opcode_ed_A5
*opcode_ed_A6
*opcode_ed_A7
*opcode_ed_AC
*opcode_ed_AD
*opcode_ed_AE
*opcode_ed_AF
*opcode_ed_B4
*opcode_ed_B5
*opcode_ed_B6
*opcode_ed_B7
*opcode_ed_BC
*opcode_ed_BD
*opcode_ed_BE
*opcode_ed_BF
*opcode_ed_C0
*opcode_ed_C1
*opcode_ed_C2
*opcode_ed_C3
*opcode_ed_C4
*opcode_ed_C5
*opcode_ed_C6
*opcode_ed_C7
*opcode_ed_C8
*opcode_ed_C9
*opcode_ed_CA
*opcode_ed_CB
*opcode_ed_CC
*opcode_ed_CD
*opcode_ed_CE
*opcode_ed_CF
*opcode_ed_D0
*opcode_ed_D1
*opcode_ed_D2
*opcode_ed_D3
*opcode_ed_D4
*opcode_ed_D5
*opcode_ed_D6
*opcode_ed_D7
*opcode_ed_D8
*opcode_ed_D9
*opcode_ed_DA
*opcode_ed_DB
*opcode_ed_DC
*opcode_ed_DD
*opcode_ed_DE
*opcode_ed_DF
*opcode_ed_E0
*opcode_ed_E1
*opcode_ed_E2
*opcode_ed_E3
*opcode_ed_E4
*opcode_ed_E5
*opcode_ed_E6
*opcode_ed_E7
*opcode_ed_E8
*opcode_ed_E9
*opcode_ed_EA
*opcode_ed_EB
*opcode_ed_EC
*opcode_ed_ED
*opcode_ed_EE
*opcode_ed_EF
*opcode_ed_F0
*opcode_ed_F1
*opcode_ed_F2
*opcode_ed_F3
*opcode_ed_F4
*opcode_ed_F5
*opcode_ed_F6
*opcode_ed_F7
*opcode_ed_F8
*opcode_ed_F9
*opcode_ed_FA
*opcode_ed_FB
*opcode_ed_FC
*opcode_ed_FD
*opcode_ed_FE
*opcode_ed_FF
return
poke stack(0),14,peek(stack(0),14)+1
return
*opcode_ee
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^z80readmem(wpeek(stack(0),10))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_ef
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,0x28
return
*opcode_f0
if (peek(stack(0),1) & (0x80)){}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_f0_lbl
goto retlbldim(((peek(stack(0),1) & (0x80))!0)=0)
return
*opcode_f1
poke stack(0),0,z80readmem(wpeek(stack(0),12)+1)
poke stack(0),1,z80readmem(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
return
*opcode_f2
if (peek(stack(0),1) & (0x80)){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_f2_lbl
goto jplbldim(((peek(stack(0),1) & (0x80))!0)=0)
return
*opcode_f3
poke stack(1),14,0
poke stack(1),15,0
return
*opcode_f4
if (peek(stack(0),1) & (0x80)){wpoke stack(0),10,wpeek(stack(0),10)+2}else{
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}
return
*opcode_f4_lbl
goto calllbldim(((peek(stack(0),1) & (0x80))!0)=0)
return
*opcode_f5
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem wpeek(stack(0),12)+1,peek(stack(0),0)
z80writemem wpeek(stack(0),12),peek(stack(0),1)
return
*opcode_f6
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=0
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|z80readmem(wpeek(stack(0),10))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_f7
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,0x30
return
*opcode_f8
if (peek(stack(0),1) & (0x80)){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
}
return
*opcode_f8_lbl
goto retlbldim(((peek(stack(0),1) & (0x80))!0))
return
*opcode_f9
wpoke stack(0),12,wpeek(stack(0),6)
return
*opcode_fa
if (peek(stack(0),1) & (0x80)){
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_fa_lbl
goto jplbldim(((peek(stack(0),1) & (0x80))!0))
return
*opcode_fb
poke stack(1),14,3
poke stack(1),15,1
z80afterei=1
return
*opcode_fc
if (peek(stack(0),1) & (0x80)){
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(0),10)+2
wpoke stack(0),10,z80readmem16(wpeek(stack(0),10))
}else{wpoke stack(0),10,wpeek(stack(0),10)+2}
return
*opcode_fc_lbl
goto calllbldim(((peek(stack(0),1) & (0x80))!0))
return
*opcode_fd
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_fd(opcodeforsubcall)
opcodeidforddopcode=opcodeforsubcall
wpoke stack(0),10,wpeek(stack(0),10)+1
gosub opcodeaddr_fd(opcodeforsubcall)
poke stack(0),14,peek(stack(0),14)+1
return
//switch opcodeforsubcall
*opcode_fd_09
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=12
addfromstack=2
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return

*opcode_fd_19
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=12
addfromstack=4
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return

*opcode_fd_21
wpoke stack(1),12,z80readmem16(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_fd_22
z80writemem16 z80readmem16(wpeek(stack(0),10)),wpeek(stack(1),12)
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_fd_23
wpoke stack(1),12,wpeek(stack(1),12)+1
return
*opcode_fd_24
calculated=0
calculated=peek(stack(1),13)+1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(1),13,calculated
return
*opcode_fd_25
calculated=0
calculated=peek(stack(1),13)-1
/*if calculated=-1{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=127{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x0F{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(1),13,calculated
return
*opcode_fd_26
poke stack(1),13,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_29
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=12
addfromstack=12
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(1),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(1),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_fd_2A
wpoke stack(1),12,z80readmem16(z80readmem16(wpeek(stack(0),10)))
wpoke stack(0),10,wpeek(stack(0),10)+2
return
*opcode_fd_2B
wpoke stack(1),12,wpeek(stack(1),12)-1
return
*opcode_fd_2C
calculated=0
calculated=peek(stack(1),12)+1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
poke stack(1),12,calculated
return
*opcode_fd_2D
calculated=0
calculated=peek(stack(1),12)-1
/*if calculated=-1{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=127{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x0F{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
poke stack(1),12,calculated
return
*opcode_fd_2E
poke stack(1),12,z80readmem(wpeek(stack(0),10))
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_34
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
calculated=0
calculated=z80readmem(wpeek(stack(1),12)+z80eaddr)+1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_inc(peek(calculated,0))
z80writemem wpeek(stack(1),12)+z80eaddr,calculated
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_35
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
calculated=0
calculated=z80readmem(wpeek(stack(1),12)+z80eaddr)-1
/*if calculated=256{poke stack(0),1,(peek(stack(0),1) & 0x01)}
if calculated=128{poke stack(0),1,(peek(stack(0),1) | 0x04)}
if (calculated & 0x0F) = 0x00{poke stack(0),1,(peek(stack(0),1) | 0x10)}*/
poke stack(0),1,(peek(stack(0),1) & 0x01) | SZHV_dec(peek(calculated,0))
z80writemem wpeek(stack(1),12)+z80eaddr,calculated
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_36
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
addressforixiyvar=0:addressforixiyvar=wpeek(stack(1),12)+z80eaddr
z80writemem wpeek(addressforixiyvar,0),z80readmem(wpeek(stack(0),10)+1)
wpoke stack(0),10,wpeek(stack(0),10)+2
return

*opcode_fd_39
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=12
addfromstack=12
addold=peek(stack(1),addtostack)
calculated=wpeek(stack(1),addtostack)+wpeek(stack(0),addfromstack)
if peek(stack(1),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,((peek(stack(0),1) & (0x80 | 0x40 | 0x04)) | (((wpeek(stack(1),addtostack) ^ calculated ^ wpeek(stack(0),addfromstack)) >> 8) & 0x10) | ((calculated >> 16) & 0x01) | ((calculated >> 8) & (0x20 | 0x08)))
wpoke stack(1),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return

*opcode_fd_44
*opcode_fd_45
*opcode_fd_46
*opcode_fd_4c
*opcode_fd_4d
*opcode_fd_4e
*opcode_fd_54
*opcode_fd_55
*opcode_fd_56
*opcode_fd_5c
*opcode_fd_5d
*opcode_fd_5e
opcodeforsubcalladdcall=((opcodeforsubcall-0x40)/8)
opcodeforsubcalladdcall2=((opcodeforsubcall-0x40)-(opcodeforsubcalladdcall*8))
opcodeforsubcalladdcall3=opcodeforsubcalladdcall2-4
if opcodeforsubcall>=0x44 & opcodeforsubcall<=0x5E{
switch opcodeforsubcalladdcall
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 6
regforbit=-1
swbreak
case 7
regforbit=0
swbreak
swend
if opcodeforsubcalladdcall3=0 {if regforbit=-1{}else{poke stack(0),regforbit,peek(stack(1),13)}}
if opcodeforsubcalladdcall3=1 {if regforbit=-1{}else{poke stack(0),regforbit,peek(stack(1),12)}}
if opcodeforsubcalladdcall3=2 {z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}:if regforbit=-1{}else{poke stack(0),regforbit,z80readmem(wpeek(stack(1),12)+z80eaddr):wpoke stack(0),10,wpeek(stack(0),10)+1}}
}
return

*opcode_fd_60
poke stack(1),13,peek(stack(0),3)
return
*opcode_fd_61
poke stack(1),13,peek(stack(0),2)
return
*opcode_fd_62
poke stack(1),13,peek(stack(0),5)
return
*opcode_fd_63
poke stack(1),13,peek(stack(0),4)
return
*opcode_fd_64
poke stack(1),13,peek(stack(1),13)
return
*opcode_fd_65
poke stack(1),13,peek(stack(1),12)
return
*opcode_fd_66
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_fd_67
poke stack(1),13,peek(stack(0),0)
return
*opcode_fd_68
poke stack(1),12,peek(stack(0),3)
return
*opcode_fd_69
poke stack(1),12,peek(stack(0),2)
return
*opcode_fd_6A
poke stack(1),12,peek(stack(0),5)
return
*opcode_fd_6B
poke stack(1),12,peek(stack(0),4)
return
*opcode_fd_6C
poke stack(1),12,peek(stack(1),13)
return
*opcode_fd_6D
poke stack(1),12,peek(stack(1),12)
return
*opcode_fd_6E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_fd_6F
poke stack(1),12,peek(stack(0),0)
return
*opcode_fd_70
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),12)+z80eaddr),peek(stack(0),3)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_fd_71
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),12)+z80eaddr),peek(stack(0),2)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_fd_72
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),12)+z80eaddr),peek(stack(0),5)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_fd_73
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),12)+z80eaddr),peek(stack(0),4)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_fd_74
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem (wpeek(stack(1),12)+z80eaddr),peek(stack(0),7)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_fd_75
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
addressforixiyvar=0:addressforixiyvar=(wpeek(stack(1),12)+z80eaddr)
z80writemem wpeek(addressforixiyvar,0),peek(stack(0),6)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_77
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
addressforixiyvar=0:addressforixiyvar=(wpeek(stack(1),12)+z80eaddr)
z80writemem wpeek(addressforixiyvar,0),peek(stack(0),0)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_7C
poke stack(0),0,peek(stack(1),13)
return
*opcode_fd_7D
poke stack(0),0,peek(stack(1),12)
return
*opcode_fd_7E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_84
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_fd_85
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_fd_86
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_8C
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_fd_8D
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+peek(stack(1),addfromstack)+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack) ^ 0x80) & (peek(stack(1),addfromstack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
return
*opcode_fd_8E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) ^ (0x02))=0{poke stack(0),1,peek(stack(0),1) | (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)+(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))+(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack) ^ 0x80) & (z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC_addCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_94
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_fd_95
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_fd_96
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_9C
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_fd_9D
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | (((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
return
*opcode_fd_9E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))-(peek(stack(0),1) & (0x01))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),1,SZ(peek(calculated,0) & 0xff) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack)+z80eaddr)) & 0x10) | (((z80readmem(wpeek(stack(1),addfromstack)+z80eaddr) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated) & 0x80) >> 5)
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_A4
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&z80readmem(wpeek(stack(1),addfromstack))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_fd_A5
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&z80readmem(wpeek(stack(1),addfromstack))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
return
*opcode_fd_A6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)&(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack)) | 0x10
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZPCall
poke stack(0),1,peek(stack(0),1) & 255 ^ 2
poke stack(0),1,peek(stack(0),1) & 254
poke stack(0),1,peek(stack(0),1) | 16*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_AC
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_fd_AD
poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_fd_AE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)^(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
//if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_B4
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_fd_B5
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
return
*opcode_fd_B6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
/*poke stack(0),1,peek(stack(0),1) ^ (0x01)
poke stack(0),1,peek(stack(0),1) ^ (0x02)*/
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)|(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
poke stack(0),addtostack,calculated
/*if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if peek(stack(0),addtostack)=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if peek(stack(0),addtostack)=0 & addold!0						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if peek(stack(0),addtostack) & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if peek(stack(0),addtostack) & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
poke stack(0),1,SZP(peek(stack(0),addtostack))
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
	poke stack(0),1,peek(stack(0),1) &255 ^ 2
	poke stack(0),1,peek(stack(0),1) &254
	poke stack(0),1,peek(stack(0),1) &255 ^ 16
gosub *SZPCall*/
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_BC
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=13
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
//gosub *SZHVC2call
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(1),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | ((((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_fd_BD
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-peek(stack(1),addfromstack)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
//gosub *SZHVC2call
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (peek(stack(1),addfromstack) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ peek(stack(1),addfromstack)) & 0x10) | ((((peek(stack(1),addfromstack) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
return
*opcode_fd_BE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=12
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-(z80readmem(wpeek(stack(1),addfromstack)+z80eaddr))
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
//gosub *SZHVC2call
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (z80readmem(wpeek(stack(1),addfromstack)) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(1),addfromstack))) & 0x10) | ((((z80readmem(wpeek(stack(1),addfromstack)) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
wpoke stack(0),10,wpeek(stack(0),10)+1
return

*opcode_fd_CB
opcodeforsubcall=z80readmem(wpeek(stack(0),10)+1)
clockcount=opcodecc_fdcb(opcodeforsubcall)
gosub opcodeaddr_fd_cb(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+2
poke stack(0),14,peek(stack(0),14)+1
return
//switch opcodeforsubcall
*opcode_fd_cb_00
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_01
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_02
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_03
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_04
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_05
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_06
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_07
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (resforrlc >> 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_08
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_09
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_0A
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_0B
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_0C
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_0D
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_0E
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_0F
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (resforrlc << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_10
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_11
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_12
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_13
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_14
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_15
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_16
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_17
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x80) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc << 1) | (peek(stack(0),1) & 0x01)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_18
changetoforrlc=3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_19
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_1A
changetoforrlc=5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_1B
changetoforrlc=4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_1C
changetoforrlc=7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_1D
changetoforrlc=6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_1E
changetoforrlc=2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_1F
changetoforrlc=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
resforrlc=z80readmem(wpeek(stack(1),12)+z80eaddr)
cforrlc=1
if (resforrlc & 0x01) {cforrlc=0x01}else{cforrlc=0}
	resforrlc = ((resforrlc >> 1) | (peek(stack(0),1) << 7)) & 0xff
	/*if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	poke stack(0),1,SZP(resforrlc) | cforrlc
poke stack(0),changetoforrlc,resforrlc
z80writemem wpeek(stack(1),12)+z80eaddr,resforrlc
return
*opcode_fd_cb_20
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_21
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_22
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_23
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_24
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_25
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_26
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_27
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = (slares << 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_28
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_29
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_2A
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_2B
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_2C
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_2D
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_2E
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_2F
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = ((slares >> 1) | (slares & 0x80)) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_30
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_31
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_32
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_33
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_34
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_35
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_36
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_37
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x80)
if (slares & 0x80) {slac=0x01}else{slac=0}
slares = ((slares << 1) | 0x01) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_38
regidforsla=3
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_39
regidforsla=2
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_3A
regidforsla=5
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_3B
regidforsla=4
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_3C
regidforsla=7
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_3D
regidforsla=6
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_3E
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_3F
regidforsla=0
slares=0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
slares=z80readmem(wpeek(stack(1),12)+z80eaddr)
slac= 1//(slares & 0x01)
if (slares & 0x01) {slac=0x01}else{slac=0}
slares = (slares >> 1) & 0xff
poke stack(0),1,SZP(peek(slares,0)) | slac
poke stack(0),regidforsla,slares
z80writemem wpeek(stack(1),12)+z80eaddr,slares
return
*opcode_fd_cb_40
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_41
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_42
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_43
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_44
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_45
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_46
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_47
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 0)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_48
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_49
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_4A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_4B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_4C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_4D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_4E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_4F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 1)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_50
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_51
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_52
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_53
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_54
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_55
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_56
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_57
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 2)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_58
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_59
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_5A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_5B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_5C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_5D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_5E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_5F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 3)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_60
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_61
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_62
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_63
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_64
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_65
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_66
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_67
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 4)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_68
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_69
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_6A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_6B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_6C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_6D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_6E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_6F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 5)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_70
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_71
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_72
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_73
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_74
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_75
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_76
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_77
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 6)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_78
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_79
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_7A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_7B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_7C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_7D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_7E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
*opcode_fd_cb_7F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << 7)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
return
#if 0
*opcode_fd_cb_40
*opcode_fd_cb_41
*opcode_fd_cb_42
*opcode_fd_cb_43
*opcode_fd_cb_44
*opcode_fd_cb_45
*opcode_fd_cb_46
*opcode_fd_cb_47
*opcode_fd_cb_48
*opcode_fd_cb_49
*opcode_fd_cb_4A
*opcode_fd_cb_4B
*opcode_fd_cb_4C
*opcode_fd_cb_4D
*opcode_fd_cb_4E
*opcode_fd_cb_4F
*opcode_fd_cb_50
*opcode_fd_cb_51
*opcode_fd_cb_52
*opcode_fd_cb_53
*opcode_fd_cb_54
*opcode_fd_cb_55
*opcode_fd_cb_56
*opcode_fd_cb_57
*opcode_fd_cb_58
*opcode_fd_cb_59
*opcode_fd_cb_5A
*opcode_fd_cb_5B
*opcode_fd_cb_5C
*opcode_fd_cb_5D
*opcode_fd_cb_5E
*opcode_fd_cb_5F
*opcode_fd_cb_60
*opcode_fd_cb_61
*opcode_fd_cb_62
*opcode_fd_cb_63
*opcode_fd_cb_64
*opcode_fd_cb_65
*opcode_fd_cb_66
*opcode_fd_cb_67
*opcode_fd_cb_68
*opcode_fd_cb_69
*opcode_fd_cb_6A
*opcode_fd_cb_6B
*opcode_fd_cb_6C
*opcode_fd_cb_6D
*opcode_fd_cb_6E
*opcode_fd_cb_6F
*opcode_fd_cb_70
*opcode_fd_cb_71
*opcode_fd_cb_72
*opcode_fd_cb_73
*opcode_fd_cb_74
*opcode_fd_cb_75
*opcode_fd_cb_76
*opcode_fd_cb_77
*opcode_fd_cb_78
*opcode_fd_cb_79
*opcode_fd_cb_7A
*opcode_fd_cb_7B
*opcode_fd_cb_7C
*opcode_fd_cb_7D
*opcode_fd_cb_7E
*opcode_fd_cb_7F
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
regforbit=z80readmem(wpeek(stack(1),12)+z80readmem(wpeek(stack(0),10)))
//if cbopcodecallid>=0x40 & cbopcodecallid<=127{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
regforbit=0
/*switch regfromopcodeforbit
case 6
regforbit=-1
swbreak
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 7
regforbit=0
swbreak
swend*/
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	//if regforbit=-1{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(z80readmem(wpeek(stack(1),12)+z80eaddr) & (1 << cbopcodecallidforbit)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
	/*}else{
	z80eaddr=peek(stack(0),regforbit):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),1,(peek(stack(0),1) & 0x01) | 0x10 | (SZ_BIT(peek(stack(0),regforbit) & (1 << cbopcodecallidforbit)) & (0xFF - (0x20 | 0x08))) | (((wpeek(stack(1),12)+z80eaddr) >> 8) & (0x20 | 0x08))
	}*/
//}
return
#endif
*opcode_fd_cb_80
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_81
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_82
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_83
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_84
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_85
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_86
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
return
*opcode_fd_cb_87
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(8-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_88
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_89
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_8A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_8B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_8C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_8D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_8E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
return
*opcode_fd_cb_8F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(9-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_90
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_91
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_92
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_93
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_94
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_95
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_96
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
return
*opcode_fd_cb_97
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(10-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_98
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_99
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_9A
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_9B
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_9C
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_9D
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_9E
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
return
*opcode_fd_cb_9F
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(11-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_A0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_A1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_A2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_A3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_A4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_A5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_A6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
return
*opcode_fd_cb_A7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(12-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_A8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_A9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_AA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_AB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_AC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_AD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_AE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
return
*opcode_fd_cb_AF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(13-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_B0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_B1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_B2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_B3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_B4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_B5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_B6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
return
*opcode_fd_cb_B7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(14-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_B8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_B9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_BA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_BB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_BC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_BD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_BE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
return
*opcode_fd_cb_BF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(15-8))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
#if 0
*opcode_fd_cb_80
*opcode_fd_cb_81
*opcode_fd_cb_82
*opcode_fd_cb_83
*opcode_fd_cb_84
*opcode_fd_cb_85
*opcode_fd_cb_86
*opcode_fd_cb_87
*opcode_fd_cb_88
*opcode_fd_cb_89
*opcode_fd_cb_8A
*opcode_fd_cb_8B
*opcode_fd_cb_8C
*opcode_fd_cb_8D
*opcode_fd_cb_8E
*opcode_fd_cb_8F
*opcode_fd_cb_90
*opcode_fd_cb_91
*opcode_fd_cb_92
*opcode_fd_cb_93
*opcode_fd_cb_94
*opcode_fd_cb_95
*opcode_fd_cb_96
*opcode_fd_cb_97
*opcode_fd_cb_98
*opcode_fd_cb_99
*opcode_fd_cb_9A
*opcode_fd_cb_9B
*opcode_fd_cb_9C
*opcode_fd_cb_9D
*opcode_fd_cb_9E
*opcode_fd_cb_9F
*opcode_fd_cb_A0
*opcode_fd_cb_A1
*opcode_fd_cb_A2
*opcode_fd_cb_A3
*opcode_fd_cb_A4
*opcode_fd_cb_A5
*opcode_fd_cb_A6
*opcode_fd_cb_A7
*opcode_fd_cb_A8
*opcode_fd_cb_A9
*opcode_fd_cb_AA
*opcode_fd_cb_AB
*opcode_fd_cb_AC
*opcode_fd_cb_AD
*opcode_fd_cb_AE
*opcode_fd_cb_AF
*opcode_fd_cb_B0
*opcode_fd_cb_B1
*opcode_fd_cb_B2
*opcode_fd_cb_B3
*opcode_fd_cb_B4
*opcode_fd_cb_B5
*opcode_fd_cb_B6
*opcode_fd_cb_B7
*opcode_fd_cb_B8
*opcode_fd_cb_B9
*opcode_fd_cb_BA
*opcode_fd_cb_BB
*opcode_fd_cb_BC
*opcode_fd_cb_BD
*opcode_fd_cb_BE
*opcode_fd_cb_BF
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
regforbit=z80readmem(wpeek(stack(1),12)+z80readmem(wpeek(stack(0),10)))
//if cbopcodecallid>=128 & cbopcodecallid<=0xBF{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
regforbit=0
switch regfromopcodeforbit
case 6
regforbit=-1
swbreak
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 7
regforbit=0
swbreak
swend
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	if regforbit=-1{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(cbopcodecallidforbit-8))
	}else{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),regforbit,z80readmem(wpeek(stack(1),12)+z80eaddr) & 0xFF - (1<<(cbopcodecallidforbit-8))
	z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),regforbit)
	//z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),regforbit) & 0xFF - (1<<(cbopcodecallidforbit-8))
	}
//}
return
#endif
*opcode_fd_cb_C0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_C1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_C2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_C3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_C4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_C5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_C6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
return
*opcode_fd_cb_C7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(16-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_C8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_C9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_CA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_CB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_CC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_CD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_CE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
return
*opcode_fd_cb_CF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(17-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_D0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_D1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_D2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_D3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_D4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_D5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_D6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
return
*opcode_fd_cb_D7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(18-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_D8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_D9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_DA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_DB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_DC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_DD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_DE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
return
*opcode_fd_cb_DF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(19-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_E0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_E1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_E2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_E3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_E4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_E5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_E6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
return
*opcode_fd_cb_E7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(20-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_E8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_E9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_EA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_EB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_EC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_ED
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_EE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
return
*opcode_fd_cb_EF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(21-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_F0
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_F1
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_F2
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_F3
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_F4
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_F5
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_F6
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
return
*opcode_fd_cb_F7
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(22-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
*opcode_fd_cb_F8
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),3,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),3)
return
*opcode_fd_cb_F9
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),2,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),2)
return
*opcode_fd_cb_FA
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),5,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),5)
return
*opcode_fd_cb_FB
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),4,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),4)
return
*opcode_fd_cb_FC
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),7,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),7)
return
*opcode_fd_cb_FD
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),6,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),6)
return
*opcode_fd_cb_FE
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
return
*opcode_fd_cb_FF
z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
poke stack(0),0,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(23-16))
z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),0)
return
#if 0
*opcode_fd_cb_C0
*opcode_fd_cb_C1
*opcode_fd_cb_C2
*opcode_fd_cb_C3
*opcode_fd_cb_C4
*opcode_fd_cb_C5
*opcode_fd_cb_C6
*opcode_fd_cb_C7
*opcode_fd_cb_C8
*opcode_fd_cb_C9
*opcode_fd_cb_CA
*opcode_fd_cb_CB
*opcode_fd_cb_CC
*opcode_fd_cb_CD
*opcode_fd_cb_CE
*opcode_fd_cb_CF
*opcode_fd_cb_D0
*opcode_fd_cb_D1
*opcode_fd_cb_D2
*opcode_fd_cb_D3
*opcode_fd_cb_D4
*opcode_fd_cb_D5
*opcode_fd_cb_D6
*opcode_fd_cb_D7
*opcode_fd_cb_D8
*opcode_fd_cb_D9
*opcode_fd_cb_DA
*opcode_fd_cb_DB
*opcode_fd_cb_DC
*opcode_fd_cb_DD
*opcode_fd_cb_DE
*opcode_fd_cb_DF
*opcode_fd_cb_E0
*opcode_fd_cb_E1
*opcode_fd_cb_E2
*opcode_fd_cb_E3
*opcode_fd_cb_E4
*opcode_fd_cb_E5
*opcode_fd_cb_E6
*opcode_fd_cb_E7
*opcode_fd_cb_E8
*opcode_fd_cb_E9
*opcode_fd_cb_EA
*opcode_fd_cb_EB
*opcode_fd_cb_EC
*opcode_fd_cb_ED
*opcode_fd_cb_EE
*opcode_fd_cb_EF
*opcode_fd_cb_F0
*opcode_fd_cb_F1
*opcode_fd_cb_F2
*opcode_fd_cb_F3
*opcode_fd_cb_F4
*opcode_fd_cb_F5
*opcode_fd_cb_F6
*opcode_fd_cb_F7
*opcode_fd_cb_F8
*opcode_fd_cb_F9
*opcode_fd_cb_FA
*opcode_fd_cb_FB
*opcode_fd_cb_FC
*opcode_fd_cb_FD
*opcode_fd_cb_FE
*opcode_fd_cb_FF
cbopcodecallid=opcodeforsubcall
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
regforbit=z80readmem(wpeek(stack(1),12)+z80readmem(wpeek(stack(0),10)))
//if cbopcodecallid>=0xC0 & cbopcodecallid<=0xFF{
regfromopcodeforbit=(cbopcodecallid-0x40)-(8*cbopcodecallidforbit)
regforbit=0
switch regfromopcodeforbit
case 6
regforbit=-1
swbreak
case 0
regforbit=3
swbreak
case 1
regforbit=2
swbreak
case 2
regforbit=5
swbreak
case 3
regforbit=4
swbreak
case 4
regforbit=7
swbreak
case 5
regforbit=6
swbreak
case 7
regforbit=0
swbreak
swend
/*if regforbit=-1{}else{}*/
	//if (peek(stack(0),1) & 0x01){}else{poke stack(0),1,peek(stack(0),1)^cforrlc}
	/*if peek(stack(0),regforbit) & (1<<regfromopcodeforbit){
	}
	if (peek(stack(0),1) & 0x10){poke stack(0),1,peek(stack(0),1)^0x10}
	if (peek(stack(0),1) & 0x40){poke stack(0),1,peek(stack(0),1)^0x40}
	if (peek(stack(0),1) & 0x02){poke stack(0),1,peek(stack(0),1)^0x02}*/
	if regforbit=-1{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	z80writemem wpeek(stack(1),12)+z80eaddr,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(cbopcodecallidforbit-16))
	}else{
	z80eaddr=z80readmem(wpeek(stack(0),10)):if z80eaddr>=128{z80eaddr=z80eaddr-256}
	poke stack(0),regforbit,z80readmem(wpeek(stack(1),12)+z80eaddr) | (1<<(cbopcodecallidforbit-16))
	z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),regforbit)
	//z80writemem wpeek(stack(1),12)+z80eaddr,peek(stack(0),regforbit) | (1<<(cbopcodecallidforbit-16))
	}
#endif
//}
//wpoke stack(0),10,wpeek(stack(0),10)+2
return

*opcode_fd_E1
wpoke stack(1),12,z80readmem16(wpeek(stack(0),12))
wpoke stack(0),12,wpeek(stack(0),12)+2
return

*opcode_fd_E3
SP_bak=0
SP_bak=z80readmem16(wpeek(stack(0),12))
z80writemem16 wpeek(stack(0),12),wpeek(stack(1),12)
wpoke stack(1),12,SP_bak
return

*opcode_fd_E5
wpoke stack(0),12,wpeek(stack(0),12)-2
z80writemem16 wpeek(stack(0),12),wpeek(stack(1),12)
return

*opcode_fd_E9
wpoke stack(0),10,wpeek(stack(1),12)
return

*opcode_fd_F9
wpoke stack(0),12,wpeek(stack(1),12)
return

*opcode_fd_00
*opcode_fd_01
*opcode_fd_02
*opcode_fd_03
*opcode_fd_04
*opcode_fd_05
*opcode_fd_06
*opcode_fd_07
*opcode_fd_08
*opcode_fd_0A
*opcode_fd_0B
*opcode_fd_0C
*opcode_fd_0D
*opcode_fd_0E
*opcode_fd_0F
*opcode_fd_10
*opcode_fd_11
*opcode_fd_12
*opcode_fd_13
*opcode_fd_14
*opcode_fd_15
*opcode_fd_16
*opcode_fd_17
*opcode_fd_18
*opcode_fd_1A
*opcode_fd_1B
*opcode_fd_1C
*opcode_fd_1D
*opcode_fd_1E
*opcode_fd_1F
*opcode_fd_20
*opcode_fd_27
*opcode_fd_28
*opcode_fd_2F
*opcode_fd_30
*opcode_fd_31
*opcode_fd_32
*opcode_fd_33
*opcode_fd_37
*opcode_fd_38
*opcode_fd_3A
*opcode_fd_3B
*opcode_fd_3C
*opcode_fd_3D
*opcode_fd_3E
*opcode_fd_3F
*opcode_fd_40
*opcode_fd_41
*opcode_fd_42
*opcode_fd_43
*opcode_fd_47
*opcode_fd_48
*opcode_fd_49
*opcode_fd_4A
*opcode_fd_4B
*opcode_fd_4F
*opcode_fd_50
*opcode_fd_51
*opcode_fd_52
*opcode_fd_53
*opcode_fd_57
*opcode_fd_58
*opcode_fd_59
*opcode_fd_5A
*opcode_fd_5B
*opcode_fd_5F
*opcode_fd_76
*opcode_fd_78
*opcode_fd_79
*opcode_fd_7A
*opcode_fd_7B
*opcode_fd_7F
*opcode_fd_80
*opcode_fd_81
*opcode_fd_82
*opcode_fd_83
*opcode_fd_87
*opcode_fd_88
*opcode_fd_89
*opcode_fd_8A
*opcode_fd_8B
*opcode_fd_8F
*opcode_fd_90
*opcode_fd_91
*opcode_fd_92
*opcode_fd_93
*opcode_fd_97
*opcode_fd_98
*opcode_fd_99
*opcode_fd_9A
*opcode_fd_9B
*opcode_fd_9F
*opcode_fd_A0
*opcode_fd_A1
*opcode_fd_A2
*opcode_fd_A3
*opcode_fd_A7
*opcode_fd_A8
*opcode_fd_A9
*opcode_fd_AA
*opcode_fd_AB
*opcode_fd_AF
*opcode_fd_B0
*opcode_fd_B1
*opcode_fd_B2
*opcode_fd_B3
*opcode_fd_B7
*opcode_fd_B8
*opcode_fd_B9
*opcode_fd_BA
*opcode_fd_BB
*opcode_fd_BF
*opcode_fd_C0
*opcode_fd_C1
*opcode_fd_C2
*opcode_fd_C3
*opcode_fd_C4
*opcode_fd_C5
*opcode_fd_C6
*opcode_fd_C7
*opcode_fd_C8
*opcode_fd_C9
*opcode_fd_CA
*opcode_fd_CC
*opcode_fd_CD
*opcode_fd_CE
*opcode_fd_CF
*opcode_fd_D0
*opcode_fd_D1
*opcode_fd_D2
*opcode_fd_D3
*opcode_fd_D4
*opcode_fd_D5
*opcode_fd_D6
*opcode_fd_D7
*opcode_fd_D8
*opcode_fd_D9
*opcode_fd_DA
*opcode_fd_DB
*opcode_fd_DC
*opcode_fd_DD
*opcode_fd_DE
*opcode_fd_DF
*opcode_fd_E0
*opcode_fd_E2
*opcode_fd_E4
*opcode_fd_E6
*opcode_fd_E7
*opcode_fd_E8
*opcode_fd_EA
*opcode_fd_EB
*opcode_fd_EC
*opcode_fd_ED
*opcode_fd_EE
*opcode_fd_EF
*opcode_fd_F0
*opcode_fd_F1
*opcode_fd_F2
*opcode_fd_F3
*opcode_fd_F4
*opcode_fd_F5
*opcode_fd_F6
*opcode_fd_F7
*opcode_fd_F8
*opcode_fd_FA
*opcode_fd_FB
*opcode_fd_FC
*opcode_fd_FD
*opcode_fd_FE
*opcode_fd_FF
opcodeforsubcalladdcall=((opcodeforsubcall-0x40)/8)
opcodeforsubcalladdcall2=((opcodeforsubcall-0x40)-(opcodeforsubcalladdcall*8))-4
#ifdef __useslowz80emulation_flag__
opcode=z80readmem(startaddr)
gosub *z80opcodeinterpretsw
#else
opcode=z80readmem(wpeek(stack(0),10)-1)
lpoke jumplabel,0,lpeek(opcodeaddr(opcode),0)
//wpoke stack(0),10,wpeek(stack(0),10)+1
gosub jumplabel
#endif
return
poke stack(0),14,peek(stack(0),14)+1
return
*opcode_fe
//if (peek(stack(0),1) & (0x02)){poke stack(0),1,peek(stack(0),1) ^ (0x02)}
addold=0
calculated=0
halfcarrychk=0
addtostack=0
addfromstack=2
addold=peek(stack(0),addtostack)
calculated=peek(stack(0),addtostack)-z80readmem(wpeek(stack(0),10))
//calculated=wpeek(calculated,0)
//if peek(stack(0),addtostack) & 0b00001000{halfcarrychk=1}
//poke stack(0),addtostack,calculated
/*if calculated=0 & peek(stack(0),addtostack)=calculated{poke stack(0),1,peek(stack(0),1) | (0x01)}
if calculated=0 & peek(stack(0),addtostack)!calculated{poke stack(0),1,peek(stack(0),1) | (0x04)}
if calculated=0 /*and addold!0*//*						 {poke stack(0),1,peek(stack(0),1) | (0x40)}

if calculated & 0b00010000 & halfcarrychk=1{poke stack(0),1,peek(stack(0),1) | (0x10):halfcarrychk=0}
if calculated & 0x80{poke stack(0),1,peek(stack(0),1) | (0x80)}*/
/*SZHVC_addvar_37id=0
SZHVC_addvar_37id2=calculated
gosub *SZHVC2call*/
poke stack(0),1,(SZ(peek(calculated,0) & 0xff) & (0x80 | 0x40)) | (z80readmem(wpeek(stack(0),10)) & (0x20 | 0x08)) | ((calculated >> 8) & 0x01) | 0x02 | ((peek(stack(0),addtostack) ^ calculated ^ z80readmem(wpeek(stack(0),10))) & 0x10) | ((((z80readmem(wpeek(stack(0),10)) ^ peek(stack(0),addtostack)) & (peek(stack(0),addtostack) ^ calculated)) >> 5) & 0x04)
wpoke stack(0),10,wpeek(stack(0),10)+1
return
*opcode_ff
addressforc7=wpeek(stack(0),12)-2:z80writemem wpeek(addressforc7,0),peek(stack(0),10)
addressforc7=wpeek(stack(0),12)-1:z80writemem wpeek(addressforc7,0),peek(stack(0),11)
wpoke stack(0),12,wpeek(stack(0),12)-2
wpoke stack(0),10,0x38
return

//logmes "Unimplemented!"
return
*SZHVC2call
//SZHVC_addvar_37=peek(stack(SZHVC_addvar_37id),SZHVC_addvar_37id2)
SZHVC_addvar_37=SZHVC_addvar_37id2
poke SZHVC_addvar_52,0,peek(stack(0),1)
	SZHVC_addvar_52 ^= 2
	if ( SZHVC_addvar_37 < 0 ) {
		SZHVC_addvar_52 |= 1
	}
	else {
		SZHVC_addvar_52 &= 254
	}
	if ( SZHVC_addvar_37 & 4 ) {
		SZHVC_addvar_52 |= 16
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 16
	}
	if ( SZHVC_addvar_37 == 0 ) {
		SZHVC_addvar_52 |= 64
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 64
	}
	if ( (SZHVC_addvar_37 & 128) != (peek(stack(0), 0) != 128) ) {
		SZHVC_addvar_52 |= 4
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 4
	}
	if ( SZHVC_addvar_37 & 128 ) {
		SZHVC_addvar_52 |= 128
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 128
	}
poke stack(0),1,SZHVC_addvar_52
	return
*SZHVCcall
//SZHVC_addvar_37=peek(stack(SZHVC_addvar_37id),SZHVC_addvar_37id2)
SZHVC_addvar_37=SZHVC_addvar_37id2
poke SZHVC_addvar_52,0,peek(stack(0),1)
	SZHVC_addvar_52 ^= 2
	if ( SZHVC_addvar_37 < 0 ) {
		SZHVC_addvar_52 |= 1
	}
	else {
		SZHVC_addvar_52 &= 254
	}
	if ( SZHVC_addvar_37 & 4 ) {
		SZHVC_addvar_52 |= 16
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 16
	}
	if ( SZHVC_addvar_37 == 0 ) {
		SZHVC_addvar_52 |= 64
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 64
	}
	if ( (SZHVC_addvar_37 & 32768) != (wpeek(stack(0), 6) != 32768) ) {
		SZHVC_addvar_52 |= 4
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 4
	}
	if ( SZHVC_addvar_37 & 32768 ) {
		SZHVC_addvar_52 |= 128
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 128
	}
poke stack(0),1,SZHVC_addvar_52
	return
*SZPCall
//SZHVC_addvar_37=peek(stack(SZHVC_addvar_37id),SZHVC_addvar_37id2)
SZHVC_addvar_37=SZHVC_addvar_37id2
poke SZHVC_addvar_52,0,peek(stack(0),1)
	if ( SZHVC_addvar_37 & 1 ) {
		SZHVC_addvar_52 |= 4
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 4
	}
	if ( SZHVC_addvar_37 == 0 ) {
		SZHVC_addvar_52 |= 64
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 64
	}
	if ( SZHVC_addvar_37 & 128 ) {
		SZHVC_addvar_52 |= 128
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 128
	}
poke stack(0),1,SZHVC_addvar_52
	return
*SZHVCall
//SZHVC_addvar_37=peek(stack(SZHVC_addvar_37id),SZHVC_addvar_37id2)
SZHVC_addvar_37=SZHVC_addvar_37id2
poke SZHVC_addvar_52,0,peek(stack(0),1)
	if ( (SZHVC_addvar_37 & 128) != (peek(SZHVC_addvar_24, var_53) & 128) ) {
		SZHVC_addvar_52 |= 4
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 4
	}
	if ( SZHVC_addvar_37 == 0 ) {
		SZHVC_addvar_52 |= 64
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 64
	}
	if ( SZHVC_addvar_37 & 128 ) {
		SZHVC_addvar_52 |= 128
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 128
	}
poke stack(0),1,SZHVC_addvar_52
	return
	if ( SZHVC_addvar_37 & 4 ) {
		SZHVC_addvar_52 |= 16
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 16
	}
	if ( SZHVC_addvar_37 == 0 ) {
		SZHVC_addvar_52 |= 64
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 64
	}
	if ( SZHVC_addvar_37 & 1 ) {
		SZHVC_addvar_52 |= 4
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 4
	}
	if ( SZHVC_addvar_37 & 128 ) {
		SZHVC_addvar_52 |= 128
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 128
	}
poke stack(0),1,SZHVC_addvar_52
	return
*SZPCall2
//SZHVC_addvar_37=peek(stack(SZHVC_addvar_37id),SZHVC_addvar_37id2)
SZHVC_addvar_37=SZHVC_addvar_37id2
poke SZHVC_addvar_52,0,peek(stack(0),1)
	if ( SZHVC_addvar_37 == 0 ) {
		SZHVC_addvar_52 |= 64
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 64
	}
	if ( SZHVC_addvar_37 & 128 ) {
		SZHVC_addvar_52 |= 128
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 128
	}
	if ( SZHVC_addvar_37 & 1 ) {
		SZHVC_addvar_52 |= 2
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 2
	}
	SZHVC_addvar_52 &= 255 ^ 16
	SZHVC_addvar_52 &= 255 ^ 2
poke stack(0),1,SZHVC_addvar_52
	return
*SZHVC_addCall
//SZHVC_addvar_37=peek(stack(SZHVC_addvar_37id),SZHVC_addvar_37id2)
SZHVC_addvar_37=SZHVC_addvar_37id2
poke SZHVC_addvar_52,0,peek(stack(0),1)
	SZHVC_addvar_52 &= 255 ^ 2
	if ( SZHVC_addvar_37 > 255 ) {
		SZHVC_addvar_52 |= 1
	}
	else {
		SZHVC_addvar_52 &= 254
	}
	if ( (SZHVC_addvar_37 & 128) != (peek(stack(0), 0) != 128) ) {
		SZHVC_addvar_52 |= 4
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 4
	}
	if ( SZHVC_addvar_37 & 4 ) {
		SZHVC_addvar_52 |= 16
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 16
	}
	if ( SZHVC_addvar_37 == 0 ) {
		SZHVC_addvar_52 |= 64
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 64
	}
	if ( SZHVC_addvar_37 & 128 ) {
		SZHVC_addvar_52 |= 128
	}
	else {
		SZHVC_addvar_52 &= 255 ^ 128
	}
poke stack(0),1,SZHVC_addvar_52
	return
#ifdef __useslowz80emulation_flag__
*z80opcodeinterpretsw
switch opcode
case 0
gosub *opcode_00
swbreak
case 1
gosub *opcode_01
swbreak
case 2
gosub *opcode_02
swbreak
case 3
gosub *opcode_03
swbreak
case 4
gosub *opcode_04
swbreak
case 5
gosub *opcode_05
swbreak
case 6
gosub *opcode_06
swbreak
case 7
gosub *opcode_07
swbreak
case 8
gosub *opcode_08
swbreak
case 9
gosub *opcode_09
swbreak
case 10
gosub *opcode_0A
swbreak
case 11
gosub *opcode_0B
swbreak
case 12
gosub *opcode_0C
swbreak
case 13
gosub *opcode_0D
swbreak
case 14
gosub *opcode_0E
swbreak
case 15
gosub *opcode_0F
swbreak
case 16
gosub *opcode_10
swbreak
case 17
gosub *opcode_11
swbreak
case 18
gosub *opcode_12
swbreak
case 19
gosub *opcode_13
swbreak
case 20
gosub *opcode_14
swbreak
case 21
gosub *opcode_15
swbreak
case 22
gosub *opcode_16
swbreak
case 23
gosub *opcode_17
swbreak
case 24
gosub *opcode_18
swbreak
case 25
gosub *opcode_19
swbreak
case 26
gosub *opcode_1A
swbreak
case 27
gosub *opcode_1B
swbreak
case 28
gosub *opcode_1C
swbreak
case 29
gosub *opcode_1D
swbreak
case 30
gosub *opcode_1E
swbreak
case 31
gosub *opcode_1F
swbreak
case 32
gosub *opcode_20
swbreak
case 33
gosub *opcode_21
swbreak
case 34
gosub *opcode_22
swbreak
case 35
gosub *opcode_23
swbreak
case 36
gosub *opcode_24
swbreak
case 37
gosub *opcode_25
swbreak
case 38
gosub *opcode_26
swbreak
case 39
gosub *opcode_27
swbreak
case 40
gosub *opcode_28
swbreak
case 41
gosub *opcode_29
swbreak
case 42
gosub *opcode_2A
swbreak
case 43
gosub *opcode_2B
swbreak
case 44
gosub *opcode_2C
swbreak
case 45
gosub *opcode_2D
swbreak
case 46
gosub *opcode_2E
swbreak
case 47
gosub *opcode_2F
swbreak
case 48
gosub *opcode_30
swbreak
case 49
gosub *opcode_31
swbreak
case 50
gosub *opcode_32
swbreak
case 51
gosub *opcode_33
swbreak
case 52
gosub *opcode_34
swbreak
case 53
gosub *opcode_35
swbreak
case 54
gosub *opcode_36
swbreak
case 55
gosub *opcode_37
swbreak
case 56
gosub *opcode_38
swbreak
case 57
gosub *opcode_39
swbreak
case 58
gosub *opcode_3A
swbreak
case 59
gosub *opcode_3B
swbreak
case 60
gosub *opcode_3C
swbreak
case 61
gosub *opcode_3D
swbreak
case 62
gosub *opcode_3E
swbreak
case 63
gosub *opcode_3F
swbreak
case 64
gosub *opcode_40
swbreak
case 65
gosub *opcode_41
swbreak
case 66
gosub *opcode_42
swbreak
case 67
gosub *opcode_43
swbreak
case 68
gosub *opcode_44
swbreak
case 69
gosub *opcode_45
swbreak
case 70
gosub *opcode_46
swbreak
case 71
gosub *opcode_47
swbreak
case 72
gosub *opcode_48
swbreak
case 73
gosub *opcode_49
swbreak
case 74
gosub *opcode_4A
swbreak
case 75
gosub *opcode_4B
swbreak
case 76
gosub *opcode_4C
swbreak
case 77
gosub *opcode_4D
swbreak
case 78
gosub *opcode_4E
swbreak
case 79
gosub *opcode_4F
swbreak
case 80
gosub *opcode_50
swbreak
case 81
gosub *opcode_51
swbreak
case 82
gosub *opcode_52
swbreak
case 83
gosub *opcode_53
swbreak
case 84
gosub *opcode_54
swbreak
case 85
gosub *opcode_55
swbreak
case 86
gosub *opcode_56
swbreak
case 87
gosub *opcode_57
swbreak
case 88
gosub *opcode_58
swbreak
case 89
gosub *opcode_59
swbreak
case 90
gosub *opcode_5A
swbreak
case 91
gosub *opcode_5B
swbreak
case 92
gosub *opcode_5C
swbreak
case 93
gosub *opcode_5D
swbreak
case 94
gosub *opcode_5E
swbreak
case 95
gosub *opcode_5F
swbreak
case 96
gosub *opcode_60
swbreak
case 97
gosub *opcode_61
swbreak
case 98
gosub *opcode_62
swbreak
case 99
gosub *opcode_63
swbreak
case 100
gosub *opcode_64
swbreak
case 101
gosub *opcode_65
swbreak
case 102
gosub *opcode_66
swbreak
case 103
gosub *opcode_67
swbreak
case 104
gosub *opcode_68
swbreak
case 105
gosub *opcode_69
swbreak
case 106
gosub *opcode_6A
swbreak
case 107
gosub *opcode_6B
swbreak
case 108
gosub *opcode_6C
swbreak
case 109
gosub *opcode_6D
swbreak
case 110
gosub *opcode_6E
swbreak
case 111
gosub *opcode_6F
swbreak
case 112
gosub *opcode_70
swbreak
case 113
gosub *opcode_71
swbreak
case 114
gosub *opcode_72
swbreak
case 115
gosub *opcode_73
swbreak
case 116
gosub *opcode_74
swbreak
case 117
gosub *opcode_75
swbreak
case 118
gosub *opcode_76
swbreak
case 119
gosub *opcode_77
swbreak
case 120
gosub *opcode_78
swbreak
case 121
gosub *opcode_79
swbreak
case 122
gosub *opcode_7A
swbreak
case 123
gosub *opcode_7B
swbreak
case 124
gosub *opcode_7C
swbreak
case 125
gosub *opcode_7D
swbreak
case 126
gosub *opcode_7E
swbreak
case 127
gosub *opcode_7F
swbreak
case 128
gosub *opcode_80
swbreak
case 129
gosub *opcode_81
swbreak
case 130
gosub *opcode_82
swbreak
case 131
gosub *opcode_83
swbreak
case 132
gosub *opcode_84
swbreak
case 133
gosub *opcode_85
swbreak
case 134
gosub *opcode_86
swbreak
case 135
gosub *opcode_87
swbreak
case 136
gosub *opcode_88
swbreak
case 137
gosub *opcode_89
swbreak
case 138
gosub *opcode_8A
swbreak
case 139
gosub *opcode_8B
swbreak
case 140
gosub *opcode_8C
swbreak
case 141
gosub *opcode_8D
swbreak
case 142
gosub *opcode_8E
swbreak
case 143
gosub *opcode_8F
swbreak
case 144
gosub *opcode_90
swbreak
case 145
gosub *opcode_91
swbreak
case 146
gosub *opcode_92
swbreak
case 147
gosub *opcode_93
swbreak
case 148
gosub *opcode_94
swbreak
case 149
gosub *opcode_95
swbreak
case 150
gosub *opcode_96
swbreak
case 151
gosub *opcode_97
swbreak
case 152
gosub *opcode_98
swbreak
case 153
gosub *opcode_99
swbreak
case 154
gosub *opcode_9A
swbreak
case 155
gosub *opcode_9B
swbreak
case 156
gosub *opcode_9C
swbreak
case 157
gosub *opcode_9D
swbreak
case 158
gosub *opcode_9E
swbreak
case 159
gosub *opcode_9F
swbreak
case 160
gosub *opcode_A0
swbreak
case 161
gosub *opcode_A1
swbreak
case 162
gosub *opcode_A2
swbreak
case 163
gosub *opcode_A3
swbreak
case 164
gosub *opcode_A4
swbreak
case 165
gosub *opcode_A5
swbreak
case 166
gosub *opcode_A6
swbreak
case 167
gosub *opcode_A7
swbreak
case 168
gosub *opcode_A8
swbreak
case 169
gosub *opcode_A9
swbreak
case 170
gosub *opcode_AA
swbreak
case 171
gosub *opcode_AB
swbreak
case 172
gosub *opcode_AC
swbreak
case 173
gosub *opcode_AD
swbreak
case 174
gosub *opcode_AE
swbreak
case 175
gosub *opcode_AF
swbreak
case 176
gosub *opcode_B0
swbreak
case 177
gosub *opcode_B1
swbreak
case 178
gosub *opcode_B2
swbreak
case 179
gosub *opcode_B3
swbreak
case 180
gosub *opcode_B4
swbreak
case 181
gosub *opcode_B5
swbreak
case 182
gosub *opcode_B6
swbreak
case 183
gosub *opcode_B7
swbreak
case 184
gosub *opcode_B8
swbreak
case 185
gosub *opcode_B9
swbreak
case 186
gosub *opcode_BA
swbreak
case 187
gosub *opcode_BB
swbreak
case 188
gosub *opcode_BC
swbreak
case 189
gosub *opcode_BD
swbreak
case 190
gosub *opcode_BE
swbreak
case 191
gosub *opcode_BF
swbreak
case 192
gosub *opcode_C0
swbreak
case 193
gosub *opcode_C1
swbreak
case 194
gosub *opcode_C2
swbreak
case 195
gosub *opcode_C3
swbreak
case 196
gosub *opcode_C4
swbreak
case 197
gosub *opcode_C5
swbreak
case 198
gosub *opcode_C6
swbreak
case 199
gosub *opcode_C7
swbreak
case 200
gosub *opcode_C8
swbreak
case 201
gosub *opcode_C9
swbreak
case 202
gosub *opcode_CA
swbreak
case 203
cbopcodecallid=z80readmem(wpeek(stack(0),10))
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_cb(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+1
switch opcodeforsubcall
case 0
gosub *opcode_cb_00
swbreak
case 1
gosub *opcode_cb_01
swbreak
case 2
gosub *opcode_cb_02
swbreak
case 3
gosub *opcode_cb_03
swbreak
case 4
gosub *opcode_cb_04
swbreak
case 5
gosub *opcode_cb_05
swbreak
case 6
gosub *opcode_cb_06
swbreak
case 7
gosub *opcode_cb_07
swbreak
case 8
gosub *opcode_cb_08
swbreak
case 9
gosub *opcode_cb_09
swbreak
case 10
gosub *opcode_cb_0A
swbreak
case 11
gosub *opcode_cb_0B
swbreak
case 12
gosub *opcode_cb_0C
swbreak
case 13
gosub *opcode_cb_0D
swbreak
case 14
gosub *opcode_cb_0E
swbreak
case 15
gosub *opcode_cb_0F
swbreak
case 16
gosub *opcode_cb_10
swbreak
case 17
gosub *opcode_cb_11
swbreak
case 18
gosub *opcode_cb_12
swbreak
case 19
gosub *opcode_cb_13
swbreak
case 20
gosub *opcode_cb_14
swbreak
case 21
gosub *opcode_cb_15
swbreak
case 22
gosub *opcode_cb_16
swbreak
case 23
gosub *opcode_cb_17
swbreak
case 24
gosub *opcode_cb_18
swbreak
case 25
gosub *opcode_cb_19
swbreak
case 26
gosub *opcode_cb_1A
swbreak
case 27
gosub *opcode_cb_1B
swbreak
case 28
gosub *opcode_cb_1C
swbreak
case 29
gosub *opcode_cb_1D
swbreak
case 30
gosub *opcode_cb_1E
swbreak
case 31
gosub *opcode_cb_1F
swbreak
case 32
gosub *opcode_cb_20
swbreak
case 33
gosub *opcode_cb_21
swbreak
case 34
gosub *opcode_cb_22
swbreak
case 35
gosub *opcode_cb_23
swbreak
case 36
gosub *opcode_cb_24
swbreak
case 37
gosub *opcode_cb_25
swbreak
case 38
gosub *opcode_cb_26
swbreak
case 39
gosub *opcode_cb_27
swbreak
case 40
gosub *opcode_cb_28
swbreak
case 41
gosub *opcode_cb_29
swbreak
case 42
gosub *opcode_cb_2A
swbreak
case 43
gosub *opcode_cb_2B
swbreak
case 44
gosub *opcode_cb_2C
swbreak
case 45
gosub *opcode_cb_2D
swbreak
case 46
gosub *opcode_cb_2E
swbreak
case 47
gosub *opcode_cb_2F
swbreak
case 48
gosub *opcode_cb_30
swbreak
case 49
gosub *opcode_cb_31
swbreak
case 50
gosub *opcode_cb_32
swbreak
case 51
gosub *opcode_cb_33
swbreak
case 52
gosub *opcode_cb_34
swbreak
case 53
gosub *opcode_cb_35
swbreak
case 54
gosub *opcode_cb_36
swbreak
case 55
gosub *opcode_cb_37
swbreak
case 56
gosub *opcode_cb_38
swbreak
case 57
gosub *opcode_cb_39
swbreak
case 58
gosub *opcode_cb_3A
swbreak
case 59
gosub *opcode_cb_3B
swbreak
case 60
gosub *opcode_cb_3C
swbreak
case 61
gosub *opcode_cb_3D
swbreak
case 62
gosub *opcode_cb_3E
swbreak
case 63
gosub *opcode_cb_3F
swbreak
case 64
gosub *opcode_cb_40
swbreak
case 65
gosub *opcode_cb_41
swbreak
case 66
gosub *opcode_cb_42
swbreak
case 67
gosub *opcode_cb_43
swbreak
case 68
gosub *opcode_cb_44
swbreak
case 69
gosub *opcode_cb_45
swbreak
case 70
gosub *opcode_cb_46
swbreak
case 71
gosub *opcode_cb_47
swbreak
case 72
gosub *opcode_cb_48
swbreak
case 73
gosub *opcode_cb_49
swbreak
case 74
gosub *opcode_cb_4A
swbreak
case 75
gosub *opcode_cb_4B
swbreak
case 76
gosub *opcode_cb_4C
swbreak
case 77
gosub *opcode_cb_4D
swbreak
case 78
gosub *opcode_cb_4E
swbreak
case 79
gosub *opcode_cb_4F
swbreak
case 80
gosub *opcode_cb_50
swbreak
case 81
gosub *opcode_cb_51
swbreak
case 82
gosub *opcode_cb_52
swbreak
case 83
gosub *opcode_cb_53
swbreak
case 84
gosub *opcode_cb_54
swbreak
case 85
gosub *opcode_cb_55
swbreak
case 86
gosub *opcode_cb_56
swbreak
case 87
gosub *opcode_cb_57
swbreak
case 88
gosub *opcode_cb_58
swbreak
case 89
gosub *opcode_cb_59
swbreak
case 90
gosub *opcode_cb_5A
swbreak
case 91
gosub *opcode_cb_5B
swbreak
case 92
gosub *opcode_cb_5C
swbreak
case 93
gosub *opcode_cb_5D
swbreak
case 94
gosub *opcode_cb_5E
swbreak
case 95
gosub *opcode_cb_5F
swbreak
case 96
gosub *opcode_cb_60
swbreak
case 97
gosub *opcode_cb_61
swbreak
case 98
gosub *opcode_cb_62
swbreak
case 99
gosub *opcode_cb_63
swbreak
case 100
gosub *opcode_cb_64
swbreak
case 101
gosub *opcode_cb_65
swbreak
case 102
gosub *opcode_cb_66
swbreak
case 103
gosub *opcode_cb_67
swbreak
case 104
gosub *opcode_cb_68
swbreak
case 105
gosub *opcode_cb_69
swbreak
case 106
gosub *opcode_cb_6A
swbreak
case 107
gosub *opcode_cb_6B
swbreak
case 108
gosub *opcode_cb_6C
swbreak
case 109
gosub *opcode_cb_6D
swbreak
case 110
gosub *opcode_cb_6E
swbreak
case 111
gosub *opcode_cb_6F
swbreak
case 112
gosub *opcode_cb_70
swbreak
case 113
gosub *opcode_cb_71
swbreak
case 114
gosub *opcode_cb_72
swbreak
case 115
gosub *opcode_cb_73
swbreak
case 116
gosub *opcode_cb_74
swbreak
case 117
gosub *opcode_cb_75
swbreak
case 118
gosub *opcode_cb_76
swbreak
case 119
gosub *opcode_cb_77
swbreak
case 120
gosub *opcode_cb_78
swbreak
case 121
gosub *opcode_cb_79
swbreak
case 122
gosub *opcode_cb_7A
swbreak
case 123
gosub *opcode_cb_7B
swbreak
case 124
gosub *opcode_cb_7C
swbreak
case 125
gosub *opcode_cb_7D
swbreak
case 126
gosub *opcode_cb_7E
swbreak
case 127
gosub *opcode_cb_7F
swbreak
case 128
gosub *opcode_cb_80
swbreak
case 129
gosub *opcode_cb_81
swbreak
case 130
gosub *opcode_cb_82
swbreak
case 131
gosub *opcode_cb_83
swbreak
case 132
gosub *opcode_cb_84
swbreak
case 133
gosub *opcode_cb_85
swbreak
case 134
gosub *opcode_cb_86
swbreak
case 135
gosub *opcode_cb_87
swbreak
case 136
gosub *opcode_cb_88
swbreak
case 137
gosub *opcode_cb_89
swbreak
case 138
gosub *opcode_cb_8A
swbreak
case 139
gosub *opcode_cb_8B
swbreak
case 140
gosub *opcode_cb_8C
swbreak
case 141
gosub *opcode_cb_8D
swbreak
case 142
gosub *opcode_cb_8E
swbreak
case 143
gosub *opcode_cb_8F
swbreak
case 144
gosub *opcode_cb_90
swbreak
case 145
gosub *opcode_cb_91
swbreak
case 146
gosub *opcode_cb_92
swbreak
case 147
gosub *opcode_cb_93
swbreak
case 148
gosub *opcode_cb_94
swbreak
case 149
gosub *opcode_cb_95
swbreak
case 150
gosub *opcode_cb_96
swbreak
case 151
gosub *opcode_cb_97
swbreak
case 152
gosub *opcode_cb_98
swbreak
case 153
gosub *opcode_cb_99
swbreak
case 154
gosub *opcode_cb_9A
swbreak
case 155
gosub *opcode_cb_9B
swbreak
case 156
gosub *opcode_cb_9C
swbreak
case 157
gosub *opcode_cb_9D
swbreak
case 158
gosub *opcode_cb_9E
swbreak
case 159
gosub *opcode_cb_9F
swbreak
case 160
gosub *opcode_cb_A0
swbreak
case 161
gosub *opcode_cb_A1
swbreak
case 162
gosub *opcode_cb_A2
swbreak
case 163
gosub *opcode_cb_A3
swbreak
case 164
gosub *opcode_cb_A4
swbreak
case 165
gosub *opcode_cb_A5
swbreak
case 166
gosub *opcode_cb_A6
swbreak
case 167
gosub *opcode_cb_A7
swbreak
case 168
gosub *opcode_cb_A8
swbreak
case 169
gosub *opcode_cb_A9
swbreak
case 170
gosub *opcode_cb_AA
swbreak
case 171
gosub *opcode_cb_AB
swbreak
case 172
gosub *opcode_cb_AC
swbreak
case 173
gosub *opcode_cb_AD
swbreak
case 174
gosub *opcode_cb_AE
swbreak
case 175
gosub *opcode_cb_AF
swbreak
case 176
gosub *opcode_cb_B0
swbreak
case 177
gosub *opcode_cb_B1
swbreak
case 178
gosub *opcode_cb_B2
swbreak
case 179
gosub *opcode_cb_B3
swbreak
case 180
gosub *opcode_cb_B4
swbreak
case 181
gosub *opcode_cb_B5
swbreak
case 182
gosub *opcode_cb_B6
swbreak
case 183
gosub *opcode_cb_B7
swbreak
case 184
gosub *opcode_cb_B8
swbreak
case 185
gosub *opcode_cb_B9
swbreak
case 186
gosub *opcode_cb_BA
swbreak
case 187
gosub *opcode_cb_BB
swbreak
case 188
gosub *opcode_cb_BC
swbreak
case 189
gosub *opcode_cb_BD
swbreak
case 190
gosub *opcode_cb_BE
swbreak
case 191
gosub *opcode_cb_BF
swbreak
case 192
gosub *opcode_cb_C0
swbreak
case 193
gosub *opcode_cb_C1
swbreak
case 194
gosub *opcode_cb_C2
swbreak
case 195
gosub *opcode_cb_C3
swbreak
case 196
gosub *opcode_cb_C4
swbreak
case 197
gosub *opcode_cb_C5
swbreak
case 198
gosub *opcode_cb_C6
swbreak
case 199
gosub *opcode_cb_C7
swbreak
case 200
gosub *opcode_cb_C8
swbreak
case 201
gosub *opcode_cb_C9
swbreak
case 202
gosub *opcode_cb_CA
swbreak
case 203
gosub *opcode_cb_CB
swbreak
case 204
gosub *opcode_cb_CC
swbreak
case 205
gosub *opcode_cb_CD
swbreak
case 206
gosub *opcode_cb_CE
swbreak
case 207
gosub *opcode_cb_CF
swbreak
case 208
gosub *opcode_cb_D0
swbreak
case 209
gosub *opcode_cb_D1
swbreak
case 210
gosub *opcode_cb_D2
swbreak
case 211
gosub *opcode_cb_D3
swbreak
case 212
gosub *opcode_cb_D4
swbreak
case 213
gosub *opcode_cb_D5
swbreak
case 214
gosub *opcode_cb_D6
swbreak
case 215
gosub *opcode_cb_D7
swbreak
case 216
gosub *opcode_cb_D8
swbreak
case 217
gosub *opcode_cb_D9
swbreak
case 218
gosub *opcode_cb_DA
swbreak
case 219
gosub *opcode_cb_DB
swbreak
case 220
gosub *opcode_cb_DC
swbreak
case 221
gosub *opcode_cb_DD
swbreak
case 222
gosub *opcode_cb_DE
swbreak
case 223
gosub *opcode_cb_DF
swbreak
case 224
gosub *opcode_cb_E0
swbreak
case 225
gosub *opcode_cb_E1
swbreak
case 226
gosub *opcode_cb_E2
swbreak
case 227
gosub *opcode_cb_E3
swbreak
case 228
gosub *opcode_cb_E4
swbreak
case 229
gosub *opcode_cb_E5
swbreak
case 230
gosub *opcode_cb_E6
swbreak
case 231
gosub *opcode_cb_E7
swbreak
case 232
gosub *opcode_cb_E8
swbreak
case 233
gosub *opcode_cb_E9
swbreak
case 234
gosub *opcode_cb_EA
swbreak
case 235
gosub *opcode_cb_EB
swbreak
case 236
gosub *opcode_cb_EC
swbreak
case 237
gosub *opcode_cb_ED
swbreak
case 238
gosub *opcode_cb_EE
swbreak
case 239
gosub *opcode_cb_EF
swbreak
case 240
gosub *opcode_cb_F0
swbreak
case 241
gosub *opcode_cb_F1
swbreak
case 242
gosub *opcode_cb_F2
swbreak
case 243
gosub *opcode_cb_F3
swbreak
case 244
gosub *opcode_cb_F4
swbreak
case 245
gosub *opcode_cb_F5
swbreak
case 246
gosub *opcode_cb_F6
swbreak
case 247
gosub *opcode_cb_F7
swbreak
case 248
gosub *opcode_cb_F8
swbreak
case 249
gosub *opcode_cb_F9
swbreak
case 250
gosub *opcode_cb_FA
swbreak
case 251
gosub *opcode_cb_FB
swbreak
case 252
gosub *opcode_cb_FC
swbreak
case 253
gosub *opcode_cb_FD
swbreak
case 254
gosub *opcode_cb_FE
swbreak
case 255
gosub *opcode_cb_FF
swbreak
swend
poke stack(0),14,peek(stack(0),14)+1
swbreak
case 204
gosub *opcode_CC
swbreak
case 205
gosub *opcode_CD
swbreak
case 206
gosub *opcode_CE
swbreak
case 207
gosub *opcode_CF
swbreak
case 208
gosub *opcode_D0
swbreak
case 209
gosub *opcode_D1
swbreak
case 210
gosub *opcode_D2
swbreak
case 211
gosub *opcode_D3
swbreak
case 212
gosub *opcode_D4
swbreak
case 213
gosub *opcode_D5
swbreak
case 214
gosub *opcode_D6
swbreak
case 215
gosub *opcode_D7
swbreak
case 216
gosub *opcode_D8
swbreak
case 217
gosub *opcode_D9
swbreak
case 218
gosub *opcode_DA
swbreak
case 219
gosub *opcode_DB
swbreak
case 220
gosub *opcode_DC
swbreak
case 221
opcodeidforddopcode=z80readmem(wpeek(stack(0),10))
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_dd(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+1
switch opcodeforsubcall
case 0
gosub *opcode_dd_00
swbreak
case 1
gosub *opcode_dd_01
swbreak
case 2
gosub *opcode_dd_02
swbreak
case 3
gosub *opcode_dd_03
swbreak
case 4
gosub *opcode_dd_04
swbreak
case 5
gosub *opcode_dd_05
swbreak
case 6
gosub *opcode_dd_06
swbreak
case 7
gosub *opcode_dd_07
swbreak
case 8
gosub *opcode_dd_08
swbreak
case 9
gosub *opcode_dd_09
swbreak
case 10
gosub *opcode_dd_0A
swbreak
case 11
gosub *opcode_dd_0B
swbreak
case 12
gosub *opcode_dd_0C
swbreak
case 13
gosub *opcode_dd_0D
swbreak
case 14
gosub *opcode_dd_0E
swbreak
case 15
gosub *opcode_dd_0F
swbreak
case 16
gosub *opcode_dd_10
swbreak
case 17
gosub *opcode_dd_11
swbreak
case 18
gosub *opcode_dd_12
swbreak
case 19
gosub *opcode_dd_13
swbreak
case 20
gosub *opcode_dd_14
swbreak
case 21
gosub *opcode_dd_15
swbreak
case 22
gosub *opcode_dd_16
swbreak
case 23
gosub *opcode_dd_17
swbreak
case 24
gosub *opcode_dd_18
swbreak
case 25
gosub *opcode_dd_19
swbreak
case 26
gosub *opcode_dd_1A
swbreak
case 27
gosub *opcode_dd_1B
swbreak
case 28
gosub *opcode_dd_1C
swbreak
case 29
gosub *opcode_dd_1D
swbreak
case 30
gosub *opcode_dd_1E
swbreak
case 31
gosub *opcode_dd_1F
swbreak
case 32
gosub *opcode_dd_20
swbreak
case 33
gosub *opcode_dd_21
swbreak
case 34
gosub *opcode_dd_22
swbreak
case 35
gosub *opcode_dd_23
swbreak
case 36
gosub *opcode_dd_24
swbreak
case 37
gosub *opcode_dd_25
swbreak
case 38
gosub *opcode_dd_26
swbreak
case 39
gosub *opcode_dd_27
swbreak
case 40
gosub *opcode_dd_28
swbreak
case 41
gosub *opcode_dd_29
swbreak
case 42
gosub *opcode_dd_2A
swbreak
case 43
gosub *opcode_dd_2B
swbreak
case 44
gosub *opcode_dd_2C
swbreak
case 45
gosub *opcode_dd_2D
swbreak
case 46
gosub *opcode_dd_2E
swbreak
case 47
gosub *opcode_dd_2F
swbreak
case 48
gosub *opcode_dd_30
swbreak
case 49
gosub *opcode_dd_31
swbreak
case 50
gosub *opcode_dd_32
swbreak
case 51
gosub *opcode_dd_33
swbreak
case 52
gosub *opcode_dd_34
swbreak
case 53
gosub *opcode_dd_35
swbreak
case 54
gosub *opcode_dd_36
swbreak
case 55
gosub *opcode_dd_37
swbreak
case 56
gosub *opcode_dd_38
swbreak
case 57
gosub *opcode_dd_39
swbreak
case 58
gosub *opcode_dd_3A
swbreak
case 59
gosub *opcode_dd_3B
swbreak
case 60
gosub *opcode_dd_3C
swbreak
case 61
gosub *opcode_dd_3D
swbreak
case 62
gosub *opcode_dd_3E
swbreak
case 63
gosub *opcode_dd_3F
swbreak
case 64
gosub *opcode_dd_40
swbreak
case 65
gosub *opcode_dd_41
swbreak
case 66
gosub *opcode_dd_42
swbreak
case 67
gosub *opcode_dd_43
swbreak
case 68
gosub *opcode_dd_44
swbreak
case 69
gosub *opcode_dd_45
swbreak
case 70
gosub *opcode_dd_46
swbreak
case 71
gosub *opcode_dd_47
swbreak
case 72
gosub *opcode_dd_48
swbreak
case 73
gosub *opcode_dd_49
swbreak
case 74
gosub *opcode_dd_4A
swbreak
case 75
gosub *opcode_dd_4B
swbreak
case 76
gosub *opcode_dd_4C
swbreak
case 77
gosub *opcode_dd_4D
swbreak
case 78
gosub *opcode_dd_4E
swbreak
case 79
gosub *opcode_dd_4F
swbreak
case 80
gosub *opcode_dd_50
swbreak
case 81
gosub *opcode_dd_51
swbreak
case 82
gosub *opcode_dd_52
swbreak
case 83
gosub *opcode_dd_53
swbreak
case 84
gosub *opcode_dd_54
swbreak
case 85
gosub *opcode_dd_55
swbreak
case 86
gosub *opcode_dd_56
swbreak
case 87
gosub *opcode_dd_57
swbreak
case 88
gosub *opcode_dd_58
swbreak
case 89
gosub *opcode_dd_59
swbreak
case 90
gosub *opcode_dd_5A
swbreak
case 91
gosub *opcode_dd_5B
swbreak
case 92
gosub *opcode_dd_5C
swbreak
case 93
gosub *opcode_dd_5D
swbreak
case 94
gosub *opcode_dd_5E
swbreak
case 95
gosub *opcode_dd_5F
swbreak
case 96
gosub *opcode_dd_60
swbreak
case 97
gosub *opcode_dd_61
swbreak
case 98
gosub *opcode_dd_62
swbreak
case 99
gosub *opcode_dd_63
swbreak
case 100
gosub *opcode_dd_64
swbreak
case 101
gosub *opcode_dd_65
swbreak
case 102
gosub *opcode_dd_66
swbreak
case 103
gosub *opcode_dd_67
swbreak
case 104
gosub *opcode_dd_68
swbreak
case 105
gosub *opcode_dd_69
swbreak
case 106
gosub *opcode_dd_6A
swbreak
case 107
gosub *opcode_dd_6B
swbreak
case 108
gosub *opcode_dd_6C
swbreak
case 109
gosub *opcode_dd_6D
swbreak
case 110
gosub *opcode_dd_6E
swbreak
case 111
gosub *opcode_dd_6F
swbreak
case 112
gosub *opcode_dd_70
swbreak
case 113
gosub *opcode_dd_71
swbreak
case 114
gosub *opcode_dd_72
swbreak
case 115
gosub *opcode_dd_73
swbreak
case 116
gosub *opcode_dd_74
swbreak
case 117
gosub *opcode_dd_75
swbreak
case 118
gosub *opcode_dd_76
swbreak
case 119
gosub *opcode_dd_77
swbreak
case 120
gosub *opcode_dd_78
swbreak
case 121
gosub *opcode_dd_79
swbreak
case 122
gosub *opcode_dd_7A
swbreak
case 123
gosub *opcode_dd_7B
swbreak
case 124
gosub *opcode_dd_7C
swbreak
case 125
gosub *opcode_dd_7D
swbreak
case 126
gosub *opcode_dd_7E
swbreak
case 127
gosub *opcode_dd_7F
swbreak
case 128
gosub *opcode_dd_80
swbreak
case 129
gosub *opcode_dd_81
swbreak
case 130
gosub *opcode_dd_82
swbreak
case 131
gosub *opcode_dd_83
swbreak
case 132
gosub *opcode_dd_84
swbreak
case 133
gosub *opcode_dd_85
swbreak
case 134
gosub *opcode_dd_86
swbreak
case 135
gosub *opcode_dd_87
swbreak
case 136
gosub *opcode_dd_88
swbreak
case 137
gosub *opcode_dd_89
swbreak
case 138
gosub *opcode_dd_8A
swbreak
case 139
gosub *opcode_dd_8B
swbreak
case 140
gosub *opcode_dd_8C
swbreak
case 141
gosub *opcode_dd_8D
swbreak
case 142
gosub *opcode_dd_8E
swbreak
case 143
gosub *opcode_dd_8F
swbreak
case 144
gosub *opcode_dd_90
swbreak
case 145
gosub *opcode_dd_91
swbreak
case 146
gosub *opcode_dd_92
swbreak
case 147
gosub *opcode_dd_93
swbreak
case 148
gosub *opcode_dd_94
swbreak
case 149
gosub *opcode_dd_95
swbreak
case 150
gosub *opcode_dd_96
swbreak
case 151
gosub *opcode_dd_97
swbreak
case 152
gosub *opcode_dd_98
swbreak
case 153
gosub *opcode_dd_99
swbreak
case 154
gosub *opcode_dd_9A
swbreak
case 155
gosub *opcode_dd_9B
swbreak
case 156
gosub *opcode_dd_9C
swbreak
case 157
gosub *opcode_dd_9D
swbreak
case 158
gosub *opcode_dd_9E
swbreak
case 159
gosub *opcode_dd_9F
swbreak
case 160
gosub *opcode_dd_A0
swbreak
case 161
gosub *opcode_dd_A1
swbreak
case 162
gosub *opcode_dd_A2
swbreak
case 163
gosub *opcode_dd_A3
swbreak
case 164
gosub *opcode_dd_A4
swbreak
case 165
gosub *opcode_dd_A5
swbreak
case 166
gosub *opcode_dd_A6
swbreak
case 167
gosub *opcode_dd_A7
swbreak
case 168
gosub *opcode_dd_A8
swbreak
case 169
gosub *opcode_dd_A9
swbreak
case 170
gosub *opcode_dd_AA
swbreak
case 171
gosub *opcode_dd_AB
swbreak
case 172
gosub *opcode_dd_AC
swbreak
case 173
gosub *opcode_dd_AD
swbreak
case 174
gosub *opcode_dd_AE
swbreak
case 175
gosub *opcode_dd_AF
swbreak
case 176
gosub *opcode_dd_B0
swbreak
case 177
gosub *opcode_dd_B1
swbreak
case 178
gosub *opcode_dd_B2
swbreak
case 179
gosub *opcode_dd_B3
swbreak
case 180
gosub *opcode_dd_B4
swbreak
case 181
gosub *opcode_dd_B5
swbreak
case 182
gosub *opcode_dd_B6
swbreak
case 183
gosub *opcode_dd_B7
swbreak
case 184
gosub *opcode_dd_B8
swbreak
case 185
gosub *opcode_dd_B9
swbreak
case 186
gosub *opcode_dd_BA
swbreak
case 187
gosub *opcode_dd_BB
swbreak
case 188
gosub *opcode_dd_BC
swbreak
case 189
gosub *opcode_dd_BD
swbreak
case 190
gosub *opcode_dd_BE
swbreak
case 191
gosub *opcode_dd_BF
swbreak
case 192
gosub *opcode_dd_C0
swbreak
case 193
gosub *opcode_dd_C1
swbreak
case 194
gosub *opcode_dd_C2
swbreak
case 195
gosub *opcode_dd_C3
swbreak
case 196
gosub *opcode_dd_C4
swbreak
case 197
gosub *opcode_dd_C5
swbreak
case 198
gosub *opcode_dd_C6
swbreak
case 199
gosub *opcode_dd_C7
swbreak
case 200
gosub *opcode_dd_C8
swbreak
case 201
gosub *opcode_dd_C9
swbreak
case 202
gosub *opcode_dd_CA
swbreak
case 203
cbopcodecallid=z80readmem(wpeek(stack(0),10)+1)
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
opcodeforsubcall=z80readmem(wpeek(stack(0),10)+1)
clockcount=opcodecc_ddcb(opcodeforsubcall)
switch opcodeforsubcall
case 0
gosub *opcode_dd_cb_00
swbreak
case 1
gosub *opcode_dd_cb_01
swbreak
case 2
gosub *opcode_dd_cb_02
swbreak
case 3
gosub *opcode_dd_cb_03
swbreak
case 4
gosub *opcode_dd_cb_04
swbreak
case 5
gosub *opcode_dd_cb_05
swbreak
case 6
gosub *opcode_dd_cb_06
swbreak
case 7
gosub *opcode_dd_cb_07
swbreak
case 8
gosub *opcode_dd_cb_08
swbreak
case 9
gosub *opcode_dd_cb_09
swbreak
case 10
gosub *opcode_dd_cb_0A
swbreak
case 11
gosub *opcode_dd_cb_0B
swbreak
case 12
gosub *opcode_dd_cb_0C
swbreak
case 13
gosub *opcode_dd_cb_0D
swbreak
case 14
gosub *opcode_dd_cb_0E
swbreak
case 15
gosub *opcode_dd_cb_0F
swbreak
case 16
gosub *opcode_dd_cb_10
swbreak
case 17
gosub *opcode_dd_cb_11
swbreak
case 18
gosub *opcode_dd_cb_12
swbreak
case 19
gosub *opcode_dd_cb_13
swbreak
case 20
gosub *opcode_dd_cb_14
swbreak
case 21
gosub *opcode_dd_cb_15
swbreak
case 22
gosub *opcode_dd_cb_16
swbreak
case 23
gosub *opcode_dd_cb_17
swbreak
case 24
gosub *opcode_dd_cb_18
swbreak
case 25
gosub *opcode_dd_cb_19
swbreak
case 26
gosub *opcode_dd_cb_1A
swbreak
case 27
gosub *opcode_dd_cb_1B
swbreak
case 28
gosub *opcode_dd_cb_1C
swbreak
case 29
gosub *opcode_dd_cb_1D
swbreak
case 30
gosub *opcode_dd_cb_1E
swbreak
case 31
gosub *opcode_dd_cb_1F
swbreak
case 32
gosub *opcode_dd_cb_20
swbreak
case 33
gosub *opcode_dd_cb_21
swbreak
case 34
gosub *opcode_dd_cb_22
swbreak
case 35
gosub *opcode_dd_cb_23
swbreak
case 36
gosub *opcode_dd_cb_24
swbreak
case 37
gosub *opcode_dd_cb_25
swbreak
case 38
gosub *opcode_dd_cb_26
swbreak
case 39
gosub *opcode_dd_cb_27
swbreak
case 40
gosub *opcode_dd_cb_28
swbreak
case 41
gosub *opcode_dd_cb_29
swbreak
case 42
gosub *opcode_dd_cb_2A
swbreak
case 43
gosub *opcode_dd_cb_2B
swbreak
case 44
gosub *opcode_dd_cb_2C
swbreak
case 45
gosub *opcode_dd_cb_2D
swbreak
case 46
gosub *opcode_dd_cb_2E
swbreak
case 47
gosub *opcode_dd_cb_2F
swbreak
case 48
gosub *opcode_dd_cb_30
swbreak
case 49
gosub *opcode_dd_cb_31
swbreak
case 50
gosub *opcode_dd_cb_32
swbreak
case 51
gosub *opcode_dd_cb_33
swbreak
case 52
gosub *opcode_dd_cb_34
swbreak
case 53
gosub *opcode_dd_cb_35
swbreak
case 54
gosub *opcode_dd_cb_36
swbreak
case 55
gosub *opcode_dd_cb_37
swbreak
case 56
gosub *opcode_dd_cb_38
swbreak
case 57
gosub *opcode_dd_cb_39
swbreak
case 58
gosub *opcode_dd_cb_3A
swbreak
case 59
gosub *opcode_dd_cb_3B
swbreak
case 60
gosub *opcode_dd_cb_3C
swbreak
case 61
gosub *opcode_dd_cb_3D
swbreak
case 62
gosub *opcode_dd_cb_3E
swbreak
case 63
gosub *opcode_dd_cb_3F
swbreak
case 64
gosub *opcode_dd_cb_40
swbreak
case 65
gosub *opcode_dd_cb_41
swbreak
case 66
gosub *opcode_dd_cb_42
swbreak
case 67
gosub *opcode_dd_cb_43
swbreak
case 68
gosub *opcode_dd_cb_44
swbreak
case 69
gosub *opcode_dd_cb_45
swbreak
case 70
gosub *opcode_dd_cb_46
swbreak
case 71
gosub *opcode_dd_cb_47
swbreak
case 72
gosub *opcode_dd_cb_48
swbreak
case 73
gosub *opcode_dd_cb_49
swbreak
case 74
gosub *opcode_dd_cb_4A
swbreak
case 75
gosub *opcode_dd_cb_4B
swbreak
case 76
gosub *opcode_dd_cb_4C
swbreak
case 77
gosub *opcode_dd_cb_4D
swbreak
case 78
gosub *opcode_dd_cb_4E
swbreak
case 79
gosub *opcode_dd_cb_4F
swbreak
case 80
gosub *opcode_dd_cb_50
swbreak
case 81
gosub *opcode_dd_cb_51
swbreak
case 82
gosub *opcode_dd_cb_52
swbreak
case 83
gosub *opcode_dd_cb_53
swbreak
case 84
gosub *opcode_dd_cb_54
swbreak
case 85
gosub *opcode_dd_cb_55
swbreak
case 86
gosub *opcode_dd_cb_56
swbreak
case 87
gosub *opcode_dd_cb_57
swbreak
case 88
gosub *opcode_dd_cb_58
swbreak
case 89
gosub *opcode_dd_cb_59
swbreak
case 90
gosub *opcode_dd_cb_5A
swbreak
case 91
gosub *opcode_dd_cb_5B
swbreak
case 92
gosub *opcode_dd_cb_5C
swbreak
case 93
gosub *opcode_dd_cb_5D
swbreak
case 94
gosub *opcode_dd_cb_5E
swbreak
case 95
gosub *opcode_dd_cb_5F
swbreak
case 96
gosub *opcode_dd_cb_60
swbreak
case 97
gosub *opcode_dd_cb_61
swbreak
case 98
gosub *opcode_dd_cb_62
swbreak
case 99
gosub *opcode_dd_cb_63
swbreak
case 100
gosub *opcode_dd_cb_64
swbreak
case 101
gosub *opcode_dd_cb_65
swbreak
case 102
gosub *opcode_dd_cb_66
swbreak
case 103
gosub *opcode_dd_cb_67
swbreak
case 104
gosub *opcode_dd_cb_68
swbreak
case 105
gosub *opcode_dd_cb_69
swbreak
case 106
gosub *opcode_dd_cb_6A
swbreak
case 107
gosub *opcode_dd_cb_6B
swbreak
case 108
gosub *opcode_dd_cb_6C
swbreak
case 109
gosub *opcode_dd_cb_6D
swbreak
case 110
gosub *opcode_dd_cb_6E
swbreak
case 111
gosub *opcode_dd_cb_6F
swbreak
case 112
gosub *opcode_dd_cb_70
swbreak
case 113
gosub *opcode_dd_cb_71
swbreak
case 114
gosub *opcode_dd_cb_72
swbreak
case 115
gosub *opcode_dd_cb_73
swbreak
case 116
gosub *opcode_dd_cb_74
swbreak
case 117
gosub *opcode_dd_cb_75
swbreak
case 118
gosub *opcode_dd_cb_76
swbreak
case 119
gosub *opcode_dd_cb_77
swbreak
case 120
gosub *opcode_dd_cb_78
swbreak
case 121
gosub *opcode_dd_cb_79
swbreak
case 122
gosub *opcode_dd_cb_7A
swbreak
case 123
gosub *opcode_dd_cb_7B
swbreak
case 124
gosub *opcode_dd_cb_7C
swbreak
case 125
gosub *opcode_dd_cb_7D
swbreak
case 126
gosub *opcode_dd_cb_7E
swbreak
case 127
gosub *opcode_dd_cb_7F
swbreak
case 128
gosub *opcode_dd_cb_80
swbreak
case 129
gosub *opcode_dd_cb_81
swbreak
case 130
gosub *opcode_dd_cb_82
swbreak
case 131
gosub *opcode_dd_cb_83
swbreak
case 132
gosub *opcode_dd_cb_84
swbreak
case 133
gosub *opcode_dd_cb_85
swbreak
case 134
gosub *opcode_dd_cb_86
swbreak
case 135
gosub *opcode_dd_cb_87
swbreak
case 136
gosub *opcode_dd_cb_88
swbreak
case 137
gosub *opcode_dd_cb_89
swbreak
case 138
gosub *opcode_dd_cb_8A
swbreak
case 139
gosub *opcode_dd_cb_8B
swbreak
case 140
gosub *opcode_dd_cb_8C
swbreak
case 141
gosub *opcode_dd_cb_8D
swbreak
case 142
gosub *opcode_dd_cb_8E
swbreak
case 143
gosub *opcode_dd_cb_8F
swbreak
case 144
gosub *opcode_dd_cb_90
swbreak
case 145
gosub *opcode_dd_cb_91
swbreak
case 146
gosub *opcode_dd_cb_92
swbreak
case 147
gosub *opcode_dd_cb_93
swbreak
case 148
gosub *opcode_dd_cb_94
swbreak
case 149
gosub *opcode_dd_cb_95
swbreak
case 150
gosub *opcode_dd_cb_96
swbreak
case 151
gosub *opcode_dd_cb_97
swbreak
case 152
gosub *opcode_dd_cb_98
swbreak
case 153
gosub *opcode_dd_cb_99
swbreak
case 154
gosub *opcode_dd_cb_9A
swbreak
case 155
gosub *opcode_dd_cb_9B
swbreak
case 156
gosub *opcode_dd_cb_9C
swbreak
case 157
gosub *opcode_dd_cb_9D
swbreak
case 158
gosub *opcode_dd_cb_9E
swbreak
case 159
gosub *opcode_dd_cb_9F
swbreak
case 160
gosub *opcode_dd_cb_A0
swbreak
case 161
gosub *opcode_dd_cb_A1
swbreak
case 162
gosub *opcode_dd_cb_A2
swbreak
case 163
gosub *opcode_dd_cb_A3
swbreak
case 164
gosub *opcode_dd_cb_A4
swbreak
case 165
gosub *opcode_dd_cb_A5
swbreak
case 166
gosub *opcode_dd_cb_A6
swbreak
case 167
gosub *opcode_dd_cb_A7
swbreak
case 168
gosub *opcode_dd_cb_A8
swbreak
case 169
gosub *opcode_dd_cb_A9
swbreak
case 170
gosub *opcode_dd_cb_AA
swbreak
case 171
gosub *opcode_dd_cb_AB
swbreak
case 172
gosub *opcode_dd_cb_AC
swbreak
case 173
gosub *opcode_dd_cb_AD
swbreak
case 174
gosub *opcode_dd_cb_AE
swbreak
case 175
gosub *opcode_dd_cb_AF
swbreak
case 176
gosub *opcode_dd_cb_B0
swbreak
case 177
gosub *opcode_dd_cb_B1
swbreak
case 178
gosub *opcode_dd_cb_B2
swbreak
case 179
gosub *opcode_dd_cb_B3
swbreak
case 180
gosub *opcode_dd_cb_B4
swbreak
case 181
gosub *opcode_dd_cb_B5
swbreak
case 182
gosub *opcode_dd_cb_B6
swbreak
case 183
gosub *opcode_dd_cb_B7
swbreak
case 184
gosub *opcode_dd_cb_B8
swbreak
case 185
gosub *opcode_dd_cb_B9
swbreak
case 186
gosub *opcode_dd_cb_BA
swbreak
case 187
gosub *opcode_dd_cb_BB
swbreak
case 188
gosub *opcode_dd_cb_BC
swbreak
case 189
gosub *opcode_dd_cb_BD
swbreak
case 190
gosub *opcode_dd_cb_BE
swbreak
case 191
gosub *opcode_dd_cb_BF
swbreak
case 192
gosub *opcode_dd_cb_C0
swbreak
case 193
gosub *opcode_dd_cb_C1
swbreak
case 194
gosub *opcode_dd_cb_C2
swbreak
case 195
gosub *opcode_dd_cb_C3
swbreak
case 196
gosub *opcode_dd_cb_C4
swbreak
case 197
gosub *opcode_dd_cb_C5
swbreak
case 198
gosub *opcode_dd_cb_C6
swbreak
case 199
gosub *opcode_dd_cb_C7
swbreak
case 200
gosub *opcode_dd_cb_C8
swbreak
case 201
gosub *opcode_dd_cb_C9
swbreak
case 202
gosub *opcode_dd_cb_CA
swbreak
case 203
gosub *opcode_dd_cb_CB
swbreak
case 204
gosub *opcode_dd_cb_CC
swbreak
case 205
gosub *opcode_dd_cb_CD
swbreak
case 206
gosub *opcode_dd_cb_CE
swbreak
case 207
gosub *opcode_dd_cb_CF
swbreak
case 208
gosub *opcode_dd_cb_D0
swbreak
case 209
gosub *opcode_dd_cb_D1
swbreak
case 210
gosub *opcode_dd_cb_D2
swbreak
case 211
gosub *opcode_dd_cb_D3
swbreak
case 212
gosub *opcode_dd_cb_D4
swbreak
case 213
gosub *opcode_dd_cb_D5
swbreak
case 214
gosub *opcode_dd_cb_D6
swbreak
case 215
gosub *opcode_dd_cb_D7
swbreak
case 216
gosub *opcode_dd_cb_D8
swbreak
case 217
gosub *opcode_dd_cb_D9
swbreak
case 218
gosub *opcode_dd_cb_DA
swbreak
case 219
gosub *opcode_dd_cb_DB
swbreak
case 220
gosub *opcode_dd_cb_DC
swbreak
case 221
gosub *opcode_dd_cb_DD
swbreak
case 222
gosub *opcode_dd_cb_DE
swbreak
case 223
gosub *opcode_dd_cb_DF
swbreak
case 224
gosub *opcode_dd_cb_E0
swbreak
case 225
gosub *opcode_dd_cb_E1
swbreak
case 226
gosub *opcode_dd_cb_E2
swbreak
case 227
gosub *opcode_dd_cb_E3
swbreak
case 228
gosub *opcode_dd_cb_E4
swbreak
case 229
gosub *opcode_dd_cb_E5
swbreak
case 230
gosub *opcode_dd_cb_E6
swbreak
case 231
gosub *opcode_dd_cb_E7
swbreak
case 232
gosub *opcode_dd_cb_E8
swbreak
case 233
gosub *opcode_dd_cb_E9
swbreak
case 234
gosub *opcode_dd_cb_EA
swbreak
case 235
gosub *opcode_dd_cb_EB
swbreak
case 236
gosub *opcode_dd_cb_EC
swbreak
case 237
gosub *opcode_dd_cb_ED
swbreak
case 238
gosub *opcode_dd_cb_EE
swbreak
case 239
gosub *opcode_dd_cb_EF
swbreak
case 240
gosub *opcode_dd_cb_F0
swbreak
case 241
gosub *opcode_dd_cb_F1
swbreak
case 242
gosub *opcode_dd_cb_F2
swbreak
case 243
gosub *opcode_dd_cb_F3
swbreak
case 244
gosub *opcode_dd_cb_F4
swbreak
case 245
gosub *opcode_dd_cb_F5
swbreak
case 246
gosub *opcode_dd_cb_F6
swbreak
case 247
gosub *opcode_dd_cb_F7
swbreak
case 248
gosub *opcode_dd_cb_F8
swbreak
case 249
gosub *opcode_dd_cb_F9
swbreak
case 250
gosub *opcode_dd_cb_FA
swbreak
case 251
gosub *opcode_dd_cb_FB
swbreak
case 252
gosub *opcode_dd_cb_FC
swbreak
case 253
gosub *opcode_dd_cb_FD
swbreak
case 254
gosub *opcode_dd_cb_FE
swbreak
case 255
gosub *opcode_dd_cb_FF
swbreak
swend
wpoke stack(0),10,wpeek(stack(0),10)+2
poke stack(0),14,peek(stack(0),14)+1
swbreak
case 204
gosub *opcode_dd_CC
swbreak
case 205
gosub *opcode_dd_CD
swbreak
case 206
gosub *opcode_dd_CE
swbreak
case 207
gosub *opcode_dd_CF
swbreak
case 208
gosub *opcode_dd_D0
swbreak
case 209
gosub *opcode_dd_D1
swbreak
case 210
gosub *opcode_dd_D2
swbreak
case 211
gosub *opcode_dd_D3
swbreak
case 212
gosub *opcode_dd_D4
swbreak
case 213
gosub *opcode_dd_D5
swbreak
case 214
gosub *opcode_dd_D6
swbreak
case 215
gosub *opcode_dd_D7
swbreak
case 216
gosub *opcode_dd_D8
swbreak
case 217
gosub *opcode_dd_D9
swbreak
case 218
gosub *opcode_dd_DA
swbreak
case 219
gosub *opcode_dd_DB
swbreak
case 220
gosub *opcode_dd_DC
swbreak
case 221
gosub *opcode_dd_DD
swbreak
case 222
gosub *opcode_dd_DE
swbreak
case 223
gosub *opcode_dd_DF
swbreak
case 224
gosub *opcode_dd_E0
swbreak
case 225
gosub *opcode_dd_E1
swbreak
case 226
gosub *opcode_dd_E2
swbreak
case 227
gosub *opcode_dd_E3
swbreak
case 228
gosub *opcode_dd_E4
swbreak
case 229
gosub *opcode_dd_E5
swbreak
case 230
gosub *opcode_dd_E6
swbreak
case 231
gosub *opcode_dd_E7
swbreak
case 232
gosub *opcode_dd_E8
swbreak
case 233
gosub *opcode_dd_E9
swbreak
case 234
gosub *opcode_dd_EA
swbreak
case 235
gosub *opcode_dd_EB
swbreak
case 236
gosub *opcode_dd_EC
swbreak
case 237
gosub *opcode_dd_ED
swbreak
case 238
gosub *opcode_dd_EE
swbreak
case 239
gosub *opcode_dd_EF
swbreak
case 240
gosub *opcode_dd_F0
swbreak
case 241
gosub *opcode_dd_F1
swbreak
case 242
gosub *opcode_dd_F2
swbreak
case 243
gosub *opcode_dd_F3
swbreak
case 244
gosub *opcode_dd_F4
swbreak
case 245
gosub *opcode_dd_F5
swbreak
case 246
gosub *opcode_dd_F6
swbreak
case 247
gosub *opcode_dd_F7
swbreak
case 248
gosub *opcode_dd_F8
swbreak
case 249
gosub *opcode_dd_F9
swbreak
case 250
gosub *opcode_dd_FA
swbreak
case 251
gosub *opcode_dd_FB
swbreak
case 252
gosub *opcode_dd_FC
swbreak
case 253
gosub *opcode_dd_FD
swbreak
case 254
gosub *opcode_dd_FE
swbreak
case 255
gosub *opcode_dd_FF
swbreak
swend
poke stack(0),14,peek(stack(0),14)+1
swbreak
case 222
gosub *opcode_DE
swbreak
case 223
gosub *opcode_DF
swbreak
case 224
gosub *opcode_E0
swbreak
case 225
gosub *opcode_E1
swbreak
case 226
gosub *opcode_E2
swbreak
case 227
gosub *opcode_E3
swbreak
case 228
gosub *opcode_E4
swbreak
case 229
gosub *opcode_E5
swbreak
case 230
gosub *opcode_E6
swbreak
case 231
gosub *opcode_E7
swbreak
case 232
gosub *opcode_E8
swbreak
case 233
gosub *opcode_E9
swbreak
case 234
gosub *opcode_EA
swbreak
case 235
gosub *opcode_EB
swbreak
case 236
gosub *opcode_EC
swbreak
case 237
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_ed(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+1
switch opcodeforsubcall
case 0
gosub *opcode_ed_00
swbreak
case 1
gosub *opcode_ed_01
swbreak
case 2
gosub *opcode_ed_02
swbreak
case 3
gosub *opcode_ed_03
swbreak
case 4
gosub *opcode_ed_04
swbreak
case 5
gosub *opcode_ed_05
swbreak
case 6
gosub *opcode_ed_06
swbreak
case 7
gosub *opcode_ed_07
swbreak
case 8
gosub *opcode_ed_08
swbreak
case 9
gosub *opcode_ed_09
swbreak
case 10
gosub *opcode_ed_0A
swbreak
case 11
gosub *opcode_ed_0B
swbreak
case 12
gosub *opcode_ed_0C
swbreak
case 13
gosub *opcode_ed_0D
swbreak
case 14
gosub *opcode_ed_0E
swbreak
case 15
gosub *opcode_ed_0F
swbreak
case 16
gosub *opcode_ed_10
swbreak
case 17
gosub *opcode_ed_11
swbreak
case 18
gosub *opcode_ed_12
swbreak
case 19
gosub *opcode_ed_13
swbreak
case 20
gosub *opcode_ed_14
swbreak
case 21
gosub *opcode_ed_15
swbreak
case 22
gosub *opcode_ed_16
swbreak
case 23
gosub *opcode_ed_17
swbreak
case 24
gosub *opcode_ed_18
swbreak
case 25
gosub *opcode_ed_19
swbreak
case 26
gosub *opcode_ed_1A
swbreak
case 27
gosub *opcode_ed_1B
swbreak
case 28
gosub *opcode_ed_1C
swbreak
case 29
gosub *opcode_ed_1D
swbreak
case 30
gosub *opcode_ed_1E
swbreak
case 31
gosub *opcode_ed_1F
swbreak
case 32
gosub *opcode_ed_20
swbreak
case 33
gosub *opcode_ed_21
swbreak
case 34
gosub *opcode_ed_22
swbreak
case 35
gosub *opcode_ed_23
swbreak
case 36
gosub *opcode_ed_24
swbreak
case 37
gosub *opcode_ed_25
swbreak
case 38
gosub *opcode_ed_26
swbreak
case 39
gosub *opcode_ed_27
swbreak
case 40
gosub *opcode_ed_28
swbreak
case 41
gosub *opcode_ed_29
swbreak
case 42
gosub *opcode_ed_2A
swbreak
case 43
gosub *opcode_ed_2B
swbreak
case 44
gosub *opcode_ed_2C
swbreak
case 45
gosub *opcode_ed_2D
swbreak
case 46
gosub *opcode_ed_2E
swbreak
case 47
gosub *opcode_ed_2F
swbreak
case 48
gosub *opcode_ed_30
swbreak
case 49
gosub *opcode_ed_31
swbreak
case 50
gosub *opcode_ed_32
swbreak
case 51
gosub *opcode_ed_33
swbreak
case 52
gosub *opcode_ed_34
swbreak
case 53
gosub *opcode_ed_35
swbreak
case 54
gosub *opcode_ed_36
swbreak
case 55
gosub *opcode_ed_37
swbreak
case 56
gosub *opcode_ed_38
swbreak
case 57
gosub *opcode_ed_39
swbreak
case 58
gosub *opcode_ed_3A
swbreak
case 59
gosub *opcode_ed_3B
swbreak
case 60
gosub *opcode_ed_3C
swbreak
case 61
gosub *opcode_ed_3D
swbreak
case 62
gosub *opcode_ed_3E
swbreak
case 63
gosub *opcode_ed_3F
swbreak
case 64
gosub *opcode_ed_40
swbreak
case 65
gosub *opcode_ed_41
swbreak
case 66
gosub *opcode_ed_42
swbreak
case 67
gosub *opcode_ed_43
swbreak
case 68
gosub *opcode_ed_44
swbreak
case 69
gosub *opcode_ed_45
swbreak
case 70
gosub *opcode_ed_46
swbreak
case 71
gosub *opcode_ed_47
swbreak
case 72
gosub *opcode_ed_48
swbreak
case 73
gosub *opcode_ed_49
swbreak
case 74
gosub *opcode_ed_4A
swbreak
case 75
gosub *opcode_ed_4B
swbreak
case 76
gosub *opcode_ed_4C
swbreak
case 77
gosub *opcode_ed_4D
swbreak
case 78
gosub *opcode_ed_4E
swbreak
case 79
gosub *opcode_ed_4F
swbreak
case 80
gosub *opcode_ed_50
swbreak
case 81
gosub *opcode_ed_51
swbreak
case 82
gosub *opcode_ed_52
swbreak
case 83
gosub *opcode_ed_53
swbreak
case 84
gosub *opcode_ed_54
swbreak
case 85
gosub *opcode_ed_55
swbreak
case 86
gosub *opcode_ed_56
swbreak
case 87
gosub *opcode_ed_57
swbreak
case 88
gosub *opcode_ed_58
swbreak
case 89
gosub *opcode_ed_59
swbreak
case 90
gosub *opcode_ed_5A
swbreak
case 91
gosub *opcode_ed_5B
swbreak
case 92
gosub *opcode_ed_5C
swbreak
case 93
gosub *opcode_ed_5D
swbreak
case 94
gosub *opcode_ed_5E
swbreak
case 95
gosub *opcode_ed_5F
swbreak
case 96
gosub *opcode_ed_60
swbreak
case 97
gosub *opcode_ed_61
swbreak
case 98
gosub *opcode_ed_62
swbreak
case 99
gosub *opcode_ed_63
swbreak
case 100
gosub *opcode_ed_64
swbreak
case 101
gosub *opcode_ed_65
swbreak
case 102
gosub *opcode_ed_66
swbreak
case 103
gosub *opcode_ed_67
swbreak
case 104
gosub *opcode_ed_68
swbreak
case 105
gosub *opcode_ed_69
swbreak
case 106
gosub *opcode_ed_6A
swbreak
case 107
gosub *opcode_ed_6B
swbreak
case 108
gosub *opcode_ed_6C
swbreak
case 109
gosub *opcode_ed_6D
swbreak
case 110
gosub *opcode_ed_6E
swbreak
case 111
gosub *opcode_ed_6F
swbreak
case 112
gosub *opcode_ed_70
swbreak
case 113
gosub *opcode_ed_71
swbreak
case 114
gosub *opcode_ed_72
swbreak
case 115
gosub *opcode_ed_73
swbreak
case 116
gosub *opcode_ed_74
swbreak
case 117
gosub *opcode_ed_75
swbreak
case 118
gosub *opcode_ed_76
swbreak
case 119
gosub *opcode_ed_77
swbreak
case 120
gosub *opcode_ed_78
swbreak
case 121
gosub *opcode_ed_79
swbreak
case 122
gosub *opcode_ed_7A
swbreak
case 123
gosub *opcode_ed_7B
swbreak
case 124
gosub *opcode_ed_7C
swbreak
case 125
gosub *opcode_ed_7D
swbreak
case 126
gosub *opcode_ed_7E
swbreak
case 127
gosub *opcode_ed_7F
swbreak
case 128
gosub *opcode_ed_80
swbreak
case 129
gosub *opcode_ed_81
swbreak
case 130
gosub *opcode_ed_82
swbreak
case 131
gosub *opcode_ed_83
swbreak
case 132
gosub *opcode_ed_84
swbreak
case 133
gosub *opcode_ed_85
swbreak
case 134
gosub *opcode_ed_86
swbreak
case 135
gosub *opcode_ed_87
swbreak
case 136
gosub *opcode_ed_88
swbreak
case 137
gosub *opcode_ed_89
swbreak
case 138
gosub *opcode_ed_8A
swbreak
case 139
gosub *opcode_ed_8B
swbreak
case 140
gosub *opcode_ed_8C
swbreak
case 141
gosub *opcode_ed_8D
swbreak
case 142
gosub *opcode_ed_8E
swbreak
case 143
gosub *opcode_ed_8F
swbreak
case 144
gosub *opcode_ed_90
swbreak
case 145
gosub *opcode_ed_91
swbreak
case 146
gosub *opcode_ed_92
swbreak
case 147
gosub *opcode_ed_93
swbreak
case 148
gosub *opcode_ed_94
swbreak
case 149
gosub *opcode_ed_95
swbreak
case 150
gosub *opcode_ed_96
swbreak
case 151
gosub *opcode_ed_97
swbreak
case 152
gosub *opcode_ed_98
swbreak
case 153
gosub *opcode_ed_99
swbreak
case 154
gosub *opcode_ed_9A
swbreak
case 155
gosub *opcode_ed_9B
swbreak
case 156
gosub *opcode_ed_9C
swbreak
case 157
gosub *opcode_ed_9D
swbreak
case 158
gosub *opcode_ed_9E
swbreak
case 159
gosub *opcode_ed_9F
swbreak
case 160
gosub *opcode_ed_A0
swbreak
case 161
gosub *opcode_ed_A1
swbreak
case 162
gosub *opcode_ed_A2
swbreak
case 163
gosub *opcode_ed_A3
swbreak
case 164
gosub *opcode_ed_A4
swbreak
case 165
gosub *opcode_ed_A5
swbreak
case 166
gosub *opcode_ed_A6
swbreak
case 167
gosub *opcode_ed_A7
swbreak
case 168
gosub *opcode_ed_A8
swbreak
case 169
gosub *opcode_ed_A9
swbreak
case 170
gosub *opcode_ed_AA
swbreak
case 171
gosub *opcode_ed_AB
swbreak
case 172
gosub *opcode_ed_AC
swbreak
case 173
gosub *opcode_ed_AD
swbreak
case 174
gosub *opcode_ed_AE
swbreak
case 175
gosub *opcode_ed_AF
swbreak
case 176
gosub *opcode_ed_B0
swbreak
case 177
gosub *opcode_ed_B1
swbreak
case 178
gosub *opcode_ed_B2
swbreak
case 179
gosub *opcode_ed_B3
swbreak
case 180
gosub *opcode_ed_B4
swbreak
case 181
gosub *opcode_ed_B5
swbreak
case 182
gosub *opcode_ed_B6
swbreak
case 183
gosub *opcode_ed_B7
swbreak
case 184
gosub *opcode_ed_B8
swbreak
case 185
gosub *opcode_ed_B9
swbreak
case 186
gosub *opcode_ed_BA
swbreak
case 187
gosub *opcode_ed_BB
swbreak
case 188
gosub *opcode_ed_BC
swbreak
case 189
gosub *opcode_ed_BD
swbreak
case 190
gosub *opcode_ed_BE
swbreak
case 191
gosub *opcode_ed_BF
swbreak
case 192
gosub *opcode_ed_C0
swbreak
case 193
gosub *opcode_ed_C1
swbreak
case 194
gosub *opcode_ed_C2
swbreak
case 195
gosub *opcode_ed_C3
swbreak
case 196
gosub *opcode_ed_C4
swbreak
case 197
gosub *opcode_ed_C5
swbreak
case 198
gosub *opcode_ed_C6
swbreak
case 199
gosub *opcode_ed_C7
swbreak
case 200
gosub *opcode_ed_C8
swbreak
case 201
gosub *opcode_ed_C9
swbreak
case 202
gosub *opcode_ed_CA
swbreak
case 203
gosub *opcode_ed_CB
swbreak
case 204
gosub *opcode_ed_CC
swbreak
case 205
gosub *opcode_ed_CD
swbreak
case 206
gosub *opcode_ed_CE
swbreak
case 207
gosub *opcode_ed_CF
swbreak
case 208
gosub *opcode_ed_D0
swbreak
case 209
gosub *opcode_ed_D1
swbreak
case 210
gosub *opcode_ed_D2
swbreak
case 211
gosub *opcode_ed_D3
swbreak
case 212
gosub *opcode_ed_D4
swbreak
case 213
gosub *opcode_ed_D5
swbreak
case 214
gosub *opcode_ed_D6
swbreak
case 215
gosub *opcode_ed_D7
swbreak
case 216
gosub *opcode_ed_D8
swbreak
case 217
gosub *opcode_ed_D9
swbreak
case 218
gosub *opcode_ed_DA
swbreak
case 219
gosub *opcode_ed_DB
swbreak
case 220
gosub *opcode_ed_DC
swbreak
case 221
gosub *opcode_ed_DD
swbreak
case 222
gosub *opcode_ed_DE
swbreak
case 223
gosub *opcode_ed_DF
swbreak
case 224
gosub *opcode_ed_E0
swbreak
case 225
gosub *opcode_ed_E1
swbreak
case 226
gosub *opcode_ed_E2
swbreak
case 227
gosub *opcode_ed_E3
swbreak
case 228
gosub *opcode_ed_E4
swbreak
case 229
gosub *opcode_ed_E5
swbreak
case 230
gosub *opcode_ed_E6
swbreak
case 231
gosub *opcode_ed_E7
swbreak
case 232
gosub *opcode_ed_E8
swbreak
case 233
gosub *opcode_ed_E9
swbreak
case 234
gosub *opcode_ed_EA
swbreak
case 235
gosub *opcode_ed_EB
swbreak
case 236
gosub *opcode_ed_EC
swbreak
case 237
gosub *opcode_ed_ED
swbreak
case 238
gosub *opcode_ed_EE
swbreak
case 239
gosub *opcode_ed_EF
swbreak
case 240
gosub *opcode_ed_F0
swbreak
case 241
gosub *opcode_ed_F1
swbreak
case 242
gosub *opcode_ed_F2
swbreak
case 243
gosub *opcode_ed_F3
swbreak
case 244
gosub *opcode_ed_F4
swbreak
case 245
gosub *opcode_ed_F5
swbreak
case 246
gosub *opcode_ed_F6
swbreak
case 247
gosub *opcode_ed_F7
swbreak
case 248
gosub *opcode_ed_F8
swbreak
case 249
gosub *opcode_ed_F9
swbreak
case 250
gosub *opcode_ed_FA
swbreak
case 251
gosub *opcode_ed_FB
swbreak
case 252
gosub *opcode_ed_FC
swbreak
case 253
gosub *opcode_ed_FD
swbreak
case 254
gosub *opcode_ed_FE
swbreak
case 255
gosub *opcode_ed_FF
swbreak
swend
poke stack(0),14,peek(stack(0),14)+1
swbreak
case 238
gosub *opcode_EE
swbreak
case 239
gosub *opcode_EF
swbreak
case 240
gosub *opcode_F0
swbreak
case 241
gosub *opcode_F1
swbreak
case 242
gosub *opcode_F2
swbreak
case 243
gosub *opcode_F3
swbreak
case 244
gosub *opcode_F4
swbreak
case 245
gosub *opcode_F5
swbreak
case 246
gosub *opcode_F6
swbreak
case 247
gosub *opcode_F7
swbreak
case 248
gosub *opcode_F8
swbreak
case 249
gosub *opcode_F9
swbreak
case 250
gosub *opcode_FA
swbreak
case 251
gosub *opcode_FB
swbreak
case 252
gosub *opcode_FC
swbreak
case 253
opcodeidforddopcode=z80readmem(wpeek(stack(0),10))
opcodeforsubcall=z80readmem(wpeek(stack(0),10))
clockcount=opcodecc_fd(opcodeforsubcall)
wpoke stack(0),10,wpeek(stack(0),10)+1
switch opcodeforsubcall
case 0
gosub *opcode_fd_00
swbreak
case 1
gosub *opcode_fd_01
swbreak
case 2
gosub *opcode_fd_02
swbreak
case 3
gosub *opcode_fd_03
swbreak
case 4
gosub *opcode_fd_04
swbreak
case 5
gosub *opcode_fd_05
swbreak
case 6
gosub *opcode_fd_06
swbreak
case 7
gosub *opcode_fd_07
swbreak
case 8
gosub *opcode_fd_08
swbreak
case 9
gosub *opcode_fd_09
swbreak
case 10
gosub *opcode_fd_0A
swbreak
case 11
gosub *opcode_fd_0B
swbreak
case 12
gosub *opcode_fd_0C
swbreak
case 13
gosub *opcode_fd_0D
swbreak
case 14
gosub *opcode_fd_0E
swbreak
case 15
gosub *opcode_fd_0F
swbreak
case 16
gosub *opcode_fd_10
swbreak
case 17
gosub *opcode_fd_11
swbreak
case 18
gosub *opcode_fd_12
swbreak
case 19
gosub *opcode_fd_13
swbreak
case 20
gosub *opcode_fd_14
swbreak
case 21
gosub *opcode_fd_15
swbreak
case 22
gosub *opcode_fd_16
swbreak
case 23
gosub *opcode_fd_17
swbreak
case 24
gosub *opcode_fd_18
swbreak
case 25
gosub *opcode_fd_19
swbreak
case 26
gosub *opcode_fd_1A
swbreak
case 27
gosub *opcode_fd_1B
swbreak
case 28
gosub *opcode_fd_1C
swbreak
case 29
gosub *opcode_fd_1D
swbreak
case 30
gosub *opcode_fd_1E
swbreak
case 31
gosub *opcode_fd_1F
swbreak
case 32
gosub *opcode_fd_20
swbreak
case 33
gosub *opcode_fd_21
swbreak
case 34
gosub *opcode_fd_22
swbreak
case 35
gosub *opcode_fd_23
swbreak
case 36
gosub *opcode_fd_24
swbreak
case 37
gosub *opcode_fd_25
swbreak
case 38
gosub *opcode_fd_26
swbreak
case 39
gosub *opcode_fd_27
swbreak
case 40
gosub *opcode_fd_28
swbreak
case 41
gosub *opcode_fd_29
swbreak
case 42
gosub *opcode_fd_2A
swbreak
case 43
gosub *opcode_fd_2B
swbreak
case 44
gosub *opcode_fd_2C
swbreak
case 45
gosub *opcode_fd_2D
swbreak
case 46
gosub *opcode_fd_2E
swbreak
case 47
gosub *opcode_fd_2F
swbreak
case 48
gosub *opcode_fd_30
swbreak
case 49
gosub *opcode_fd_31
swbreak
case 50
gosub *opcode_fd_32
swbreak
case 51
gosub *opcode_fd_33
swbreak
case 52
gosub *opcode_fd_34
swbreak
case 53
gosub *opcode_fd_35
swbreak
case 54
gosub *opcode_fd_36
swbreak
case 55
gosub *opcode_fd_37
swbreak
case 56
gosub *opcode_fd_38
swbreak
case 57
gosub *opcode_fd_39
swbreak
case 58
gosub *opcode_fd_3A
swbreak
case 59
gosub *opcode_fd_3B
swbreak
case 60
gosub *opcode_fd_3C
swbreak
case 61
gosub *opcode_fd_3D
swbreak
case 62
gosub *opcode_fd_3E
swbreak
case 63
gosub *opcode_fd_3F
swbreak
case 64
gosub *opcode_fd_40
swbreak
case 65
gosub *opcode_fd_41
swbreak
case 66
gosub *opcode_fd_42
swbreak
case 67
gosub *opcode_fd_43
swbreak
case 68
gosub *opcode_fd_44
swbreak
case 69
gosub *opcode_fd_45
swbreak
case 70
gosub *opcode_fd_46
swbreak
case 71
gosub *opcode_fd_47
swbreak
case 72
gosub *opcode_fd_48
swbreak
case 73
gosub *opcode_fd_49
swbreak
case 74
gosub *opcode_fd_4A
swbreak
case 75
gosub *opcode_fd_4B
swbreak
case 76
gosub *opcode_fd_4C
swbreak
case 77
gosub *opcode_fd_4D
swbreak
case 78
gosub *opcode_fd_4E
swbreak
case 79
gosub *opcode_fd_4F
swbreak
case 80
gosub *opcode_fd_50
swbreak
case 81
gosub *opcode_fd_51
swbreak
case 82
gosub *opcode_fd_52
swbreak
case 83
gosub *opcode_fd_53
swbreak
case 84
gosub *opcode_fd_54
swbreak
case 85
gosub *opcode_fd_55
swbreak
case 86
gosub *opcode_fd_56
swbreak
case 87
gosub *opcode_fd_57
swbreak
case 88
gosub *opcode_fd_58
swbreak
case 89
gosub *opcode_fd_59
swbreak
case 90
gosub *opcode_fd_5A
swbreak
case 91
gosub *opcode_fd_5B
swbreak
case 92
gosub *opcode_fd_5C
swbreak
case 93
gosub *opcode_fd_5D
swbreak
case 94
gosub *opcode_fd_5E
swbreak
case 95
gosub *opcode_fd_5F
swbreak
case 96
gosub *opcode_fd_60
swbreak
case 97
gosub *opcode_fd_61
swbreak
case 98
gosub *opcode_fd_62
swbreak
case 99
gosub *opcode_fd_63
swbreak
case 100
gosub *opcode_fd_64
swbreak
case 101
gosub *opcode_fd_65
swbreak
case 102
gosub *opcode_fd_66
swbreak
case 103
gosub *opcode_fd_67
swbreak
case 104
gosub *opcode_fd_68
swbreak
case 105
gosub *opcode_fd_69
swbreak
case 106
gosub *opcode_fd_6A
swbreak
case 107
gosub *opcode_fd_6B
swbreak
case 108
gosub *opcode_fd_6C
swbreak
case 109
gosub *opcode_fd_6D
swbreak
case 110
gosub *opcode_fd_6E
swbreak
case 111
gosub *opcode_fd_6F
swbreak
case 112
gosub *opcode_fd_70
swbreak
case 113
gosub *opcode_fd_71
swbreak
case 114
gosub *opcode_fd_72
swbreak
case 115
gosub *opcode_fd_73
swbreak
case 116
gosub *opcode_fd_74
swbreak
case 117
gosub *opcode_fd_75
swbreak
case 118
gosub *opcode_fd_76
swbreak
case 119
gosub *opcode_fd_77
swbreak
case 120
gosub *opcode_fd_78
swbreak
case 121
gosub *opcode_fd_79
swbreak
case 122
gosub *opcode_fd_7A
swbreak
case 123
gosub *opcode_fd_7B
swbreak
case 124
gosub *opcode_fd_7C
swbreak
case 125
gosub *opcode_fd_7D
swbreak
case 126
gosub *opcode_fd_7E
swbreak
case 127
gosub *opcode_fd_7F
swbreak
case 128
gosub *opcode_fd_80
swbreak
case 129
gosub *opcode_fd_81
swbreak
case 130
gosub *opcode_fd_82
swbreak
case 131
gosub *opcode_fd_83
swbreak
case 132
gosub *opcode_fd_84
swbreak
case 133
gosub *opcode_fd_85
swbreak
case 134
gosub *opcode_fd_86
swbreak
case 135
gosub *opcode_fd_87
swbreak
case 136
gosub *opcode_fd_88
swbreak
case 137
gosub *opcode_fd_89
swbreak
case 138
gosub *opcode_fd_8A
swbreak
case 139
gosub *opcode_fd_8B
swbreak
case 140
gosub *opcode_fd_8C
swbreak
case 141
gosub *opcode_fd_8D
swbreak
case 142
gosub *opcode_fd_8E
swbreak
case 143
gosub *opcode_fd_8F
swbreak
case 144
gosub *opcode_fd_90
swbreak
case 145
gosub *opcode_fd_91
swbreak
case 146
gosub *opcode_fd_92
swbreak
case 147
gosub *opcode_fd_93
swbreak
case 148
gosub *opcode_fd_94
swbreak
case 149
gosub *opcode_fd_95
swbreak
case 150
gosub *opcode_fd_96
swbreak
case 151
gosub *opcode_fd_97
swbreak
case 152
gosub *opcode_fd_98
swbreak
case 153
gosub *opcode_fd_99
swbreak
case 154
gosub *opcode_fd_9A
swbreak
case 155
gosub *opcode_fd_9B
swbreak
case 156
gosub *opcode_fd_9C
swbreak
case 157
gosub *opcode_fd_9D
swbreak
case 158
gosub *opcode_fd_9E
swbreak
case 159
gosub *opcode_fd_9F
swbreak
case 160
gosub *opcode_fd_A0
swbreak
case 161
gosub *opcode_fd_A1
swbreak
case 162
gosub *opcode_fd_A2
swbreak
case 163
gosub *opcode_fd_A3
swbreak
case 164
gosub *opcode_fd_A4
swbreak
case 165
gosub *opcode_fd_A5
swbreak
case 166
gosub *opcode_fd_A6
swbreak
case 167
gosub *opcode_fd_A7
swbreak
case 168
gosub *opcode_fd_A8
swbreak
case 169
gosub *opcode_fd_A9
swbreak
case 170
gosub *opcode_fd_AA
swbreak
case 171
gosub *opcode_fd_AB
swbreak
case 172
gosub *opcode_fd_AC
swbreak
case 173
gosub *opcode_fd_AD
swbreak
case 174
gosub *opcode_fd_AE
swbreak
case 175
gosub *opcode_fd_AF
swbreak
case 176
gosub *opcode_fd_B0
swbreak
case 177
gosub *opcode_fd_B1
swbreak
case 178
gosub *opcode_fd_B2
swbreak
case 179
gosub *opcode_fd_B3
swbreak
case 180
gosub *opcode_fd_B4
swbreak
case 181
gosub *opcode_fd_B5
swbreak
case 182
gosub *opcode_fd_B6
swbreak
case 183
gosub *opcode_fd_B7
swbreak
case 184
gosub *opcode_fd_B8
swbreak
case 185
gosub *opcode_fd_B9
swbreak
case 186
gosub *opcode_fd_BA
swbreak
case 187
gosub *opcode_fd_BB
swbreak
case 188
gosub *opcode_fd_BC
swbreak
case 189
gosub *opcode_fd_BD
swbreak
case 190
gosub *opcode_fd_BE
swbreak
case 191
gosub *opcode_fd_BF
swbreak
case 192
gosub *opcode_fd_C0
swbreak
case 193
gosub *opcode_fd_C1
swbreak
case 194
gosub *opcode_fd_C2
swbreak
case 195
gosub *opcode_fd_C3
swbreak
case 196
gosub *opcode_fd_C4
swbreak
case 197
gosub *opcode_fd_C5
swbreak
case 198
gosub *opcode_fd_C6
swbreak
case 199
gosub *opcode_fd_C7
swbreak
case 200
gosub *opcode_fd_C8
swbreak
case 201
gosub *opcode_fd_C9
swbreak
case 202
gosub *opcode_fd_CA
swbreak
case 203
cbopcodecallid=z80readmem(wpeek(stack(0),10)+1)
cbopcodecallidforbit=(opcodeforsubcall-0x40)/8
opcodeforsubcall=z80readmem(wpeek(stack(0),10)+1)
clockcount=opcodecc_fdcb(opcodeforsubcall)
switch opcodeforsubcall
case 0
gosub *opcode_fd_cb_00
swbreak
case 1
gosub *opcode_fd_cb_01
swbreak
case 2
gosub *opcode_fd_cb_02
swbreak
case 3
gosub *opcode_fd_cb_03
swbreak
case 4
gosub *opcode_fd_cb_04
swbreak
case 5
gosub *opcode_fd_cb_05
swbreak
case 6
gosub *opcode_fd_cb_06
swbreak
case 7
gosub *opcode_fd_cb_07
swbreak
case 8
gosub *opcode_fd_cb_08
swbreak
case 9
gosub *opcode_fd_cb_09
swbreak
case 10
gosub *opcode_fd_cb_0A
swbreak
case 11
gosub *opcode_fd_cb_0B
swbreak
case 12
gosub *opcode_fd_cb_0C
swbreak
case 13
gosub *opcode_fd_cb_0D
swbreak
case 14
gosub *opcode_fd_cb_0E
swbreak
case 15
gosub *opcode_fd_cb_0F
swbreak
case 16
gosub *opcode_fd_cb_10
swbreak
case 17
gosub *opcode_fd_cb_11
swbreak
case 18
gosub *opcode_fd_cb_12
swbreak
case 19
gosub *opcode_fd_cb_13
swbreak
case 20
gosub *opcode_fd_cb_14
swbreak
case 21
gosub *opcode_fd_cb_15
swbreak
case 22
gosub *opcode_fd_cb_16
swbreak
case 23
gosub *opcode_fd_cb_17
swbreak
case 24
gosub *opcode_fd_cb_18
swbreak
case 25
gosub *opcode_fd_cb_19
swbreak
case 26
gosub *opcode_fd_cb_1A
swbreak
case 27
gosub *opcode_fd_cb_1B
swbreak
case 28
gosub *opcode_fd_cb_1C
swbreak
case 29
gosub *opcode_fd_cb_1D
swbreak
case 30
gosub *opcode_fd_cb_1E
swbreak
case 31
gosub *opcode_fd_cb_1F
swbreak
case 32
gosub *opcode_fd_cb_20
swbreak
case 33
gosub *opcode_fd_cb_21
swbreak
case 34
gosub *opcode_fd_cb_22
swbreak
case 35
gosub *opcode_fd_cb_23
swbreak
case 36
gosub *opcode_fd_cb_24
swbreak
case 37
gosub *opcode_fd_cb_25
swbreak
case 38
gosub *opcode_fd_cb_26
swbreak
case 39
gosub *opcode_fd_cb_27
swbreak
case 40
gosub *opcode_fd_cb_28
swbreak
case 41
gosub *opcode_fd_cb_29
swbreak
case 42
gosub *opcode_fd_cb_2A
swbreak
case 43
gosub *opcode_fd_cb_2B
swbreak
case 44
gosub *opcode_fd_cb_2C
swbreak
case 45
gosub *opcode_fd_cb_2D
swbreak
case 46
gosub *opcode_fd_cb_2E
swbreak
case 47
gosub *opcode_fd_cb_2F
swbreak
case 48
gosub *opcode_fd_cb_30
swbreak
case 49
gosub *opcode_fd_cb_31
swbreak
case 50
gosub *opcode_fd_cb_32
swbreak
case 51
gosub *opcode_fd_cb_33
swbreak
case 52
gosub *opcode_fd_cb_34
swbreak
case 53
gosub *opcode_fd_cb_35
swbreak
case 54
gosub *opcode_fd_cb_36
swbreak
case 55
gosub *opcode_fd_cb_37
swbreak
case 56
gosub *opcode_fd_cb_38
swbreak
case 57
gosub *opcode_fd_cb_39
swbreak
case 58
gosub *opcode_fd_cb_3A
swbreak
case 59
gosub *opcode_fd_cb_3B
swbreak
case 60
gosub *opcode_fd_cb_3C
swbreak
case 61
gosub *opcode_fd_cb_3D
swbreak
case 62
gosub *opcode_fd_cb_3E
swbreak
case 63
gosub *opcode_fd_cb_3F
swbreak
case 64
gosub *opcode_fd_cb_40
swbreak
case 65
gosub *opcode_fd_cb_41
swbreak
case 66
gosub *opcode_fd_cb_42
swbreak
case 67
gosub *opcode_fd_cb_43
swbreak
case 68
gosub *opcode_fd_cb_44
swbreak
case 69
gosub *opcode_fd_cb_45
swbreak
case 70
gosub *opcode_fd_cb_46
swbreak
case 71
gosub *opcode_fd_cb_47
swbreak
case 72
gosub *opcode_fd_cb_48
swbreak
case 73
gosub *opcode_fd_cb_49
swbreak
case 74
gosub *opcode_fd_cb_4A
swbreak
case 75
gosub *opcode_fd_cb_4B
swbreak
case 76
gosub *opcode_fd_cb_4C
swbreak
case 77
gosub *opcode_fd_cb_4D
swbreak
case 78
gosub *opcode_fd_cb_4E
swbreak
case 79
gosub *opcode_fd_cb_4F
swbreak
case 80
gosub *opcode_fd_cb_50
swbreak
case 81
gosub *opcode_fd_cb_51
swbreak
case 82
gosub *opcode_fd_cb_52
swbreak
case 83
gosub *opcode_fd_cb_53
swbreak
case 84
gosub *opcode_fd_cb_54
swbreak
case 85
gosub *opcode_fd_cb_55
swbreak
case 86
gosub *opcode_fd_cb_56
swbreak
case 87
gosub *opcode_fd_cb_57
swbreak
case 88
gosub *opcode_fd_cb_58
swbreak
case 89
gosub *opcode_fd_cb_59
swbreak
case 90
gosub *opcode_fd_cb_5A
swbreak
case 91
gosub *opcode_fd_cb_5B
swbreak
case 92
gosub *opcode_fd_cb_5C
swbreak
case 93
gosub *opcode_fd_cb_5D
swbreak
case 94
gosub *opcode_fd_cb_5E
swbreak
case 95
gosub *opcode_fd_cb_5F
swbreak
case 96
gosub *opcode_fd_cb_60
swbreak
case 97
gosub *opcode_fd_cb_61
swbreak
case 98
gosub *opcode_fd_cb_62
swbreak
case 99
gosub *opcode_fd_cb_63
swbreak
case 100
gosub *opcode_fd_cb_64
swbreak
case 101
gosub *opcode_fd_cb_65
swbreak
case 102
gosub *opcode_fd_cb_66
swbreak
case 103
gosub *opcode_fd_cb_67
swbreak
case 104
gosub *opcode_fd_cb_68
swbreak
case 105
gosub *opcode_fd_cb_69
swbreak
case 106
gosub *opcode_fd_cb_6A
swbreak
case 107
gosub *opcode_fd_cb_6B
swbreak
case 108
gosub *opcode_fd_cb_6C
swbreak
case 109
gosub *opcode_fd_cb_6D
swbreak
case 110
gosub *opcode_fd_cb_6E
swbreak
case 111
gosub *opcode_fd_cb_6F
swbreak
case 112
gosub *opcode_fd_cb_70
swbreak
case 113
gosub *opcode_fd_cb_71
swbreak
case 114
gosub *opcode_fd_cb_72
swbreak
case 115
gosub *opcode_fd_cb_73
swbreak
case 116
gosub *opcode_fd_cb_74
swbreak
case 117
gosub *opcode_fd_cb_75
swbreak
case 118
gosub *opcode_fd_cb_76
swbreak
case 119
gosub *opcode_fd_cb_77
swbreak
case 120
gosub *opcode_fd_cb_78
swbreak
case 121
gosub *opcode_fd_cb_79
swbreak
case 122
gosub *opcode_fd_cb_7A
swbreak
case 123
gosub *opcode_fd_cb_7B
swbreak
case 124
gosub *opcode_fd_cb_7C
swbreak
case 125
gosub *opcode_fd_cb_7D
swbreak
case 126
gosub *opcode_fd_cb_7E
swbreak
case 127
gosub *opcode_fd_cb_7F
swbreak
case 128
gosub *opcode_fd_cb_80
swbreak
case 129
gosub *opcode_fd_cb_81
swbreak
case 130
gosub *opcode_fd_cb_82
swbreak
case 131
gosub *opcode_fd_cb_83
swbreak
case 132
gosub *opcode_fd_cb_84
swbreak
case 133
gosub *opcode_fd_cb_85
swbreak
case 134
gosub *opcode_fd_cb_86
swbreak
case 135
gosub *opcode_fd_cb_87
swbreak
case 136
gosub *opcode_fd_cb_88
swbreak
case 137
gosub *opcode_fd_cb_89
swbreak
case 138
gosub *opcode_fd_cb_8A
swbreak
case 139
gosub *opcode_fd_cb_8B
swbreak
case 140
gosub *opcode_fd_cb_8C
swbreak
case 141
gosub *opcode_fd_cb_8D
swbreak
case 142
gosub *opcode_fd_cb_8E
swbreak
case 143
gosub *opcode_fd_cb_8F
swbreak
case 144
gosub *opcode_fd_cb_90
swbreak
case 145
gosub *opcode_fd_cb_91
swbreak
case 146
gosub *opcode_fd_cb_92
swbreak
case 147
gosub *opcode_fd_cb_93
swbreak
case 148
gosub *opcode_fd_cb_94
swbreak
case 149
gosub *opcode_fd_cb_95
swbreak
case 150
gosub *opcode_fd_cb_96
swbreak
case 151
gosub *opcode_fd_cb_97
swbreak
case 152
gosub *opcode_fd_cb_98
swbreak
case 153
gosub *opcode_fd_cb_99
swbreak
case 154
gosub *opcode_fd_cb_9A
swbreak
case 155
gosub *opcode_fd_cb_9B
swbreak
case 156
gosub *opcode_fd_cb_9C
swbreak
case 157
gosub *opcode_fd_cb_9D
swbreak
case 158
gosub *opcode_fd_cb_9E
swbreak
case 159
gosub *opcode_fd_cb_9F
swbreak
case 160
gosub *opcode_fd_cb_A0
swbreak
case 161
gosub *opcode_fd_cb_A1
swbreak
case 162
gosub *opcode_fd_cb_A2
swbreak
case 163
gosub *opcode_fd_cb_A3
swbreak
case 164
gosub *opcode_fd_cb_A4
swbreak
case 165
gosub *opcode_fd_cb_A5
swbreak
case 166
gosub *opcode_fd_cb_A6
swbreak
case 167
gosub *opcode_fd_cb_A7
swbreak
case 168
gosub *opcode_fd_cb_A8
swbreak
case 169
gosub *opcode_fd_cb_A9
swbreak
case 170
gosub *opcode_fd_cb_AA
swbreak
case 171
gosub *opcode_fd_cb_AB
swbreak
case 172
gosub *opcode_fd_cb_AC
swbreak
case 173
gosub *opcode_fd_cb_AD
swbreak
case 174
gosub *opcode_fd_cb_AE
swbreak
case 175
gosub *opcode_fd_cb_AF
swbreak
case 176
gosub *opcode_fd_cb_B0
swbreak
case 177
gosub *opcode_fd_cb_B1
swbreak
case 178
gosub *opcode_fd_cb_B2
swbreak
case 179
gosub *opcode_fd_cb_B3
swbreak
case 180
gosub *opcode_fd_cb_B4
swbreak
case 181
gosub *opcode_fd_cb_B5
swbreak
case 182
gosub *opcode_fd_cb_B6
swbreak
case 183
gosub *opcode_fd_cb_B7
swbreak
case 184
gosub *opcode_fd_cb_B8
swbreak
case 185
gosub *opcode_fd_cb_B9
swbreak
case 186
gosub *opcode_fd_cb_BA
swbreak
case 187
gosub *opcode_fd_cb_BB
swbreak
case 188
gosub *opcode_fd_cb_BC
swbreak
case 189
gosub *opcode_fd_cb_BD
swbreak
case 190
gosub *opcode_fd_cb_BE
swbreak
case 191
gosub *opcode_fd_cb_BF
swbreak
case 192
gosub *opcode_fd_cb_C0
swbreak
case 193
gosub *opcode_fd_cb_C1
swbreak
case 194
gosub *opcode_fd_cb_C2
swbreak
case 195
gosub *opcode_fd_cb_C3
swbreak
case 196
gosub *opcode_fd_cb_C4
swbreak
case 197
gosub *opcode_fd_cb_C5
swbreak
case 198
gosub *opcode_fd_cb_C6
swbreak
case 199
gosub *opcode_fd_cb_C7
swbreak
case 200
gosub *opcode_fd_cb_C8
swbreak
case 201
gosub *opcode_fd_cb_C9
swbreak
case 202
gosub *opcode_fd_cb_CA
swbreak
case 203
gosub *opcode_fd_cb_CB
swbreak
case 204
gosub *opcode_fd_cb_CC
swbreak
case 205
gosub *opcode_fd_cb_CD
swbreak
case 206
gosub *opcode_fd_cb_CE
swbreak
case 207
gosub *opcode_fd_cb_CF
swbreak
case 208
gosub *opcode_fd_cb_D0
swbreak
case 209
gosub *opcode_fd_cb_D1
swbreak
case 210
gosub *opcode_fd_cb_D2
swbreak
case 211
gosub *opcode_fd_cb_D3
swbreak
case 212
gosub *opcode_fd_cb_D4
swbreak
case 213
gosub *opcode_fd_cb_D5
swbreak
case 214
gosub *opcode_fd_cb_D6
swbreak
case 215
gosub *opcode_fd_cb_D7
swbreak
case 216
gosub *opcode_fd_cb_D8
swbreak
case 217
gosub *opcode_fd_cb_D9
swbreak
case 218
gosub *opcode_fd_cb_DA
swbreak
case 219
gosub *opcode_fd_cb_DB
swbreak
case 220
gosub *opcode_fd_cb_DC
swbreak
case 221
gosub *opcode_fd_cb_DD
swbreak
case 222
gosub *opcode_fd_cb_DE
swbreak
case 223
gosub *opcode_fd_cb_DF
swbreak
case 224
gosub *opcode_fd_cb_E0
swbreak
case 225
gosub *opcode_fd_cb_E1
swbreak
case 226
gosub *opcode_fd_cb_E2
swbreak
case 227
gosub *opcode_fd_cb_E3
swbreak
case 228
gosub *opcode_fd_cb_E4
swbreak
case 229
gosub *opcode_fd_cb_E5
swbreak
case 230
gosub *opcode_fd_cb_E6
swbreak
case 231
gosub *opcode_fd_cb_E7
swbreak
case 232
gosub *opcode_fd_cb_E8
swbreak
case 233
gosub *opcode_fd_cb_E9
swbreak
case 234
gosub *opcode_fd_cb_EA
swbreak
case 235
gosub *opcode_fd_cb_EB
swbreak
case 236
gosub *opcode_fd_cb_EC
swbreak
case 237
gosub *opcode_fd_cb_ED
swbreak
case 238
gosub *opcode_fd_cb_EE
swbreak
case 239
gosub *opcode_fd_cb_EF
swbreak
case 240
gosub *opcode_fd_cb_F0
swbreak
case 241
gosub *opcode_fd_cb_F1
swbreak
case 242
gosub *opcode_fd_cb_F2
swbreak
case 243
gosub *opcode_fd_cb_F3
swbreak
case 244
gosub *opcode_fd_cb_F4
swbreak
case 245
gosub *opcode_fd_cb_F5
swbreak
case 246
gosub *opcode_fd_cb_F6
swbreak
case 247
gosub *opcode_fd_cb_F7
swbreak
case 248
gosub *opcode_fd_cb_F8
swbreak
case 249
gosub *opcode_fd_cb_F9
swbreak
case 250
gosub *opcode_fd_cb_FA
swbreak
case 251
gosub *opcode_fd_cb_FB
swbreak
case 252
gosub *opcode_fd_cb_FC
swbreak
case 253
gosub *opcode_fd_cb_FD
swbreak
case 254
gosub *opcode_fd_cb_FE
swbreak
case 255
gosub *opcode_fd_cb_FF
swbreak
swend
wpoke stack(0),10,wpeek(stack(0),10)+2
poke stack(0),14,peek(stack(0),14)+1
swbreak
case 204
gosub *opcode_fd_CC
swbreak
case 205
gosub *opcode_fd_CD
swbreak
case 206
gosub *opcode_fd_CE
swbreak
case 207
gosub *opcode_fd_CF
swbreak
case 208
gosub *opcode_fd_D0
swbreak
case 209
gosub *opcode_fd_D1
swbreak
case 210
gosub *opcode_fd_D2
swbreak
case 211
gosub *opcode_fd_D3
swbreak
case 212
gosub *opcode_fd_D4
swbreak
case 213
gosub *opcode_fd_D5
swbreak
case 214
gosub *opcode_fd_D6
swbreak
case 215
gosub *opcode_fd_D7
swbreak
case 216
gosub *opcode_fd_D8
swbreak
case 217
gosub *opcode_fd_D9
swbreak
case 218
gosub *opcode_fd_DA
swbreak
case 219
gosub *opcode_fd_DB
swbreak
case 220
gosub *opcode_fd_DC
swbreak
case 221
gosub *opcode_fd_DD
swbreak
case 222
gosub *opcode_fd_DE
swbreak
case 223
gosub *opcode_fd_DF
swbreak
case 224
gosub *opcode_fd_E0
swbreak
case 225
gosub *opcode_fd_E1
swbreak
case 226
gosub *opcode_fd_E2
swbreak
case 227
gosub *opcode_fd_E3
swbreak
case 228
gosub *opcode_fd_E4
swbreak
case 229
gosub *opcode_fd_E5
swbreak
case 230
gosub *opcode_fd_E6
swbreak
case 231
gosub *opcode_fd_E7
swbreak
case 232
gosub *opcode_fd_E8
swbreak
case 233
gosub *opcode_fd_E9
swbreak
case 234
gosub *opcode_fd_EA
swbreak
case 235
gosub *opcode_fd_EB
swbreak
case 236
gosub *opcode_fd_EC
swbreak
case 237
gosub *opcode_fd_ED
swbreak
case 238
gosub *opcode_fd_EE
swbreak
case 239
gosub *opcode_fd_EF
swbreak
case 240
gosub *opcode_fd_F0
swbreak
case 241
gosub *opcode_fd_F1
swbreak
case 242
gosub *opcode_fd_F2
swbreak
case 243
gosub *opcode_fd_F3
swbreak
case 244
gosub *opcode_fd_F4
swbreak
case 245
gosub *opcode_fd_F5
swbreak
case 246
gosub *opcode_fd_F6
swbreak
case 247
gosub *opcode_fd_F7
swbreak
case 248
gosub *opcode_fd_F8
swbreak
case 249
gosub *opcode_fd_F9
swbreak
case 250
gosub *opcode_fd_FA
swbreak
case 251
gosub *opcode_fd_FB
swbreak
case 252
gosub *opcode_fd_FC
swbreak
case 253
gosub *opcode_fd_FD
swbreak
case 254
gosub *opcode_fd_FE
swbreak
case 255
gosub *opcode_fd_FF
swbreak
swend
poke stack(0),14,peek(stack(0),14)+1
swbreak
case 254
gosub *opcode_FE
swbreak
case 255
gosub *opcode_FF
swbreak
swend
return
#endif
#global
#endif
gocaine_z80init
